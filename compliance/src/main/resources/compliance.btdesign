Application Compliance {
    basePackage = ma.hps

    Module compliance {
        basePackage = ma.hps.powercard.compliance hint = "generateMakerChecker,persistenceUnit=Pwcv31dev"
        
		 /****************************  Columns Filter ****************************/
		        /**** Static_list ****/ Entity Static_list {
            databaseTable = "Static_list" auditable
            ! optimisticLocking
            scaffold
            Long value_sequence key databaseType = "NUMBER(10,0)";
            //String screen_name key length = "128";
            String collection_name key length = "128";
            String value_id databaseColumn = "value_id" length = "128" nullable;
            String value_label databaseColumn = "value_label" length = "250" nullable;
            String value_order databaseColumn = "value_order" databaseType = "NUMBER(4,0)" nullable;

            Repository Static_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Static_listVO {
            Long value_sequence ; String collection_name ; String value_id ; String value_label ; String value_order ;
			Collection < String > value_idCollection hint = "op=in,issearch,column_entity=value_id" ;
			Collection < String > inNameCollection hint = "op=in,issearch,column_entity=collection_name" ;
        }

        Service Static_listService {
            > @Static_listRepository
            String createStatic_listService(@Static_listVO static_listVO);
            String updateStatic_listService(@Static_listVO static_listVO);
            String deleteStatic_listService(@Static_listVO static_listVO);
            List<@Static_listVO> getAllStatic_listService();
            List<@Static_listVO> searchStatic_listService(@Static_listVO static_listVO);
        }
		Entity Columns_filter
		{
			databaseTable="Columns_filter"
			auditable
			!optimisticLocking
			scaffold
			Long columns_filter_id key hint="AutoGenerated" databaseType="NUMBER(10,0)";
			-@Filter fk_columns_filter_02 hint="BaseColumn1=filter_fk" opposite columns_filters;
			-@Pwc_columns fk_columns_filter_01 hint="BaseColumn1=pwc_columns_fk" nullable;
			String operation databaseColumn="operation" length="1" nullable;
			String source databaseColumn="source" length="16" nullable;
			String name databaseColumn="name" length="16" nullable;
			Repository Columns_filterRepository {
				findByKeys;
				findByKey;
				findByCondition;
				findByCriteria;
			}
		} 
		
		DataTransferObject Columns_filterVO { 
			Long columns_filter_id;
			String operation;
			String source;
			String name;
			Long filter_fk;
			Long pwc_columns_fk;
			Collection <Column_valuesVO > column_values_col hint="issearch" ;
			Pwc_columnsVO ref_pwc_columns hint="reference=fk_columns_filter_01" ;
		}
		Service Columns_filterService{ 
			> @Columns_filterRepository
			> @Pwc_columnsService
			String createColumns_filterService(@Columns_filterVO columns_filterVO);
			String updateColumns_filterService(@Columns_filterVO columns_filterVO);
			String deleteColumns_filterService(@Columns_filterVO columns_filterVO);
			List<@Columns_filterVO> getAllColumns_filterService();
			List<@Columns_filterVO> searchColumns_filterService(@Columns_filterVO columns_filterVO);
			String createAllColumns_filterService(List<@Columns_filterVO> list_columns_filterVO);
			String updateAllColumns_filterService(List<@Columns_filterVO> list_columns_filterVO);
			String deleteAllColumns_filterService(List<@Columns_filterVO> list_columns_filterVO);
			String mergeColumns_filterService(@Columns_filterVO columns_filterVO);
			String mergeAllColumns_filterService(List<@Columns_filterVO> list_columns_filterVO);
		}
		
		/*********************************** Filter ******************************************/ 
		
		Entity Filter
		{
			databaseTable="Filter"
			auditable
			!optimisticLocking
			scaffold
			Long filter_id key hint="AutoGenerated" databaseType="NUMBER(19,0)";
			String filter_code databaseColumn="filter_code" length="5" nullable;
			String name databaseColumn="name" length="16" nullable;
			String wording databaseColumn="wording" length="32" nullable;
			String admin databaseColumn="admin" length="1" nullable;
			-@Pwc_tables fk_filter hint="BaseColumn1=pwc_tables_fk" nullable;
			- Set<@Columns_filter> columns_filters cascade="none" opposite fk_columns_filter_02;
		
			Repository FilterRepository {
				findByKeys;
				findByKey;
				findByCondition;
				findByCriteria;
			}
		} 
		
		DataTransferObject FilterVO { 
			Long filter_id;
			String filter_code;
			String name;
			String wording;
			String admin;
			Long pwc_tables_fk;
			Pwc_tablesVO ref_pwc_tables hint="reference=fk_filter" ;
			Collection <Columns_filterVO> columns_filter_col hint="Set=columns_filters" ; 
		}
		Service FilterService{ 
			> @FilterRepository
			> @Columns_filterService
			> @Pwc_tablesService
			String createFilterService(@FilterVO filterVO) hint="returnAttribute=filter_id";
			String updateFilterService(@FilterVO filterVO);
			String deleteFilterService(@FilterVO filterVO);
			List<@FilterVO> getAllFilterService();
			List<@FilterVO> searchFilterService(@FilterVO filterVO);
			String processOperations(com.google.gson.JsonObject mapVO) hint="multiOperations,Entity1=Columns_filter";
		}

        /***************** Begin FilterValues ***************************/
        
        Entity Filter_values {
            auditable
            ! optimisticLocking
            scaffold
            Long filter_values_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String param_name length = "16" nullable;
            - @Columns_filter column_id hint = "BaseColumn1=columns_filter_fk" fetch = "lazy";

            Repository Filter_valuesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Filter_valuesVO {
			Long filter_values_id ;
			String param_name ;
			Long columns_filter_fk ;
		}

        Service Filter_valuesService {
            > @Filter_valuesRepository
            String createFilter_valuesService(@Filter_valuesVO filter_valuesVO);
            String updateFilter_valuesService(@Filter_valuesVO filter_valuesVO);
            String deleteFilter_valuesService(@Filter_valuesVO filter_valuesVO);
            List<@Filter_valuesVO> getAllFilter_valuesService();
            List<@Filter_valuesVO> searchFilter_valuesService(@Filter_valuesVO filter_valuesVO);
        }

        /******************************** PWC_Table ***********************************/ Entity Pwc_tables {
            auditable
            ! optimisticLocking
            scaffold
            Long pwc_tables_id key hint = "AutoGenerated" databaseType = "NUMBER(19,0)";
            String table_name length = "30";
            String wording length = "32";
            String entity_name length = "256";
            String apply_filter length = "1";

            Repository Pwc_tablesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
                //List<String> findbyProjection(String entity_name, String column) => AccessObject;
            }
        }

		DataTransferObject Pwc_tablesVO {
			Long pwc_tables_id ;
			String table_name ;
			String wording ;
			String entity_name ;
			String apply_filter ;
		}

        Service Pwc_tablesService {
            > @Pwc_tablesRepository
            List<@Pwc_tablesVO> getAllPwc_tablesService();
            List<@Pwc_tablesVO> searchPwc_tablesService(@Pwc_tablesVO pwc_tablesVO);
           // List<String> findbyProjection(String entity_name, String column);
        }

        /******************************** Begin DataAccess *************************/ Entity Data_access {
            auditable
            ! optimisticLocking
            scaffold
            Long data_access_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String data_access_code length = "5";
            String data_access_name length = "16";
            String admin length = "1";
            String wording length = "64";
            - Set<@Data_columns_filter> data_columns_filters cascade = "all-delete-orphan" opposite fk_filter_data_access;

            Repository Data_accessRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Data_accessVO {
			Long data_access_id ;
			String data_access_code ;
			String data_access_name ;
			String admin ;
			String wording ;
			Collection <Data_columns_filterVO > data_columns_filter_col hint = "Set=data_columns_filters" ;
		}

        Service Data_accessService {
            > @Data_accessRepository
            > @Data_columns_filterService
            String createData_accessService(@Data_accessVO data_accessVO);
            String updateData_accessService(@Data_accessVO data_accessVO);
            String deleteData_accessService(@Data_accessVO data_accessVO);
            List<@Data_accessVO> getAllData_accessService();
            List<@Data_accessVO> searchData_accessService(@Data_accessVO data_accessVO);
        }

        /******************************** Filter to DataAccess *************************/ Entity Filter_data_access {
            auditable
            ! optimisticLocking
            scaffold
            - @Data_access fk_data_access key hint = "BaseColumn1=data_access_fk" fetch = "lazy";
            - @Filter fk_filter key hint = "BaseColumn1=filter_fk" fetch = "lazy";

            Repository Filter_data_accessRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Filter_data_accessVO {
            Long data_access_fk ; Long filter_fk ; Collection < Columns_filterVO > columns_filter hint = "issearch" //hint="association=Data_columns_filter";

        }

        Service Filter_data_accessService {
            > @Filter_data_accessRepository
            > @Columns_filterRepository
            > @Columns_filterService
            > @Data_columns_filterRepository
            > @Data_columns_filterService
            String createFilter_data_accessService(@Filter_data_accessVO filter_data_accessVO);
            String updateFilter_data_accessService(@Filter_data_accessVO filter_data_accessVO);
            String deleteFilter_data_accessService(@Filter_data_accessVO filter_data_accessVO);
            List<@Filter_data_accessVO> getAllFilter_data_accessService();
            List<@Filter_data_accessVO> searchFilter_data_accessService(@Filter_data_accessVO filter_data_accessVO);
        }

        /******************************** Data_Column_Filter  *************************/ Entity Data_columns_filter {
            auditable
            ! optimisticLocking
            scaffold
            Long data_columns_filter_id key hint = "AutoGenerated";
            - @Data_access fk_filter_data_access hint = "BaseColumn1=data_access_fk" opposite data_columns_filters;
            - @Columns_filter fk_columns_filter hint = "BaseColumn1=columns_filter_fk" fetch = "lazy";
            - @Filter fk_filter hint = "BaseColumn1=filter_fk" fetch = "lazy";
            - Set<@Data_columns_filter_values> data_columns_filter_values cascade = "all-delete-orphan" opposite fk_data_columns_filter_id;

            Repository Data_columns_filterRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Data_columns_filterVO {
			Long data_columns_filter_id ;
			Long data_access_fk ;
			Long filter_fk ;
			Long columns_filter_fk ;
			Columns_filterVO ref_columns_filter hint
			= "reference=fk_columns_filter" ;
			FilterVO ref_filter hint = "reference=fk_filter" ;
			Collection < Data_columns_filter_valuesVO >
			data_columns_filter_values_col hint = "Set=data_columns_filter_values" ;
		}

        Service Data_columns_filterService {
            > @Data_columns_filterRepository
            > @Columns_filterService
            > @FilterService
            > @Data_columns_filter_valuesService
            String createData_columns_filterService(@Data_columns_filterVO data_columns_filterVO);
            String updateData_columns_filterService(@Data_columns_filterVO data_columns_filterVO);
            String deleteData_columns_filterService(@Data_columns_filterVO data_columns_filterVO);
            List<@Data_columns_filterVO> getAllData_columns_filterService();
            List<@Data_columns_filterVO> searchData_columns_filterService(@Data_columns_filterVO data_columns_filterVO);
        }

        /******************************** Data_columns_Filter_Values  *************************/ Entity Data_columns_filter_values
            {
            databaseTable = "Data_columns_filter_values" auditable
            ! optimisticLocking
            scaffold
            Long data_columns_filter_values_id key hint = "AutoGenerated" databaseColumn = "data_columns_filter_values_id" databaseType =
            "NUMBER(10,0)";
            String val;
            - @Data_columns_filter fk_data_columns_filter_id hint = "BaseColumn1=data_columns_filter_fk" opposite
            data_columns_filter_values;

            Repository Data_columns_filter_valuesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Data_columns_filter_valuesVO {
			Long data_columns_filter_values_id ;
			Long data_columns_filter_fk ;
			String val ;
		}

        Service Data_columns_filter_valuesService {
            > @Data_columns_filter_valuesRepository
            String createData_columns_filter_valuesService(@Data_columns_filter_valuesVO data_columns_filter_valuesVO);
            String updateData_columns_filter_valuesService(@Data_columns_filter_valuesVO data_columns_filter_valuesVO);
            String deleteData_columns_filter_valuesService(@Data_columns_filter_valuesVO data_columns_filter_valuesVO);
            List<@Data_columns_filter_valuesVO> getAllData_columns_filter_valuesService();
            List<@Data_columns_filter_valuesVO> searchData_columns_filter_valuesService(@Data_columns_filter_valuesVO
            data_columns_filter_valuesVO);
        }

		/******************************** Begin Roles *************************/ 
		Entity Role {
			auditable
			! optimisticLocking
			scaffold
			String role_id key;
			String name length = "32";
			String status length = "1";
			String role_code length = "5";
			String wording length = "64";
			String admin length = "1";
			- Set<@Grant_permission> grant_permissions cascade = "all-delete-orphan" opposite role_id;
			- Bag<@Menu> menusRole cascade = "none" hint = "joinTableName=Menus2roles" orderby = "menu_level,menu_order";
			- Set<@Secured_ressource> secured_ressources cascade = "none" hint = "joinTableName=Secured_ressource_role";

            Repository RoleRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject RoleVO {
			String role_id ;
			String name ;
			String status ;
			String role_code ;
			String wording ;
			String admin ;
			Collection < MenuVO > menus hint = "Set=menusRole" ;
			Collection < Secured_ressourceVO > secured_ressource_col hint = "Set=secured_ressources" ;
			Collection < Grant_permissionVO > grantsPermissions hint = "Set=grant_permissions" ;
		}

        Service RoleService {
            hint = "ref1=Secured_ressourceService"
            > @RoleRepository
            > @MenuService
            > @Secured_ressourceService
            > @Grant_permissionService
            String createRoleService(@RoleVO roleVO);
            String updateRoleService(@RoleVO roleVO);
            String deleteRoleService(@RoleVO roleVO);
            List<@RoleVO> getAllRoleService();
            List<@RoleVO> searchRoleService(@RoleVO roleVO);
        }

		/********************************* Begin Profile ***********************/
		Entity Profile {
			auditable
			! optimisticLocking
			scaffold
			cache String profile_id key;
			String name length = "16" nullable;
			String status length = "1" nullable;
			String wording length = "32" nullable;
			String profile_code length = "5" nullable;
			String admin length = "1" nullable;
			String timer_pwc_disconnection databaseType = "NUMBER(5,0)" nullable;
			String pwc_disconnection length = "1" nullable;
			String timer_browser_disconnection databaseType = "NUMBER(1,0)" nullable;
			String dis_notification_type length = "1" nullable;
			String browser_disconnection length = "1" nullable;//- @Institution institution_id hint = "BaseColumn1=institution_fk"  ;
			String ^email length = "128" nullable;
			- @Bank bank_code hint = "BaseColumn1=institution_fk" fetch = "lazy";
		    - @Data_access data_access_id hint = "BaseColumn1= data_access_fk" nullable fetch = "lazy";
			- @Password password_complexity_id hint = "BaseColumn1= password_complexity_fk" nullable fetch = "lazy";
		    - Set<@Role> roles1 cascade = "none" hint = "joinTableName=Delegted_roles2profiles";
		    - Set<@Role> roles2 cascade = "none" hint = "joinTableName=Assigned_roles2profiles";
		    String bank_data_access databaseColumn = "bank_data_access" length = "4000" nullable;
		    String pan_visualization databaseColumn = "pan_visualization" length = "1" nullable;
		    - Set<@Grants2profiles> restricted_services cascade = "all-delete-orphan" opposite fk_profile;

            Repository ProfileRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }
 	DataTransferObject ProfileSpecificVO {
            String profile_id ; 
            String name ; 
            String status ; 
            String wording ; 
            String password_complexity_fk; 
            String profile_code ; 
            String admin ; 
            String timer_pwc_disconnection ; 
            String pwc_disconnection ; 
            String timer_browser_disconnection ; 
            String dis_notification_type ; 
            String browser_disconnection ; 
            String ^email ;
            String institution_fk ; 
            Long data_access_fk ; 
            Collection < RoleVO > delegatedRoles hint = "Set=roles1" ; 
            Collection < RoleVO > assignedRoles hint = "Set=roles2" ;
            String password_complexity_id;
            Collection<BankVO> listofBanks;
            String pan_visualization;
            String skip_data_access hint ="issearch,skip";
        }
        DataTransferObject ProfileVO {
            String profile_id ; 
            String name ; 
            String status ; 
            String wording ; 
            String password_complexity_fk; 
            String profile_code ; 
            String admin ; 
            String timer_pwc_disconnection ; 
            String pwc_disconnection ; 
            String timer_browser_disconnection ; 
            String dis_notification_type ; 
            String browser_disconnection ; 
            String ^email ;
            String institution_fk ; 
            Long data_access_fk ; 
            Collection < RoleVO > delegatedRoles hint = "Set=roles1" ; 
            Collection < RoleVO > assignedRoles hint = "Set=roles2" ;
            Collection < Grants2profilesVO > restServices hint = "Set=restricted_services" ;
            String password_complexity_id;
            String bank_data_access;
            String pan_visualization;
            String skip_data_access hint ="issearch,skip";
        }

        DataTransferObject ActivDesactivProfileVO {
        }

        Service ProfileService {
            hint = "notMakerchecker,ref1=BankService,ref2=Data_accessService,ref3=RoleService"
            > @ProfileRepository
            > @RoleService
            > @Delegted_roles2profilesService
            > @Assigned_roles2profilesService
			> @Grants2profilesService
            String createProfileService(@ProfileVO profileVO);
            String updateProfileService(@ProfileVO profileVO);
            String deleteProfileService(@ProfileVO profileVO);
            List<@ProfileVO> getAllProfileService();
            List<@ProfileVO> searchProfileService(@ProfileVO profileVO);
            String updateAllProfileService(List<@ProfileVO> list_profile);
            String updateDataAccessProfile(@ProfileVO profileVO);
        }

        /********************************* Begin Assignedrole2profile ***********************/ Entity Assigned_roles2profiles {
            auditable
            ! optimisticLocking
            scaffold
            cache - @Profile role_profiles_fkc key hint = "BaseColumn1=profiles_fk" fetch = "lazy";
            - @Role profile_assigned_roles_fkc key hint = "BaseColumn1=assigned_roles_fk" fetch = "lazy";

            Repository Assigned_roles2profilesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Assigned_roles2profilesVO {
            String profiles_fk ; String assigned_roles_fk ;
        }

        Service Assigned_roles2profilesService {
            > @Assigned_roles2profilesRepository
            String createAssigned_roles2profilesService(@Assigned_roles2profilesVO assigned_roles2profilesVO);
            String updateAssigned_roles2profilesService(@Assigned_roles2profilesVO assigned_roles2profilesVO);
            String deleteAssigned_roles2profilesService(@Assigned_roles2profilesVO assigned_roles2profilesVO);
            List<@Assigned_roles2profilesVO> getAllAssigned_roles2profilesService();
            List<@Assigned_roles2profilesVO> searchAssigned_roles2profilesService(@Assigned_roles2profilesVO assigned_roles2profilesVO
            );
        }

        /********************************* Begin Delegted_roles2profiles ***********************/ Entity Delegted_roles2profiles {
            auditable
            ! optimisticLocking
            scaffold
            cache - @Profile role_profiles_fkl key hint = "BaseColumn1=profiles_fk" fetch = "lazy";
            - @Role profile_delegted_roles_fkc key hint = "BaseColumn1=delegted_roles_fk" fetch = "lazy";

            Repository Delegted_roles2profilesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Delegted_roles2profilesVO {
            String profiles_fk ; String delegted_roles_fk ;
        }

        Service Delegted_roles2profilesService {
            > @Delegted_roles2profilesRepository
            String createDelegted_roles2profilesService(@Delegted_roles2profilesVO delegted_roles2profilesVO);
            String updateDelegted_roles2profilesService(@Delegted_roles2profilesVO delegted_roles2profilesVO);
            String deleteDelegted_roles2profilesService(@Delegted_roles2profilesVO delegted_roles2profilesVO);
            List<@Delegted_roles2profilesVO> getAllDelegted_roles2profilesService();
            List<@Delegted_roles2profilesVO> searchDelegted_roles2profilesService(@Delegted_roles2profilesVO delegted_roles2profilesVO
            );
        }
        
        
        /********************************* Begin Pwc_oauth2_config ***********************/
        Entity Pwc_oauth2_config {
        	auditable
			! optimisticLocking
			scaffold
			String oauth2_config_id key;
			String name length = "16" nullable;
			String oauth2_server_api length = "100";
			String oauth2_accesstoken_api length = "100";
			String oauth2_userinfo_api length = "100" nullable;
            String token_contains_info length = "1" nullable;
			String client_id length = "100";
			String client_secret length = "100";
			String scope length = "400" nullable;
			String redirect_uri length = "100";
			String userinfo_parameter_name length = "100";
            String profile_parameter_name length = "100";
			- @Bank user_bank_code hint = "BaseColumn1=user_bank_code" fetch = "lazy";
			- @Profile user_profile_id hint = "BaseColumn1=user_profile_id" fetch = "lazy" nullable;
            - Set<@Pwc_oauth2_profile> mapping_profiles cascade = "all-delete-orphan" opposite config_id;

            Repository Pwc_oauth2_configRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }
 	
        DataTransferObject Pwc_oauth2_configVO {
            String oauth2_config_id;
			String name;
			String oauth2_server_api;
			String oauth2_accesstoken_api;
			String oauth2_userinfo_api;
            String token_contains_info;
			String client_id;
			String client_secret;
			String scope;
			String redirect_uri;
			String userinfo_parameter_name;
            String profile_parameter_name;
			String user_bank_code;
			String user_profile_id;
            Collection < Pwc_oauth2_profileVO > mappingProfiles hint = "Set=mapping_profiles" ;
        }

        Service Pwc_oauth2_configService {
            > @Pwc_oauth2_configRepository
            > @Pwc_oauth2_profileService
            String createPwc_oauth2_configService(@Pwc_oauth2_configVO pwc_oauth2_configVO);
            String updatePwc_oauth2_configService(@Pwc_oauth2_configVO pwc_oauth2_configVO);
            String deletePwc_oauth2_configService(@Pwc_oauth2_configVO pwc_oauth2_configVO);
            List<@Pwc_oauth2_configVO> getAllPwc_oauth2_configService();
            List<@Pwc_oauth2_configVO> searchPwc_oauth2_configService(@Pwc_oauth2_configVO pwc_oauth2_configVO);
        }
        
        /********************************* Begin Pwc_oauth2_profile ***********************/
        Entity Pwc_oauth2_profile {
                
        	auditable
			! optimisticLocking
			scaffold
			- @Pwc_oauth2_config config_id key hint = "BaseColumn1=config_fk" opposite mapping_profiles;
            String profile_fk key length = "32";
			String oauth2_profile_code length = "100";

            Repository Pwc_oauth2_profileRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }
 	
        DataTransferObject Pwc_oauth2_profileVO {
            String config_fk;
            String profile_fk;
            String oauth2_profile_code;
        }

        Service Pwc_oauth2_profileService {
            > @Pwc_oauth2_profileRepository
            String createPwc_oauth2_profileService(@Pwc_oauth2_profileVO pwc_oauth2_profileVO);
            String updatePwc_oauth2_profileService(@Pwc_oauth2_profileVO pwc_oauth2_profileVO);
            String deletePwc_oauth2_profileService(@Pwc_oauth2_profileVO pwc_oauth2_profileVO);
            List<@Pwc_oauth2_profileVO> getAllPwc_oauth2_profileService();
            List<@Pwc_oauth2_profileVO> searchPwc_oauth2_profileService(@Pwc_oauth2_profileVO pwc_oauth2_profileVO);
        }

        /******************************* Begin Screen ************************************/ Entity Screen {
            auditable
            ! optimisticLocking
            scaffold
            cache String screen_id key;// hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String name length = "128";
            String screen_code length = "64";
            String wording length = "64";
            String url length = "512";
            - Set<@Component> components cascade = "all-delete-orphan" opposite screen_parent;
            
            - Set<@Services> services cascade = "none" hint = "joinTableName=Screen_services";

            Repository ScreenRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject ScreenVO {
            String screen_id ; String name ; String screen_code ; String wording ; String url ; Collection < ComponentVO > components_col hint =
            "Set=components" ; //hint="linkref=screen_parent" ;
            Collection < ServicesVO > services_col hint = "Set=services"
            ;
            boolean screen_idConditionIn hint ="condition=in,operand=screen_idCol" ;   
            Collection < String > screen_idCol hint="attribute=screen_id";
        }

        Service ScreenService {
            hint = "ref1=Component_typeService,ref2=ServicesService"
            > @ScreenRepository
            > @ComponentService
            > @ServicesService
            String createScreenService(@ScreenVO screenVO);
            String updateScreenService(@ScreenVO screenVO);
            String deleteScreenService(@ScreenVO screenVO);
            List<@ScreenVO> getAllScreenService();
            List<@ScreenVO> searchScreenService(@ScreenVO screenVO);
        }

        /************************** Begin ComponentType **************************/ Entity Component_type {
            auditable
            ! optimisticLocking
            scaffold
            Long component_type_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String type length = "50";
            String component_type_code length = "5";

            Repository Component_typeRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Component_typeVO {
            Long component_type_id ; String type ; String component_type_code ;
        }

        Service Component_typeService {
            > @Component_typeRepository
            String createComponent_typeService(@Component_typeVO component_typeVO);
            String updateComponent_typeService(@Component_typeVO component_typeVO);
            String deleteComponent_typeService(@Component_typeVO component_typeVO);
            List<@Component_typeVO> getAllComponent_typeService();
            List<@Component_typeVO> searchComponent_typeService(@Component_typeVO component_typeVO);
        }

        /**************************** Begin Component *******************************/ Entity Component {
            auditable
            ! optimisticLocking
            scaffold
            String component_id key;// hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String component_name length = "60";
            String component_code length = "64";
            - @Screen screen_parent hint = "BaseColumn1=screen_parent_fk" nullable opposite components;
            - @Screen screen_refered hint = "BaseColumn1=screen_refered_fk" nullable fetch = "lazy";//Long screen_refered_fk;
            - @Component_type component_type hint = "BaseColumn1=component_type_fk" fetch = "lazy";
            - @Component component_parent hint = "BaseColumn1=parent_component_fk" nullable fetch = "lazy";
            - Set<@Grant_permission> grant_permissions cascade = "all-delete-orphan" opposite component_id;

            Repository ComponentRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject ComponentVO {
            String component_id ; String component_name ; String component_code ; String screen_refered_fk ; String screen_parent_fk ; Long
            component_type_fk ; String parent_component_fk ; Collection < Grant_permissionVO > grantsPermissions hint = "Set=grant_permissions" ;
            String screen_code hint = "issearch,FK1=screen_parent,attribute=screen_code";
            boolean component_idConditionIn hint ="condition=in,operand=component_idCol" ;   
            Collection < String > component_idCol hint="attribute=component_id";
        }

        Service ComponentService {
            > @ComponentRepository
            > @Grant_permissionService
            String createComponentService(@ComponentVO componentVO);
            String updateComponentService(@ComponentVO componentVO);
            String deleteComponentService(@ComponentVO componentVO);
            List<@ComponentVO> getAllComponentService();
            List<@ComponentVO> searchComponentService(@ComponentVO componentVO);
        }

        /************************************* Begin Menu *********************************/ Entity Menu {
            auditable
            ! optimisticLocking
            scaffold
            String menu_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String name length = "32" nullable;
			String module;
			String workspace;
            String wording length = "512" nullable;
            String menu_code length = "5" nullable;
            String admin length = "1" nullable;
            String params length = "400" nullable;
            String type length = "1" nullable;
            Long menu_order nullable;
            Long menu_level nullable;
            String url length = "512" nullable;
	        String key_words  nullable;
            - @Screen screen_refered hint = "BaseColumn1=screen_refered_fk" nullable fetch = "lazy";
            - @Menu menu_parent hint = "BaseColumn1=menu_parent_fk" nullable fetch = "lazy";
            - Set<@Menu_param> menu_params cascade = "all-delete-orphan" opposite menu_code_fk;

            Repository MenuRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject MenuVO {
			String menu_id ;
			String name ;
			String module;
			String workspace;
			String wording ;
			String menu_code ;
			String admin ;
			String type ;
			String params ;
			String screen_refered_fk ;
			String menu_parent_fk ;
			Long menu_order hint = "order2=Asc" ;
			Long menu_level hint = "order1=Asc" ;
			String url ;String key_words;
			Collection < String > menuColVO ;
			Collection < Menu_paramVO > menu_param_col hint = "Set=menu_params"
		}

        Service MenuService {            
            > @MenuRepository //> @Menu_languageService
            > @Menu_paramService
            > @Ressource_bundleService
            String createMenuService(@MenuVO menuVO);
            String updateMenuService(@MenuVO menuVO);
            String deleteMenuService(@MenuVO menuVO);
            List<@MenuVO> getAllMenuService();
            List<@MenuVO> searchMenuService(@MenuVO menuVO);
	    String updateAllProfileService(List<@MenuVO> list_menu);
            String processOperations(com.google.gson.JsonObject mapVO) hint = "multiOperations,Entity1=Menu,Entity2=Ressource_bundle";
        }

        /************************************* Begin Menu_language *********************************/ Entity Menu_language {
            ! auditable
            ! optimisticLocking
            scaffold
            - @Language_list fk_language key hint = "BaseColumn1=language_code" fetch = "lazy";
            - @Menu fk_menu key hint = "BaseColumn1=menu_id" fetch = "lazy";
            String val databaseColumn = "val" length = "32";

            Repository Menu_languageRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Menu_languageVO {
			String language_code ;
			String menu_id ;
			String val ;
		}

        Service Menu_languageService {
            > @Menu_languageRepository
            String createMenu_languageService(@Menu_languageVO menu_languageVO);
            String updateMenu_languageService(@Menu_languageVO menu_languageVO);
            String deleteMenu_languageService(@Menu_languageVO menu_languageVO);
            List<@Menu_languageVO> getAllMenu_languageService();
            List<@Menu_languageVO> searchMenu_languageService(@Menu_languageVO menu_languageVO);
        }

        /******************************** Begin Grant_Permission ************/ Entity Grant_permission {
            auditable
            ! optimisticLocking
            scaffold
            cache Long grant_permission_id key hint = "AutoGenerated" databaseType = "NUMBER(19,0)";
            Long type_grant databaseType = "NUMBER(19,0)";
            - @Type_permission permission_id hint = "BaseColumn1=type_permission_fk" nullable fetch = "lazy";
            - @Menu menu_id hint = "BaseColumn1=menu_fk" nullable fetch = "lazy";
            - @Screen screen_id hint = "BaseColumn1=screen_fk" nullable fetch = "lazy";
            - @Component component_id hint = "BaseColumn1=component_fk" nullable opposite grant_permissions;
            - @Role role_id hint = "BaseColumn1=role_fk" nullable opposite grant_permissions;

            Repository Grant_permissionRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

		DataTransferObject Grant_permissionVO {
			Long grant_permission_id ;
			Long type_grant hint = "order1=Asc" ;
			Long type_permission_fk ;
			String menu_fk ;
			String screen_fk;
			String component_fk;
			String role_fk ;
			String screen_code hint = "issearch,FK1=screen_id,attribute=screen_code" String screen_refered hint =
			"issearch,FK1=component_id,FK2=screen_parent,attribute=screen_code"
			boolean conditionIn hint ="condition=in,operand=colRoles"
			Collection<String> colRoles hint="FK1=role_id,attribute=role_id"  
			boolean conditionInComponent_id hint ="condition=in,operand=colComponent_fk"
			Collection<String> colComponent_fk hint="FK1=component_id,attribute=component_id" 
			Collection<String> colRole_fk hint="FK1=role_fk,attribute=role_fk"
		}

        Service Grant_permissionService {
            > @Grant_permissionRepository
            String createGrant_permissionService(@Grant_permissionVO grant_permissionVO);
            String updateGrant_permissionService(@Grant_permissionVO grant_permissionVO);
            String deleteGrant_permissionService(@Grant_permissionVO grant_permissionVO);
            List<@Grant_permissionVO> getAllGrant_permissionService();
            List<@Grant_permissionVO> searchGrant_permissionService(@Grant_permissionVO grant_permissionVO);
        }

        /******************************** Begin Type_permission ************/ Entity Type_permission {
            auditable
            ! optimisticLocking
            scaffold
            Long permission_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String name length = "16";
            String wording length = "32";
            String permission_code length = "5";
            - @Type_permission required_permission_fk hint = "BaseColumn1=required_permission_fk" nullable fetch = "lazy";

            Repository Type_permissionRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Type_permissionVO {
			Long permission_id ;
			String name ;
			String wording ;
			String permission_code ;
			Long required_permission_fk ;
		}

        Service Type_permissionService {
            > @Type_permissionRepository
            String createType_permissionService(@Type_permissionVO type_permissionVO);
            String updateType_permissionService(@Type_permissionVO type_permissionVO);
            String deleteType_permissionService(@Type_permissionVO type_permissionVO);
            List<@Type_permissionVO> getAllType_permissionService();
            List<@Type_permissionVO> searchType_permissionService(@Type_permissionVO type_permissionVO);
        }

        /******************************** Begin Menus2roles ************/ Entity Menus2roles {
            auditable
            ! optimisticLocking
            scaffold
            cache - @Menu menu_fk key hint = "BaseColumn1=menus_fk" fetch = "lazy";
            - @Role role_fk key hint = "BaseColumn1=roles_fk" fetch = "lazy";//			Long menu_order;
            //            Long menu_level;


            Repository Menus2rolesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Menus2rolesVO {
			String menus_fk;
			String roles_fk;
		}

        Service Menus2rolesService {
            > @Menus2rolesRepository
            String createMenus2rolesService(@Menus2rolesVO menus2rolesVO);
            String updateMenus2rolesService(@Menus2rolesVO menus2rolesVO);
            String deleteMenus2rolesService(@Menus2rolesVO menus2rolesVO);
            List<@Menus2rolesVO> getAllMenus2rolesService();
            List<@Menus2rolesVO> searchMenus2rolesService(@Menus2rolesVO menus2rolesVO);
        }

        /************************************ Begin MAil_Config *************************/ Entity Mail_config {
            auditable
            ! optimisticLocking
            scaffold
            Long mail_config_id key hint = "AutoGenerated" databaseType = "NUMBER(19,0)";
            String mail_code length = "255";
            String name length = "16";
            String wording length = "32";
            String email_server length = "64";
            String port_number databaseType = "NUMBER(10,0)";
            String email_sender length = "64";
            String email_adress length = "64";
            String enable_smtps length = "1" nullable;
            String enable_connection length = "1" nullable;
            String login length = "64" nullable;
            String password length = "64" nullable;
            
            Repository Mail_configRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Mail_configVO {
			Long mail_config_id ;
			String mail_code ;
			String name ;
			String wording ;
			String email_server ;
			String port_number ;
			String email_sender ;
			String email_adress ;
			String enable_smtps;
			String enable_connection;
            String login;
            String password;
		}

        Service Mail_configService {
            > @Mail_configRepository
            String createMail_configService(@Mail_configVO mail_configVO)  hint="returnAttribute=mail_config_id";
            String updateMail_configService(@Mail_configVO mail_configVO);
            String deleteMail_configService(@Mail_configVO mail_configVO);
            List<@Mail_configVO> getAllMail_configService();
            List<@Mail_configVO> searchMail_configService(@Mail_configVO mail_configVO);
        }

        /*************************Begin Notification Trigger **************************/ Entity Notification_trigger {
            auditable
            ! optimisticLocking
            scaffold
            Long notification_trigger_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String name length = "16";
            String wording length = "32";
            String trigger_code length = "5";

            Repository Notification_triggerRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Notification_triggerVO {
			Long notification_trigger_id ;
			String name ;
			String wording ;
			String trigger_code ;
		}

        Service Notification_triggerService {
            > @Notification_triggerRepository
            List<@Notification_triggerVO> getAllNotification_triggerService();
            List<@Notification_triggerVO> searchNotification_triggerService(@Notification_triggerVO notification_triggerVO);
        }

        /*************************************** Begin Notification *******************************/ Entity Notification {
            auditable
            ! optimisticLocking
            scaffold
            Long notification_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String notification_code length = "5";
            String name length = "16";
            String wording length = "32";
            String notification_subject length = "64";
            String content length = "1024";
            String notification_type length = "1";
            - @Notification_trigger trigger_id hint = "BaseColumn1=notification_trigger_fk" fetch = "lazy";
            - @Mail_config mail_config_id hint = "BaseColumn1=mail_config_fk" nullable fetch = "lazy";

            Repository NotificationRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject NotificationVO {
			Long notification_id ;
			String notification_code ;
			String name ;
			String wording ;
			String notification_subject ;
			String content ;
			String notification_type ;
			Long notification_trigger_fk ;
			Long mail_config_fk ;
			Mail_configVO ref_mail hint = "reference=mail_config_id" ;
		}

        Service NotificationService {
            > @NotificationRepository
            > @Mail_configService
            String createNotificationService(@NotificationVO notificationVO);
            String updateNotificationService(@NotificationVO notificationVO);
            String deleteNotificationService(@NotificationVO notificationVO);
            List<@NotificationVO> getAllNotificationService();
            List<@NotificationVO> searchNotificationService(@NotificationVO notificationVO);
        }

        /************************************ Begin Notification Hist *******************/ Entity Notification_hist {
            auditable
            ! optimisticLocking
            scaffold
            Long notification_hist_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String notification_code length = "5";
            String name length = "16";
            String wording length = "32";
            String notification_subject length = "64";
            String content length = "1024";
            String trigger_name length = "32";
            String notification_type length = "1";

            Repository Notification_histRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Notification_histVO {
            Long notification_hist_id ; String notification_code ; String name ; String wording ; String notification_subject ; String content ;
            String trigger_name ; String notification_type ;
        }

        Service Notification_histService {
            > @Notification_histRepository
            String createNotification_histService(@Notification_histVO notification_histVO);
            String updateNotification_histService(@Notification_histVO notification_histVO);
            String deleteNotification_histService(@Notification_histVO notification_histVO);
            List<@Notification_histVO> getAllNotification_histService();
            List<@Notification_histVO> searchNotification_histService(@Notification_histVO notification_histVO);
        }

        /****************************** PWC_Columns ***********************************/ Entity Pwc_columns {
            auditable
            ! optimisticLocking
            scaffold
            Long pwc_columns_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String column_name length = "16";
            String wording length = "32";
            String column_type length = "16";
            String naturalKey length = "1";
            - @Pwc_tables table_id hint = "BaseColumn1=pwc_tables_fk" fetch = "lazy";

            Repository Pwc_columnsRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Pwc_columnsVO {
            Long pwc_columns_id ; String column_name ; String wording ; String column_type ; Long pwc_tables_fk ; String naturalKey ;
        }

        Service Pwc_columnsService {
            > @Pwc_columnsRepository
            List<@Pwc_columnsVO> getAllPwc_columnsService();
            List<@Pwc_columnsVO> searchPwc_columnsService(@Pwc_columnsVO pwc_columnsVO);
        }

        /************************************* Begin Password ***********************/ Entity Password {
            auditable
            ! optimisticLocking
            scaffold
			String password_complexity_id key length = "3";
            String type length = "1";		
			String password_description length = "32";
            String min_special databaseType = "NUMBER(4,0)";
            String min_length databaseType = "NUMBER(4,0)";
            String password_life databaseType = "NUMBER(4,0)";
            String password_grace databaseType = "NUMBER(4,0)";
            String bad_logins databaseType = "NUMBER(4,0)";
            String password_history databaseType = "NUMBER(4,0)";
            String max_length databaseType = "NUMBER(4,0)";
            String min_characters databaseType = "NUMBER(4,0)";
            String lock_time databaseType = "NUMBER(4,0)";
            String before_reuse databaseType = "NUMBER(4,0)";
            String reuse_time databaseType = "NUMBER(4,0)";
            String allowed_characters length = "40";
            String notification databaseType = "NUMBER(4,0)";
            String dictionary;	// stored in DB as a string that represents a JSON array of strings.
            String max_inactivity_days nullable;			

			
            Repository PasswordRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject PasswordVO {
            String type ; String password_complexity_id ; String password_description ; String min_special ; String min_length ; String password_life ;
			String password_grace ; String bad_logins ; String password_history ; String max_length ; String min_characters ; String lock_time ;
			String before_reuse ; String reuse_time ; String allowed_characters ; String notification ; String dictionary;  String max_inactivity_days;
        }

        Service PasswordService {
            > @PasswordRepository
            String createPasswordService(@PasswordVO passwordVO);
            String updatePasswordService(@PasswordVO passwordVO);
            String deletePasswordService(@PasswordVO passwordVO);
            List<@PasswordVO> getAllPasswordService();
            List<@PasswordVO> searchPasswordService(@PasswordVO passwordVO);
        }

        /************************  Begin ReasonReq ***********************/ Entity Reason_request {
            auditable
            ! optimisticLocking
            scaffold
            Long reason_request_id key hint = "AutoGenerated" databaseType = "NUMBER(19,0)";
            String resaon_code length = "5";
            String wording length = "64";
            String name length = "16";

            Repository Reason_requestRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Reason_requestVO {
            Long reason_request_id ; String resaon_code ; String wording ; String name ;
        }

        Service Reason_requestService {
            > @Reason_requestRepository
            List<@Reason_requestVO> getAllReason_requestService();
            List<@Reason_requestVO> searchReason_requestService(@Reason_requestVO reason_requestVO);
        }

        /******************************** Begin Users Request ************************************/ 
		Entity User_requests {
            auditable
            ! optimisticLocking
            scaffold
            Long user_requests_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String requester_code length = "16" nullable;
            Date request_date nullable;
            String access_resriction length = "1" nullable;
            String user_code length = "16" nullable;
            String browser_disconnection length = "1" nullable;
            Long user_id databaseType = "NUMBER(10,0)" nullable;
            Date account_end_date nullable;
            Date privilege_end_date nullable;
            String mail length = "128" databaseColumn = "EMAIL" databaseType = "VARCHAR2" nullable;
            String activ_email length = "1" nullable;
            String job_title length = "32" nullable;
            String status length = "1" nullable;
            String staff_indicateur length = "1" nullable;
            Date privilege_start_date nullable;
            String dis_notification_type length = "1" nullable;
            String access_by length = "1" nullable;
            Date account_start_date nullable;
            Date account_expiry_date nullable;
            String user_name length = "32" nullable;
            Long employe_number databaseType = "NUMBER(32,0)" nullable;
            String timer_browser_disconnection databaseType = "NUMBER(5,0)" nullable;
            String pwc_disconnection length = "1" nullable;
            String timer_pwc_disconnection databaseType = "NUMBER(5,0)" nullable;
            String phone_number length = "32" nullable;
            String user_country_id databaseColumn="user_country_id" databaseType = "CHAR(3)" nullable;
            String collection_process_privilege databaseColumn = "collection_process_privilege" length = "1" nullable;
            String collection_dispatch_privilege databaseColumn = "collection_dispatch_privilege" length = "1" nullable;
            String user_collection_list databaseColumn = "user_collection_list" length = "3" nullable;
            String dba_privilege databaseColumn = "dba_privilege" length = "1" nullable;
            Date start_date databaseColumn = "start_date" nullable;
            Date end_date databaseColumn = "end_date" nullable;
            Date last_db_connect databaseColumn = "last_db_connect" nullable;
            String bank_card_batch databaseColumn = "bank_card_batch" length = "6" nullable;
            String current_card_batch databaseColumn = "current_card_batch" nullable;
            Date date_cur_card_batch databaseColumn = "date_cur_card_batch" nullable;
            String ip_address_access databaseColumn = "ip_address_access" length = "64" nullable;
            String bank_code_access_list databaseColumn = "bank_code_access_list" length = "140" nullable;
            String increase_limits_currency databaseColumn = "increase_limits_currency" nullable;
            BigDecimal increase_credit_limit_perc databaseColumn = "increase_credit_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_credit_limit_max databaseColumn = "increase_credit_limit_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal increase_cash_limit_perc databaseColumn = "increase_cash_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_cash_limit_max databaseColumn = "increase_cash_limit_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal increase_loan_limit_perc databaseColumn = "increase_loan_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_loan_limit_max databaseColumn = "increase_loan_limit_max" databaseType = "NUMBER(18,3)" nullable;
            String balances_hidden_flag databaseColumn = "balances_hidden_flag" length = "1" nullable;
            String screen_show_name databaseColumn = "screen_show_name" length = "1" nullable;
            String screen_show_db databaseColumn = "screen_show_db" length = "1" nullable;
            String screen_show_db_connect databaseColumn = "screen_show_db_connect" length = "1" nullable;
            String check_sum databaseColumn = "check_sum" length = "116" nullable;
            String forms_message_level databaseColumn = "forms_message_level" length = "2" nullable;
            String claims_grouping_index databaseColumn = "claims_grouping_index" nullable;
            String user_terminal_group databaseColumn = "user_terminal_group" length = "15" nullable;
            String user_branch_id databaseColumn = "user_branch_id" nullable;
            String user_departement_id databaseColumn = "user_departement_id" nullable;
            String user_branch_group_id databaseColumn = "user_branch_group_id" nullable;
            Long user_boss_id databaseColumn = "user_boss_id" nullable;
            Long user_data_access_id databaseColumn = "user_data_access_id" nullable;
            String user_profile_id databaseColumn = "user_profile_id" nullable;
            String user_sub_departement_id databaseColumn = "user_sub_departement_id" nullable;
            String user_language_id databaseColumn = "user_language_id" nullable;
            Long reason_request_fk databaseColumn = "reason_request_fk" nullable;
            String user_institution_id databaseColumn = "user_institution_id" nullable;

            Repository User_requestsRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject User_requestsVO {
            Long user_requests_id ; String requester_code ; Date request_date ; String access_resriction ; String user_code ; String
            browser_disconnection ; Long user_id ; Date account_end_date ; Date privilege_end_date ; String mail ; String activ_email ; String
            job_title ; String status ; String staff_indicateur ; Date privilege_start_date ; String dis_notification_type ; String access_by ; Date
            account_start_date ; Date account_expiry_date ; String user_name ; Long employe_number ; String timer_browser_disconnection ; String
            pwc_disconnection ; String timer_pwc_disconnection ; String phone_number ; String user_country_id ; String user_branch_id ; String
            user_departement_id ; Long user_data_access_id ; String user_institution_id ; String user_profile_id ; String user_sub_departement_id ;
            Long user_boss_id ; String user_branch_group_id ; String user_language_id ; Long reason_request_fk ; String
            collection_process_privilege ; String collection_dispatch_privilege ; String user_collection_list ; String dba_privilege ; Date
            start_date ; Date end_date ; Date last_db_connect ; String bank_card_batch ; String current_card_batch ; Date date_cur_card_batch ;
            String ip_address_access ; String bank_code_access_list ; String increase_limits_currency ; BigDecimal increase_credit_limit_perc ;
            BigDecimal increase_credit_limit_max ; BigDecimal increase_cash_limit_perc ; BigDecimal increase_cash_limit_max ; BigDecimal
            increase_loan_limit_perc ; BigDecimal increase_loan_limit_max ; String balances_hidden_flag ; String screen_show_name ; String
            screen_show_db ; String screen_show_db_connect ; String check_sum ; String forms_message_level ; String claims_grouping_index ; String
            user_terminal_group ;
        }

        Service User_requestsService {
            hint =
            "ref1=Language_listService,ref2=BankService,ref3=Branch_groupsService,ref4=Data_accessService,ref5=DepartmentService,ref6=ProfileService,ref7=UsersService,ref8=BranchService"
            > @User_requestsRepository
            > @BranchService
            > @BankService
            > @Branch_groupsService
            > @DepartmentService
            > @Language_listService
            > @UsersService
            > @ProfileService
            > @Data_accessService
            String createUser_requestsService(@User_requestsVO user_requestsVO);
            String updateUser_requestsService(@User_requestsVO user_requestsVO);
            String deleteUser_requestsService(@User_requestsVO user_requestsVO);
            List<@User_requestsVO> getAllUser_requestsService();
            List<@User_requestsVO> searchUser_requestsService(@User_requestsVO user_requestsVO);
        }


        Entity User_requests_hist
        {
        databaseTable="User_requests_hist"
            auditable
            !optimisticLocking
             scaffold
            Long user_requests_id key databaseType = "NUMBER(10,0)";
            String requester_code length = "16" nullable;
            Date request_date nullable;
            String access_resriction length = "1" nullable;
            String user_code length = "16" nullable;
            String browser_disconnection length = "1" nullable;
            Long user_id databaseType = "NUMBER(10,0)" nullable;
            Date account_end_date nullable;
            Date privilege_end_date nullable;
            String mail length = "128" databaseColumn = "EMAIL" databaseType = "VARCHAR2" nullable;
            String activ_email length = "1" nullable;
            String job_title length = "32" nullable;
            String status length = "1" nullable;
            String staff_indicateur length = "1" nullable;
            Date privilege_start_date nullable;
            String dis_notification_type length = "1" nullable;
            String access_by length = "1" nullable;
            Date account_start_date nullable;
            Date account_expiry_date nullable;
            String user_name length = "32" nullable;
            Long employe_number databaseType = "NUMBER(32,0)" nullable;
            String timer_browser_disconnection databaseType = "NUMBER(5,0)" nullable;
            String pwc_disconnection length = "1" nullable;
            String timer_pwc_disconnection databaseType = "NUMBER(5,0)" nullable;
            String phone_number length = "32" nullable;
            String user_country_id databaseColumn="user_country_id" databaseType = "CHAR(3)" nullable;
            String collection_process_privilege databaseColumn = "collection_process_privilege" length = "1" nullable;
            String collection_dispatch_privilege databaseColumn = "collection_dispatch_privilege" length = "1" nullable;
            String user_collection_list databaseColumn = "user_collection_list" length = "3" nullable;
            String dba_privilege databaseColumn = "dba_privilege" length = "1" nullable;
            Date start_date databaseColumn = "start_date" nullable;
            Date end_date databaseColumn = "end_date" nullable;
            Date last_db_connect databaseColumn = "last_db_connect" nullable;
            String bank_card_batch databaseColumn = "bank_card_batch" length = "6" nullable;
            String current_card_batch databaseColumn = "current_card_batch" nullable;
            Date date_cur_card_batch databaseColumn = "date_cur_card_batch" nullable;
            String ip_address_access databaseColumn = "ip_address_access" length = "64" nullable;
            String bank_code_access_list databaseColumn = "bank_code_access_list" length = "140" nullable;
            String increase_limits_currency databaseColumn = "increase_limits_currency" nullable;
            BigDecimal increase_credit_limit_perc databaseColumn = "increase_credit_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_credit_limit_max databaseColumn = "increase_credit_limit_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal increase_cash_limit_perc databaseColumn = "increase_cash_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_cash_limit_max databaseColumn = "increase_cash_limit_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal increase_loan_limit_perc databaseColumn = "increase_loan_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_loan_limit_max databaseColumn = "increase_loan_limit_max" databaseType = "NUMBER(18,3)" nullable;
            String balances_hidden_flag databaseColumn = "balances_hidden_flag" length = "1" nullable;
            String screen_show_name databaseColumn = "screen_show_name" length = "1" nullable;
            String screen_show_db databaseColumn = "screen_show_db" length = "1" nullable;
            String screen_show_db_connect databaseColumn = "screen_show_db_connect" length = "1" nullable;
            String check_sum databaseColumn = "check_sum" length = "116" nullable;
            String forms_message_level databaseColumn = "forms_message_level" length = "2" nullable;
            String claims_grouping_index databaseColumn = "claims_grouping_index" nullable;
            String user_terminal_group databaseColumn = "user_terminal_group" length = "15" nullable;
            String user_branch_id databaseColumn = "user_branch_id" nullable;
            String user_departement_id databaseColumn = "user_departement_id" nullable;
            String user_branch_group_id databaseColumn = "user_branch_group_id" nullable;
            Long user_boss_id databaseColumn = "user_boss_id" nullable;
            Long user_data_access_id databaseColumn = "user_data_access_id" nullable;
            String user_profile_id databaseColumn = "user_profile_id" nullable;
            String user_sub_departement_id databaseColumn = "user_sub_departement_id" nullable;
            String user_language_id databaseColumn = "user_language_id" nullable;
            Long reason_request_fk databaseColumn = "reason_request_fk" nullable;
            String user_institution_id databaseColumn = "user_institution_id" nullable;
            String request_status databaseColumn="request_status" databaseType="CHAR(1)" nullable;
        Repository User_requests_histRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
        } 
        DataTransferObject User_requests_histVO { 
            Long user_requests_id ; String requester_code ; Date request_date ; String access_resriction ; String user_code ; String
            browser_disconnection ; Long user_id ; Date account_end_date ; Date privilege_end_date ; String mail ; String activ_email ; String
            job_title ; String status ; String staff_indicateur ; Date privilege_start_date ; String dis_notification_type ; String access_by ; Date
            account_start_date ; Date account_expiry_date ; String user_name ; Long employe_number ; String timer_browser_disconnection ; String
            pwc_disconnection ; String timer_pwc_disconnection ; String phone_number ; String user_country_id ; String user_branch_id ; String
            user_departement_id ; Long user_data_access_id ; String user_institution_id ; String user_profile_id ; String user_sub_departement_id ;
            Long user_boss_id ; String user_branch_group_id ; String user_language_id ; Long reason_request_fk ; String
            collection_process_privilege ; String collection_dispatch_privilege ; String user_collection_list ; String dba_privilege ; Date
            start_date ; Date end_date ; Date last_db_connect ; String bank_card_batch ; String current_card_batch ; Date date_cur_card_batch ;
            String ip_address_access ; String bank_code_access_list ; String increase_limits_currency ; BigDecimal increase_credit_limit_perc ;
            BigDecimal increase_credit_limit_max ; BigDecimal increase_cash_limit_perc ; BigDecimal increase_cash_limit_max ; BigDecimal
            increase_loan_limit_perc ; BigDecimal increase_loan_limit_max ; String balances_hidden_flag ; String screen_show_name ; String
            screen_show_db ; String screen_show_db_connect ; String check_sum ; String forms_message_level ; String claims_grouping_index ; String
            user_terminal_group ; String  request_status;
        }
        Service User_requests_histService{ 
            > @User_requests_histRepository
            String createUser_requests_histService(@User_requests_histVO user_requests_histVO);
            String updateUser_requests_histService(@User_requests_histVO user_requests_histVO);
            String deleteUser_requests_histService(@User_requests_histVO user_requests_histVO);
            List<@User_requests_histVO> getAllUser_requests_histService();
            List<@User_requests_histVO> searchUser_requests_histService(@User_requests_histVO user_requests_histVO);
            }


        Service UserRequestsAdminstrationService {
            hint = "ref1=Reason_requestService,ref2=BankService,ref3=BranchService"
            > @User_requestsService
            > @User_requests_histService
            > @UsersService
            > @NotificationService
            > @EncryptionService
            > @User_passwordsService
			> @Ressource_bundleService
            String validateRequest(@User_requestsVO user_requestsVO);
            String rejectRequest(@User_requestsVO user_requestsVO);
        }

        DataTransferObject UserRequestsAdminstrationVO {
        }

        /************************ Begin Columns_Value ****************************/ Entity Column_values {
            auditable
            ! optimisticLocking
            scaffold
            Long column_values_id key hint = "AutoGenerated" databaseType = "NUMBER(19,0)";
            String val length = "255";
            String filter_val_id databaseType = "NUMBER(10,0)" nullable;
            - @Columns_filter column_id hint = "BaseColumn1=columns_filter_fk" nullable fetch = "lazy";

            Repository Column_valuesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Column_valuesVO {
            Long column_values_id ; String val ; String filter_val_id ; Long columns_filter_fk ;
        }

        Service Column_valuesService {
            > @Column_valuesRepository
            String createColumn_valuesService(@Column_valuesVO column_valuesVO);
            String updateColumn_valuesService(@Column_valuesVO column_valuesVO);
            String deleteColumn_valuesService(@Column_valuesVO column_valuesVO);
            List<@Column_valuesVO> getAllColumn_valuesService();
            List<@Column_valuesVO> searchColumn_valuesService(@Column_valuesVO column_valuesVO);
        }
       /********************************* Begin Users **************************/ Entity Users {
            auditable
            ! optimisticLocking
            scaffold
            cache Long users_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String user_name length = "32" nullable;
            String user_code length = "15";
            String status length = "1" nullable;
            String staff_indicateur length = "1" nullable;
            String job_title length = "32" nullable;
            String mail length = "128" databaseColumn = "EMAIL" nullable;
            String activ_email length = "1" nullable;
            Long employe_number databaseType = "NUMBER(32,0)" nullable;
            String access_by length = "1" nullable;
            Date account_expiry_date nullable;
            Date account_start_date nullable;
            Date account_end_date nullable;
            Date privilege_start_date nullable;
            Date privilege_end_date nullable;
            Date privilege_last_connexion_date databaseColumn = "privilege_last_connexion_date" nullable;
            String access_resriction length = "1" nullable;
            String dis_notification_type length = "1" nullable;
            String browser_disconnection length = "1" nullable;
            String timer_browser_disconnection databaseColumn = "timer_browser_disconnection" databaseType = "NUMBER(5,0)" nullable;
            String pwc_disconnection length = "1" nullable;
            String timer_pwc_disconnection databaseColumn = "timer_pwc_disconnection" databaseType = "NUMBER(5,0)" nullable;
            String phone_number length = "32" nullable;
            String password length = "128" nullable;
            String connection_status databaseColumn = "connection_status" length = "1" nullable;
            String collection_process_privilege databaseColumn = "collection_process_privilege" length = "1" nullable;
            String collection_dispatch_privilege databaseColumn = "collection_dispatch_privilege" length = "1" nullable;
            - @Profile fk_profile hint = "BaseColumn1=profile_fk" nullable fetch = "lazy";
            - @Country fk_country hint = "BaseColumn1=country_fk" nullable fetch = "lazy";
            String branch_fk databaseColumn = "branch_fk" nullable;
            String branch_group_fk databaseColumn = "branch_group_fk" nullable;
            String departement_fk databaseColumn = "departement_fk" nullable;
             -@ Bank fk_users_04 hint="BaseColumn1=institution_fk" nullable;
            - @Data_access fk_data_access hint = "BaseColumn1= data_access_fk" nullable fetch = "lazy";
            - @Language_list fk_language hint = "BaseColumn1=language_fk" nullable fetch = "lazy";
            Long boss_fk nullable;
            String sub_departement_fk nullable;
            String user_collection_list databaseColumn = "user_collection_list" length = "3" nullable;
            String dba_privilege databaseColumn = "dba_privilege" length = "1" nullable;
            Date start_date databaseColumn = "start_date" nullable;
            Date end_date databaseColumn = "end_date" nullable;
            Date last_db_connect databaseColumn = "last_db_connect" nullable;
            String bank_card_batch databaseColumn = "bank_card_batch" length = "6" nullable;
            String current_card_batch databaseColumn = "current_card_batch" nullable;
            Date date_cur_card_batch databaseColumn = "date_cur_card_batch" nullable;
            String ip_address_access databaseColumn = "ip_address_access" length = "64" nullable;
            String bank_code_access_list databaseColumn = "bank_code_access_list" length = "140" nullable;
            String increase_limits_currency databaseColumn = "increase_limits_currency" nullable;
            BigDecimal increase_credit_limit_perc databaseColumn = "increase_credit_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_credit_limit_max databaseColumn = "increase_credit_limit_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal increase_cash_limit_perc databaseColumn = "increase_cash_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_cash_limit_max databaseColumn = "increase_cash_limit_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal increase_loan_limit_perc databaseColumn = "increase_loan_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_loan_limit_max databaseColumn = "increase_loan_limit_max" databaseType = "NUMBER(18,3)" nullable;
            String balances_hidden_flag databaseColumn = "balances_hidden_flag" length = "1" nullable;
            String screen_show_name databaseColumn = "screen_show_name" length = "1" nullable;
            String screen_show_db databaseColumn = "screen_show_db" length = "1" nullable;
            String screen_show_db_connect databaseColumn = "screen_show_db_connect" length = "1" nullable;
            String check_sum databaseColumn = "check_sum" length = "116" nullable;
            String forms_message_level databaseColumn = "forms_message_level" length = "2" nullable;
            String claims_grouping_index databaseColumn = "claims_grouping_index" nullable;
            String user_terminal_group databaseColumn = "user_terminal_group" length = "15" nullable;
            Timestamp date_blocking databaseColumn = "date_blocking" nullable;
            String user_unblocking databaseColumn = "user_unblocking" length = "16" nullable;
            Timestamp date_unblocking databaseColumn = "date_unblocking" nullable;
			String is_blocked databaseColumn = "is_blocked" length = "1" nullable;
			String is_ldap_user databaseColumn = "is_ldap_user" length = "1" nullable;
			String ldap_pattern databaseColumn = "ldap_pattern" length = "200" nullable;
            
			Repository UsersRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

DataTransferObject UsersVO {
            Long users_id ; String user_name ; String user_code ; String status ; String staff_indicateur ; String job_title ; String mail ; String
            activ_email ; Long employe_number ; String access_by ; Date account_expiry_date Date account_start_date ; Date account_end_date ; Date
            privilege_start_date ; Date privilege_end_date ; Date privilege_last_connexion_date ; String access_resriction ; String
            dis_notification_type ; String browser_disconnection ; String timer_browser_disconnection ; String pwc_disconnection ; String
            timer_pwc_disconnection ; String phone_number ; String password ; 
            String profile_fk ; String country_fk ; String branch_fk ; String
            institution_fk ; String branch_group_fk ; Long boss_fk ; String departement_fk ; Long data_access_fk ; String sub_departement_fk ; String
            language_fk ; String connection_status ; String user_collection_list ; String collection_process_privilege ; String
            collection_dispatch_privilege ; String dba_privilege ; Date start_date ; Date end_date ; Date last_db_connect ; String bank_card_batch ;
            String current_card_batch ; Date date_cur_card_batch ; String ip_address_access ; String bank_code_access_list ; String
            increase_limits_currency ; BigDecimal increase_credit_limit_perc ; BigDecimal increase_credit_limit_max ; BigDecimal
            increase_cash_limit_perc ; BigDecimal increase_cash_limit_max ; BigDecimal increase_loan_limit_perc ; BigDecimal
            increase_loan_limit_max ; String balances_hidden_flag ; String screen_show_name ; String screen_show_db ; String
            screen_show_db_connect ; String check_sum ; String forms_message_level ; String claims_grouping_index ; String user_terminal_group ;
            Timestamp date_blocking ; String user_unblocking ; Timestamp date_unblocking ; String is_blocked ;String is_ldap_user;String ldap_pattern;
			ProfileVO ref_profile hint = "reference=fk_profile" ;  
			String skip_data_access hint ="issearch,skip";
			String hash_user_id hint ="issearch,skip";
        }

        Service UsersService {           
            > @UsersRepository
            > @ProfileService
            String createUsersService(@UsersVO usersVO);
            String updateUsersService(@UsersVO usersVO);
            String deleteUsersService(@UsersVO usersVO);
            List<@UsersVO> getAllUsersService();
            List<@UsersVO> searchUsersService(@UsersVO usersVO);
             //Users Actions
            String initPasswordService(@UsersVO usersVO);
            String closeAccountService(@UsersVO usersVO);
            String reopenAccountService(@UsersVO usersVO);
            String blockUsersService(@UsersVO usersVO);
            String unblockUsersService(@UsersVO usersVO);
        }

        /********************************* Begin Users_DF **************************/ Entity Users_df {
            auditable
            ! optimisticLocking
            scaffold
            String rowid key;
            Long users_id databaseType = "NUMBER(10)";
            String user_name length = "32" nullable;
            String user_code length = "16";
            String status length = "1" nullable;
            String staff_indicateur length = "1" nullable;
            String job_title length = "32" nullable;
            String mail length = "128" databaseColumn = "EMAIL" nullable;
            String activ_email length = "1" nullable;
            Long employe_number databaseType = "NUMBER(32,0)" nullable;
            String access_by length = "1" nullable;
            Date account_expiry_date nullable;
            Date account_start_date nullable;
            Date account_end_date nullable;
            Date privilege_start_date nullable;
            Date privilege_end_date nullable;
            Date privilege_last_connexion_date databaseColumn = "privilege_last_connexion_date" nullable;
            String access_resriction length = "1" nullable;
            String dis_notification_type length = "1" nullable;
            String browser_disconnection length = "1" nullable;
            String timer_browser_disconnection databaseColumn = "timer_browser_disconnection" databaseType = "NUMBER(5,0)" nullable;
            String pwc_disconnection length = "1" nullable;
            String timer_pwc_disconnection databaseColumn = "timer_pwc_disconnection" databaseType = "NUMBER(5,0)" nullable;
            String phone_number length = "32" nullable;
            String password length = "128";
            String connection_status databaseColumn = "connection_status" length = "1" nullable;
            String collection_process_privilege databaseColumn = "collection_process_privilege" length = "1" nullable;
            String collection_dispatch_privilege databaseColumn = "collection_dispatch_privilege" length = "1" nullable;
            - @Profile fk_profile hint = "BaseColumn1=profile_fk" nullable fetch = "lazy";
            - @Country fk_country hint = "BaseColumn1=country_fk" nullable fetch = "lazy";
            String branch_fk databaseColumn = "branch_fk" nullable;
            String branch_group_fk databaseColumn = "branch_group_fk" nullable;
            String departement_fk databaseColumn = "departement_fk" nullable;
             -@ Bank fk_users_04 hint="BaseColumn1=institution_fk" nullable;
            - @Data_access fk_data_access hint = "BaseColumn1= data_access_fk" nullable fetch = "lazy";
            - @Language_list fk_language hint = "BaseColumn1=language_fk" nullable fetch = "lazy";
            Long boss_fk nullable;
            String sub_departement_fk nullable;
            String user_collection_list databaseColumn = "user_collection_list" length = "3" nullable;
            String dba_privilege databaseColumn = "dba_privilege" length = "1" nullable;
            Date start_date databaseColumn = "start_date" nullable;
            Date end_date databaseColumn = "end_date" nullable;
            Date last_db_connect databaseColumn = "last_db_connect" nullable;
            String bank_card_batch databaseColumn = "bank_card_batch" length = "6" nullable;
            String current_card_batch databaseColumn = "current_card_batch" nullable;
            Date date_cur_card_batch databaseColumn = "date_cur_card_batch" nullable;
            String ip_address_access databaseColumn = "ip_address_access" length = "64" nullable;
            String bank_code_access_list databaseColumn = "bank_code_access_list" length = "140" nullable;
            String increase_limits_currency databaseColumn = "increase_limits_currency" nullable;
            BigDecimal increase_credit_limit_perc databaseColumn = "increase_credit_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_credit_limit_max databaseColumn = "increase_credit_limit_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal increase_cash_limit_perc databaseColumn = "increase_cash_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_cash_limit_max databaseColumn = "increase_cash_limit_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal increase_loan_limit_perc databaseColumn = "increase_loan_limit_perc" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal increase_loan_limit_max databaseColumn = "increase_loan_limit_max" databaseType = "NUMBER(18,3)" nullable;
            String balances_hidden_flag databaseColumn = "balances_hidden_flag" length = "1" nullable;
            String screen_show_name databaseColumn = "screen_show_name" length = "1" nullable;
            String screen_show_db databaseColumn = "screen_show_db" length = "1" nullable;
            String screen_show_db_connect databaseColumn = "screen_show_db_connect" length = "1" nullable;
            String check_sum databaseColumn = "check_sum" length = "116" nullable;
            String forms_message_level databaseColumn = "forms_message_level" length = "2" nullable;
            String claims_grouping_index databaseColumn = "claims_grouping_index" nullable;
            String user_terminal_group databaseColumn = "user_terminal_group" length = "15" nullable;
            Timestamp date_blocking databaseColumn = "date_blocking" nullable;
            String user_unblocking databaseColumn = "user_unblocking" length = "16" nullable;
            Timestamp date_unblocking databaseColumn = "date_unblocking" nullable;
			String is_blocked databaseColumn = "is_blocked" length = "1" nullable;
           
            String sensitive_operation_record databaseColumn = "sensitive_operation_record" length = "1" nullable;
            
            String user_create databaseColumn = "user_create" length = "15" nullable;
            Date date_create databaseColumn = "date_create" nullable;
            String user_modif databaseColumn = "user_modif" length = "15" nullable;
            Date date_modif databaseColumn = "date_modif" nullable;
            
			Repository Users_dfRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Users_dfVO {
			String rowid;
            Long users_id ; String user_name ; String user_code ; String status ; String staff_indicateur ; String job_title ; String mail ; String
            activ_email ; Long employe_number ; String access_by ; Date account_expiry_date Date account_start_date ; Date account_end_date ; Date
            privilege_start_date ; Date privilege_end_date ; Date privilege_last_connexion_date ; String access_resriction ; String
            dis_notification_type ; String browser_disconnection ; String timer_browser_disconnection ; String pwc_disconnection ; String
            timer_pwc_disconnection ; String phone_number ; String password ; 
            String profile_fk ; String country_fk ; String branch_fk ; String
            institution_fk ; String branch_group_fk ; Long boss_fk ; String departement_fk ; Long data_access_fk ; String sub_departement_fk ; String
            language_fk ; String connection_status ; String user_collection_list ; String collection_process_privilege ; String
            collection_dispatch_privilege ; String dba_privilege ; Date start_date ; Date end_date ; Date last_db_connect ; String bank_card_batch ;
            String current_card_batch ; Date date_cur_card_batch ; String ip_address_access ; String bank_code_access_list ; String
            increase_limits_currency ; BigDecimal increase_credit_limit_perc ; BigDecimal increase_credit_limit_max ; BigDecimal
            increase_cash_limit_perc ; BigDecimal increase_cash_limit_max ; BigDecimal increase_loan_limit_perc ; BigDecimal
            increase_loan_limit_max ; String balances_hidden_flag ; String screen_show_name ; String screen_show_db ; String
            screen_show_db_connect ; String check_sum ; String forms_message_level ; String claims_grouping_index ; String user_terminal_group ;
            Timestamp date_blocking ; String user_unblocking ; Timestamp date_unblocking ; String is_blocked ;
			ProfileVO ref_profile hint = "reference=fk_profile" ;  
			String sensitive_operation_record;
			String user_create; String user_modif;
			Timestamp date_create; Timestamp date_modif;
        }

        Service Users_dfService {
            > @Users_dfRepository
            > @ProfileService
            /*String createUsersService(@Users_dfVO users_dfVO);
            String updateUsersService(@Users_dfVO users_dfVO);
            String deleteUsersService(@Users_dfVO users_dfVO);*/
            List<@Users_dfVO> getAllUsers_dfService();
            List<@Users_dfVO> searchUsers_dfService(@Users_dfVO users_dfVO);
        }



        /**************************************** User Password ************************************/ Entity User_passwords {
            ! auditable
            ! optimisticLocking
            scaffold
            Long user_passwords_id databaseColumn = "user_passwords_id" key hint = "AutoGenerated" databaseType = "NUMBER(19,0)";
            String password length = "128" nullable;
            Timestamp date_change nullable;
            String login length = "16";
            String invalide_authentif_num databaseColumn = "invalide_authentif_num" databaseType = "NUMBER(1,0)" nullable;
            - @Users user_id hint = "BaseColumn1=users_fk" fetch = "lazy";

            Repository User_passwordsRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject User_passwordsVO {
            Long user_passwords_id ; String password ; Timestamp date_change hint="order1=Desc"; String login ; String invalide_authentif_num ; Long users_fk ;
        }

        Service User_passwordsService {
            > @User_passwordsRepository
            > @PasswordService
            > @UsersService
            > @EncryptionService
			> @ProfileService
            String createUser_passwordsService(@User_passwordsVO user_passwordsVO);
            String updateUser_passwordsService(@User_passwordsVO user_passwordsVO);
            String deleteUser_passwordsService(@User_passwordsVO user_passwordsVO);
            List<@User_passwordsVO> getAllUser_passwordsService();
            List<@User_passwordsVO> searchUser_passwordsService(@User_passwordsVO user_passwordsVO);
            String changePassword(String login, String oldpassword, String newPassword);
            String verifyPassword(String password);
            String changeForgottenPassword(String login, String newPassword);
        }

        Service LoginService {
            hint = "notMakerchecker,notSecured,ref1=screenService"
            > @UsersService
            > @ProfileService
            > @MenuService
            > @User_passwordsService
            > @PasswordService
            > @Data_columns_filterService
            > @EncryptionService
            > @UsersRepository
            > @ProfileRepository
            > @MenuRepository
            > @User_passwordsRepository
            > @PasswordRepository
            > @Data_columns_filterRepository
            > @Grant_permissionRepository
            > @Component_validatorService
            > @Ressource_bundleService
            > @Grant_permissionService
            > @ComponentService
            > @Component_formaterService
            > @Pcard_user_blockedService
            > @Pcard_authentification_histRepository
            > @BankRepository
             
            @LoginVO loginService(@LoginVO loginVO);
            @LoginVO loginOAuth2Service(@LoginVO loginVO);
            String loginOut(String login);
            Map<String, Object> retrieveScreenInfos(@ScreenInfosVO screenInfosVO);
        }

        DataTransferObject ScreenInfosVO {
            String screen_code ; String bundle ; String lang ; Long roleId ; Collection < String > inBundle ;
        }

        Service AuthentificationService {
            hint = "notSecured"
            > authenticationManager 
            > @PasswordRepository
            
            @LoginVO authentificationService(@LoginVO loginVO);
            @LoginVO ldapAuthentificationService(@LoginVO loginVO);
            @LoginVO ldapMailAuthentificationService(@LoginVO loginVO, String silo);
           
        }

		Service EncryptionService {
			String encryptPassword(String password, String salt);
		}
				
		DataTransferObject LoginVO {
			Long users_id ;
			String user_name ;
			String user_code ;
			String status ;
			String staff_indicateur ;
			String job_title ;
			String mail ;
			String activ_email ;
			Long employe_number ;
			String access_by ;
			Date account_expiry_date Date account_start_date ;
			Date account_end_date ;
			Date privilege_start_date ;
			Date privilege_end_date ;
			Date privilege_last_connexion_date ;
			String access_resriction ;
			String dis_notification_type ;
			String browser_disconnection ;
			String timer_browser_disconnection ;
			String pwc_disconnection ;
			String timer_pwc_disconnection ;
			String phone_number ;
			String password ;
			String country_fk ;
			String branch_fk ;
			String institution_fk ;
			String branch_group_fk ;
			Long boss_fk ;
			String departement_fk ;
			Long data_access_fk ;
			String sub_departement_fk ;
			String language_fk ;
			String connection_status ;
			String user_collection_list ;
			String collection_process_privilege ;
			String collection_dispatch_privilege ;
			String dba_privilege ;
			Date start_date ;
			Date end_date ;
			Date last_db_connect ;
			String bank_card_batch ;
			String current_card_batch ;
			Date date_cur_card_batch ;
			String ip_address_access ;
			String bank_code_access_list ;
			String increase_limits_currency ;
			BigDecimal increase_credit_limit_perc ;
			BigDecimal increase_credit_limit_max ;
			BigDecimal increase_cash_limit_perc ;
			BigDecimal increase_cash_limit_max ;
			BigDecimal increase_loan_limit_perc ;
			BigDecimal increase_loan_limit_max ;
			String balances_hidden_flag ;
			String screen_show_name ;
			String screen_show_db ;
			String screen_show_db_connect ;
			String check_sum ;
			String forms_message_level ;
			String claims_grouping_index ;
			String user_terminal_group ;
			String profile_fk;
			String bankDataAccess;
			String vb_banks;
			Collection < ProfileVO > profile ;
			Collection < MenuVO > menusGranted ;
			Collection < Grant_permissionVO > grants ;
			Collection < Data_columns_filterVO > dataColumnsFilter ;
			org.springframework.security.core.Authentication authentication ;
			Collection < RoleVO > role_col ;
			Long haveOperationToCheck ;
			PasswordVO passConfigs;
			String profile_code;
			Timestamp  loginDate;
			String remoteURL;
			Date password_expiration_date;
			Boolean isProfileAdmin;
        }

        /**************************************** Link ************************************/ Entity Link {
            auditable
            ! optimisticLocking
            scaffold
            Long link_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String link_type databaseColumn = "link_type" length = "1" nullable;
            - @Pwc_tables link_direct_pk hint = "BaseColumn1=table_direct" nullable fetch = "lazy";
            - @Pwc_tables link_indirect_fk hint = "BaseColumn1=table_indirect" nullable fetch = "lazy";
            - @Pwc_tables link_filter_fk hint = "BaseColumn1=table_filter" nullable fetch = "lazy";

            Repository LinkRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject LinkVO {
            Long link_id ; String link_type ; Long table_direct ; Long table_indirect ; Long table_filter ; Collection < Link_conditionVO >
            link_condition_col hint = "issearch" ;
        }

        Service LinkService {
            > @LinkRepository
            String createLinkService(@LinkVO linkVO);
            String updateLinkService(@LinkVO linkVO);
            String deleteLinkService(@LinkVO linkVO);
            List<@LinkVO> getAllLinkService();
            List<@LinkVO> searchLinkService(@LinkVO linkVO);
        }

        /**************************************** Link_condition ************************************/ Entity Link_condition {
            auditable
            ! optimisticLocking
            scaffold
            Long link_condition_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            - @Link fk_link hint = "BaseColumn1=link_id" nullable fetch = "lazy";
            String type nullable;
            String node_mode nullable;
            String column_table_1 nullable;
            String column_table_2 nullable;
            String operation nullable;
            - @Link_condition fk_link_condition hint = "BaseColumn1=link_condition_parent" nullable fetch = "lazy"

            Repository Link_conditionRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Link_conditionVO {
            Long link_condition_id ; Long link_id ; String type ; String node_mode ; String column_table_1 ; String column_table_2 ; String operation ;
            Long link_condition_parent ;
        }

        Service Link_conditionService {
            > @Link_conditionRepository
            String createLink_conditionService(@Link_conditionVO link_conditionVO);
            String updateLink_conditionService(@Link_conditionVO link_conditionVO);
            String deleteLink_conditionService(@Link_conditionVO link_conditionVO);
            List<@Link_conditionVO> getAllLink_conditionService();
            List<@Link_conditionVO> searchLink_conditionService(@Link_conditionVO link_conditionVO);
        }

        Entity Menu_param {
            auditable
            ! optimisticLocking
            scaffold
            cache Long menu_param_id key hint = "AutoGenerated" databaseColumn = "menu_param_id" databaseType = "NUMBER(10,0)";
            String nom_param databaseColumn = "nom_param" length = "32" nullable;
            String val_param databaseColumn = "val_param" length = "32" nullable;
            - @Menu menu_code_fk hint = "BaseColumn1=menu_code" opposite menu_params;

            Repository Menu_paramRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Menu_paramVO {
			Long menu_param_id ;
			String menu_code ;
			String nom_param ;
			String val_param ;
		}

        Service Menu_paramService {
            > @Menu_paramRepository
            String createMenu_paramService(@Menu_paramVO menu_paramVO);
            String updateMenu_paramService(@Menu_paramVO menu_paramVO);
            String deleteMenu_paramService(@Menu_paramVO menu_paramVO);
            List<@Menu_paramVO> getAllMenu_paramService();
            List<@Menu_paramVO> searchMenu_paramService(@Menu_paramVO menu_paramVO);
        }        
        Entity Ressource_bundle {
            cache ! auditable
            ! optimisticLocking
            scaffold
            String bundle key length = "64";
            String locale_chain key length = "5";
            String key_val key length = "200";
            String value databaseColumn = "value" length = "250" nullable;
            String short_value databaseColumn = "short_value" length = "250" nullable;

            Repository Ressource_bundleRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Ressource_bundleVO {
            String bundle hint = "order1=Asc" ; String locale_chain hint = "order2=Asc" ; String key_val ; String value ;
             String short_value;
             Collection < String > inBundle
            hint = "op=in,issearch,column_entity=bundle" ;
             Collection < String > inKeys
            hint = "op=in,issearch,column_entity=key_val" ;
        }

        Service Ressource_bundleService {
            hint = "notSecured"
            > @Ressource_bundleRepository
            String createRessource_bundleService(@Ressource_bundleVO ressource_bundleVO);
            String updateRessource_bundleService(@Ressource_bundleVO ressource_bundleVO);
            String deleteRessource_bundleService(@Ressource_bundleVO ressource_bundleVO);
            List<@Ressource_bundleVO> getAllRessource_bundleService();
            List<@Ressource_bundleVO> searchRessource_bundleService(@Ressource_bundleVO ressource_bundleVO);
            List<@Ressource_bundleVO> getCachedRessource_bundle(String bundle, String locale_chain);
            List<@Ressource_bundleVO> searchByBundleNamesAndLocaleChain(Collection<String> bundleNames, String locale_chain);
            String cacheEvictBundles();
            String mergeRessource_bundleService(@Ressource_bundleVO ressource_bundleVO);
            String mergeAllRessource_bundleService(List<@Ressource_bundleVO> listRessource_bundleVO);
            
        }

        Entity Images {
            ! auditable
            ! optimisticLocking
            scaffold
            String nom key databaseColumn = "nom" length = "20";
            Blob image databaseColumn = "image" nullable;

            Repository ImagesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject ImagesVO {
            String nom ; Object image hint = "issearch,skip" ;
        }

        Service ImagesService {
            hint = "skipTest"
            > @ImagesRepository
            String createImagesService(@ImagesVO imagesVO);
            String updateImagesService(@ImagesVO imagesVO);
            String deleteImagesService(@ImagesVO imagesVO);
            List<@ImagesVO> getAllImagesService();
            List<@ImagesVO> searchImagesService(@ImagesVO imagesVO);
        }

        Entity Services {
            databaseTable = "Services" ! auditable
            ! optimisticLocking
            scaffold
            Long id_service key databaseType = "NUMBER(,)";
            String name_service databaseColumn = "name_service" length = "256" nullable;

            Repository ServicesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject ServicesVO {
            Long id_service ; String name_service ;
        }

        Service ServicesService {
            > @ServicesRepository
            String createServicesService(@ServicesVO servicesVO);
            String updateServicesService(@ServicesVO servicesVO);
            String deleteServicesService(@ServicesVO servicesVO);
            List<@ServicesVO> getAllServicesService();
            List<@ServicesVO> searchServicesService(@ServicesVO servicesVO);
        }

        Entity Operation {
            databaseTable = "Operation" ! auditable
            ! optimisticLocking
            scaffold
            Long id_operation key hint = "AutoGenerated" databaseType = "NUMBER(,)";
            String name_operation databaseColumn = "name_operation" length = "64" nullable;
            String desc_opeartion databaseColumn = "desc_opeartion" length = "64" nullable;

            Repository OperationRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject OperationVO {
            Long id_operation ; String name_operation ; String desc_opeartion ;
        }

        Service OperationService {
            > @OperationRepository
            String createOperationService(@OperationVO operationVO);
            String updateOperationService(@OperationVO operationVO);
            String deleteOperationService(@OperationVO operationVO);
            List<@OperationVO> getAllOperationService();
            List<@OperationVO> searchOperationService(@OperationVO operationVO);
        }

        Entity Secured_ressource_role {
            databaseTable = "Secured_ressource_role" ! auditable
            ! optimisticLocking
            scaffold
            - @Role fk_role key hint = "BaseColumn1=role_id" fetch = "lazy";
            - @Secured_ressource fk_secured_ressource key hint = "BaseColumn1=id_ressource" fetch = "lazy";

            Repository Secured_ressource_roleRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Secured_ressource_roleVO {
			String role_id ;
			Long id_ressource ;
		}

        Service Secured_ressource_roleService {
            > @Secured_ressource_roleRepository
            String createSecured_ressource_roleService(@Secured_ressource_roleVO secured_ressource_roleVO);
            String updateSecured_ressource_roleService(@Secured_ressource_roleVO secured_ressource_roleVO);
            String deleteSecured_ressource_roleService(@Secured_ressource_roleVO secured_ressource_roleVO);
            List<@Secured_ressource_roleVO> getAllSecured_ressource_roleService();
            List<@Secured_ressource_roleVO> searchSecured_ressource_roleService(@Secured_ressource_roleVO secured_ressource_roleVO);
        }

        Entity Secured_ressource {
            databaseTable = "Secured_ressource" ! auditable
            ! optimisticLocking
            scaffold
            Long id_ressource hint = "AutoGenerated" key databaseType = "NUMBER(,)";
            String authority databaseColumn = "authority" length = "64" nullable;
            - @Services fk_service hint = "BaseColumn1=id_service" nullable fetch = "lazy";
            - @Operation fk_operation hint = "BaseColumn1=id_operation" nullable fetch = "lazy";

            Repository Secured_ressourceRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Secured_ressourceVO {
            Long id_ressource ; String authority ; Long id_service ; Long id_operation ; OperationVO refOperation hint = "reference=fk_operation" ;
            ServicesVO refServices hint = "reference=fk_service" Collection < Long > inServices hint =
            "op=in,issearch,column_entity=id_ressource" ;
        }

        Service Secured_ressourceService {
            > @Secured_ressourceRepository
            > @OperationService
            > @ServicesService
            String createSecured_ressourceService(@Secured_ressourceVO secured_ressourceVO);
            String updateSecured_ressourceService(@Secured_ressourceVO secured_ressourceVO);
            String deleteSecured_ressourceService(@Secured_ressourceVO secured_ressourceVO);
            List<@Secured_ressourceVO> getAllSecured_ressourceService();
            List<@Secured_ressourceVO> searchSecured_ressourceService(@Secured_ressourceVO secured_ressourceVO);
        }

        Entity Screen_services {
            databaseTable = "Screen_services" ! auditable
            ! optimisticLocking
            scaffold
            - @Screen fk_screen_service_1 key hint = "BaseColumn1=screen_id" fetch = "lazy";
            - @Services fk_screen_service2 key hint = "BaseColumn1=id_service" fetch = "lazy";

            Repository Screen_servicesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Screen_servicesVO {
            String screen_id ; Long id_service ;
        }

        Service Screen_servicesService {
            > @Screen_servicesRepository
            String createScreen_servicesService(@Screen_servicesVO screen_servicesVO);
            String updateScreen_servicesService(@Screen_servicesVO screen_servicesVO);
            String deleteScreen_servicesService(@Screen_servicesVO screen_servicesVO);
            List<@Screen_servicesVO> getAllScreen_servicesService();
            List<@Screen_servicesVO> searchScreen_servicesService(@Screen_servicesVO screen_servicesVO);
        }

        
        /**************************************************************************************/
        /*********************************** Maker checker ************************************/
        /**************************************************************************************/ 
		Entity Operation_group {
            databaseTable = "Operation_group" auditable
            ! optimisticLocking
            scaffold
            String group_code key length = "4";
			- @Bank fk_operation_group_10 key hint = "BaseColumn1=bank_code";
            String wording databaseColumn = "wording" length = "60" nullable;
            String validation_methode databaseColumn = "validation_methode" length = "1" nullable;
            - @Currency_table fk_operation_group_09 hint = "BaseColumn1=currency_code" nullable;
            - @Profile fk_operation_group_01 hint = "BaseColumn1=profile_checker" nullable;
            String profile_checker_time_limite databaseColumn = "profile_checker_time_limite" databaseType = "NUMBER(3,0)" nullable;
            - @Profile fk_operation_group_02 hint = "BaseColumn1=profile_referral1" nullable;
            String profile_referral1_time_limite databaseColumn = "profile_referral1_time_limite" databaseType = "NUMBER(3,0)" nullable;
            - @Profile fk_operation_group_03 hint = "BaseColumn1=profile_referral2" nullable;
            String profile_referral2_time_limite databaseColumn = "profile_referral2_time_limite" databaseType = "NUMBER(3,0)" nullable;
            - @Profile fk_operation_group_04 hint = "BaseColumn1=profile_boss" nullable;
            String profile_boss_time_limite databaseColumn = "profile_boss_time_limite" databaseType = "NUMBER(3,0)" nullable;
            - @Users fk_operation_group_05 hint = "BaseColumn1=user_checker" nullable;
            String user_checker_time_limite databaseColumn = "user_checker_time_limite" databaseType = "NUMBER(3,0)" nullable;
            - @Users fk_operation_group_06 hint = "BaseColumn1=user_referral1" nullable;
            String user_referral1_time_limite databaseColumn = "user_referral1_time_limite" databaseType = "NUMBER(3,0)" nullable;
            - @Users fk_operation_group_07 hint = "BaseColumn1=user_referral2" nullable;
            String user_referral2_time_limite databaseColumn = "user_referral2_time_limite" databaseType = "NUMBER(3,0)" nullable;
            - @Users fk_operation_group_08 hint = "BaseColumn1=user_boss" nullable;
            String user_boss_time_limite databaseColumn = "user_boss_time_limite" databaseType = "NUMBER(3,0)" nullable;

            Repository Operation_groupRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Operation_groupVO {
            String group_code ; String bank_code; String wording ; String validation_methode ; String currency_code ; String profile_checker ; String
            profile_checker_time_limite ; String profile_referral1 ; String profile_referral1_time_limite ; String profile_referral2 ; String
            profile_referral2_time_limite ; String profile_boss ; String profile_boss_time_limite ; Long user_checker ; String
            user_checker_time_limite ; Long user_referral1 ; String user_referral1_time_limite ; Long user_referral2 ; String
            user_referral2_time_limite ; Long user_boss ; String user_boss_time_limite ;
        }

        Service Operation_groupService {
            hint ="notMakerchecker"
            > @Operation_groupRepository
            String createOperation_groupService(@Operation_groupVO operation_groupVO);
            String updateOperation_groupService(@Operation_groupVO operation_groupVO);
            String deleteOperation_groupService(@Operation_groupVO operation_groupVO);
            List<@Operation_groupVO> getAllOperation_groupService();
            List<@Operation_groupVO> searchOperation_groupService(@Operation_groupVO operation_groupVO);
        }

         
        Entity Restricted_screens {
            databaseTable = "Restricted_screens" auditable
            ! optimisticLocking
            scaffold
            Long restricted_screen_code key hint = "AutoGenerated";
            - @Screen fk_restricted_screens_01 hint = "BaseColumn1=screen_id" nullable;
            String entity_refeered databaseColumn = "entity_refeered" length = "100" nullable;
            String wording databaseColumn = "wording" length = "60" nullable;
            String abrv_wording databaseColumn = "abrv_wording" length = "60" nullable;
            String activated databaseColumn = "activated" length = "1" nullable;
            //String multi_lang_id databaseColumn = "multi_lang_id" nullable;

            Repository Restricted_screensRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Restricted_screensVO {
			Long restricted_screen_code ;
			String screen_id ;
			String entity_refeered ;
			String wording hint = "multiLang" ;
			String abrv_wording hint = "multiLang" ;
			String activated ;
			ScreenVO
			ref_screen hint = "reference=fk_restricted_screens_01"
		}

        Service Restricted_screensService {
            hint = "notMakerchecker"
            > @Restricted_screensRepository
            > @ScreenService
            > @ScreenRepository
            String createRestricted_screensService(@Restricted_screensVO restricted_screensVO);
            String updateRestricted_screensService(@Restricted_screensVO restricted_screensVO);
            String deleteRestricted_screensService(@Restricted_screensVO restricted_screensVO);
            List<@Restricted_screensVO> getAllRestricted_screensService();
            List<@Restricted_screensVO> searchRestricted_screensService(@Restricted_screensVO restricted_screensVO);
        }

      
        Entity Screen_operation {
            databaseTable = "Screen_operation" auditable
            ! optimisticLocking
            scaffold
            Long screen_operation_code key hint = "AutoGenerated";
            - @Operation fk_screen_operation_01 hint = "BaseColumn1=refeered_operation" nullable;
            - @Services fk_screen_operation_03 hint = "BaseColumn1=service_code" nullable;
            - @Restricted_screens fk_screen_operation_02 hint = "BaseColumn1=refeered_screen" nullable;
            String combined_flag databaseColumn = "combined_flag" length = "1" nullable;
            String wording databaseColumn = "wording" length = "64" nullable;
			

            Repository Screen_operationRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Screen_operationVO {
            Long screen_operation_code ; Long refeered_operation ; Long service_code ; Long refeered_screen ; String combined_flag ; String wording ;
            Restricted_screensVO ref_restricted_screen hint = "reference=fk_screen_operation_02" OperationVO ref_operation hint =
            "reference=fk_screen_operation_01" ServicesVO ref_Service hint = "reference=fk_screen_operation_03"
        }

        Service Screen_operationService {
            hint = "notMakerchecker"
            > @Screen_operationRepository
            > @OperationRepository
            > @OperationService
            > @ServicesRepository
            > @ServicesService
            > @Restricted_screensRepository
            > @Restricted_screensService
            String createScreen_operationService(@Screen_operationVO screen_operationVO);
            String updateScreen_operationService(@Screen_operationVO screen_operationVO);
            String deleteScreen_operationService(@Screen_operationVO screen_operationVO);
            List<@Screen_operationVO> getAllScreen_operationService();
            List<@Screen_operationVO> searchScreen_operationService(@Screen_operationVO screen_operationVO);
        }
		
        Entity Mask_profile {
            databaseTable = "Mask_profile" auditable
            ! optimisticLocking
            scaffold
            String id_mask_profile key databaseType = "NUMBER(7,0)";
            String name databaseColumn = "name" length = "32" nullable;
            String wording databaseColumn = "wording" length = "256" nullable;
            - Set<@Mask_chain> mask_chains cascade = "all-delete-orphan" opposite fk_mask_chain01;

            Repository Mask_profileRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Mask_profileVO {
            String id_mask_profile ; String name ; String wording ; Collection < Mask_chainVO > mask_chain_col hint = "Set=mask_chains"
        }

        Service Mask_profileService {
            > @Mask_profileRepository
            > @Mask_chainService
            String createMask_profileService(@Mask_profileVO mask_profileVO);
            String updateMask_profileService(@Mask_profileVO mask_profileVO);
            String deleteMask_profileService(@Mask_profileVO mask_profileVO);
            List<@Mask_profileVO> getAllMask_profileService();
            List<@Mask_profileVO> searchMask_profileService(@Mask_profileVO mask_profileVO);
        }

        Entity Mask_chain {
            databaseTable = "Mask_chain" ! auditable
            ! optimisticLocking
            scaffold
            String id_mask_chain key databaseType = "NUMBER(7,0)";
            int asterisk_number databaseColumn = "asterisk_number" databaseType = "NUMBER(7,0)";
            int start_index databaseColumn = "start_index" databaseType = "NUMBER(7,0)";
            String padding databaseColumn = "padding" length = "1" nullable;
            - @Mask_profile fk_mask_chain01 hint = "BaseColumn1=profile_fk" nullable opposite mask_chains;

            Repository Mask_chainRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Mask_chainVO {
            String id_mask_chain ; int asterisk_number ; int start_index ; String padding ; String profile_fk ;
        }

        Service Mask_chainService {
            > @Mask_chainRepository
            String createMask_chainService(@Mask_chainVO mask_chainVO);
            String updateMask_chainService(@Mask_chainVO mask_chainVO);
            String deleteMask_chainService(@Mask_chainVO mask_chainVO);
            List<@Mask_chainVO> getAllMask_chainService();
            List<@Mask_chainVO> searchMask_chainService(@Mask_chainVO mask_chainVO);
        }

        Entity Mask_config {
            databaseTable = "Mask_config" auditable
            ! optimisticLocking
            scaffold
            Long mask_id key databaseType = "NUMBER(19,0)" hint='AutoGenerated';
            String name databaseColumn = "name" length = "16" nullable;
            String wording databaseColumn = "wording" length = "150" nullable;
            - @Tables_mask fk_mask_config1 hint = "BaseColumn1=table_mask_fk" nullable fetch = "lazy";
            - @Columns_mask fk_mask_config2 hint = "BaseColumn1=column_mask_fk" nullable fetch = "lazy";
            String mask_flag databaseColumn = "mask_flag" length = "1" nullable;
            String owner databaseColumn = "owner" length = "16" nullable;
            - @Mask_profile fk_mask_config3 hint = "BaseColumn1=mask_profile_fk" nullable fetch = "lazy";

            Repository Mask_configRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Mask_configVO {
            Long mask_id ; String name ; String wording ; String table_mask_fk ; String column_mask_fk ; String mask_flag ; String owner String
            mask_profile_fk String table_name hint = "issearch,FK1=fk_mask_config1,attribute=table_name" ; String column_name hint =
            "issearch,FK1=fk_mask_config2,attribute=column_name" ;
        }
        
         DataTransferObject Mask_configSpecificVO {
            
            Mask_chainVO mask_chain;
            Mask_profileVO mask_profile;   
            Collection <Mask_configVO> mask_config;
            String default_mask;
        }

        Service Mask_configService {
            > @Mask_configRepository
            String createMask_configService(@Mask_configVO mask_configVO);
            String updateMask_configService(@Mask_configVO mask_configVO);
            String deleteMask_configService(@Mask_configVO mask_configVO);
            List<@Mask_configVO> getAllMask_configService();
            List<@Mask_configVO> searchMask_configService(@Mask_configVO mask_configVO);
            String applyMask(String table, String columnName, String columnValue);
            
            String updateDefault_maskService(@Mask_configSpecificVO mask_configSpecificVO);
        }

        Entity Tables_mask {
            databaseTable = "Tables_mask" ! auditable
            ! optimisticLocking
            scaffold
            String tables_mask_id key databaseType = "NUMBER(19,0)";
            String table_name databaseColumn = "table_name" length = "30";
            String wording databaseColumn = "wording" length = "32";

            Repository Tables_maskRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Tables_maskVO {
            String tables_mask_id ; String table_name ; String wording ;
        }

        Service Tables_maskService {
            > @Tables_maskRepository
            String createTables_maskService(@Tables_maskVO tables_maskVO);
            String updateTables_maskService(@Tables_maskVO tables_maskVO);
            String deleteTables_maskService(@Tables_maskVO tables_maskVO);
            List<@Tables_maskVO> getAllTables_maskService();
            List<@Tables_maskVO> searchTables_maskService(@Tables_maskVO tables_maskVO);
        }

        Entity Columns_mask {
            databaseTable = "Columns_mask" ! auditable
            ! optimisticLocking
            scaffold
            String columns_mask_id key databaseType = "NUMBER(19,0)";
            String column_name databaseColumn = "column_name" length = "16";
            String wording databaseColumn = "wording" length = "32" nullable;
            String column_length databaseColumn = "column_length" databaseType = "NUMBER(19,0)" nullable;
            - @Tables_mask fk_columns_mask hint = "BaseColumn1=table_mask_fk" nullable fetch = "lazy";

            Repository Columns_maskRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Columns_maskVO {
            String columns_mask_id ; String column_name ; String wording ; String column_length ; String table_mask_fk ;
        }

        Service Columns_maskService {
            > @Columns_maskRepository
            String createColumns_maskService(@Columns_maskVO columns_maskVO);
            String updateColumns_maskService(@Columns_maskVO columns_maskVO);
            String deleteColumns_maskService(@Columns_maskVO columns_maskVO);
            List<@Columns_maskVO> getAllColumns_maskService();
            List<@Columns_maskVO> searchColumns_maskService(@Columns_maskVO columns_maskVO);
        } //****************************************  PCARD_AUTHENTIFICATION_HIST   *******************************************
        Entity Pcard_authentification_hist {
            databaseTable = "Pcard_authentification_hist" auditable
            ! optimisticLocking
            scaffold
            Long authentif_id databaseColumn = "authentif_id" key hint = "AutoGenerated" databaseType = "NUMBER(20,0)";
            - @Bank bank_fk hint = "BaseColumn1=bank_code" fetch = "lazy" nullable;
			String login databaseColumn = "login" length = "16" nullable;
            Timestamp date_authentif databaseColumn = "date_authentif" nullable;
            Timestamp locale_date_authentif databaseColumn = "locale_date_authentif" nullable;
            String statu_authentif databaseColumn = "statu_authentif" length = "1" nullable;
            String sessionID databaseColumn = "sessionID" length = "1024" nullable;
            String remoteAddress databaseColumn = "remoteAddress" length = "512" nullable;
            String ldap_authentif databaseColumn = "ldap_authentif" length = "1" nullable;
            String ip_ldap_server databaseColumn = "ip_ldap_server" length = "40" nullable;

            Repository Pcard_authentification_histRepository {
                findByKeys;
                findByKey;
			//	findByCondition;//(PagingParameter pagingParameter);
                findByCondition;				
                findByCriteria;
            }
        }

        DataTransferObject Pcard_authentification_histVO {
            Long authentif_id ; String bank_code;
			String login ; Timestamp date_authentif hint='order1=Desc'; Timestamp locale_date_authentif; String statu_authentif ; 
            String sessionID ;
            String remoteAddress;
            String ldap_authentif ; String ip_ldap_server ;
            Collection < String > statut_collection hint = "op=in,issearch,column_entity=statu_authentif" ; Date after_date_authentif hint =
            "op=greatThanOrEqual,issearch,column_entity=date_authentif" ; Timestamp before_date_authentif hint =
            "op=lessThanOrEqual,issearch,column_entity=date_authentif" ; Timestamp after_strict_date_authentif hint =
            "op=greatThan,issearch,column_entity=date_authentif" ; Timestamp before_strict_date_authentif hint =
            "op=lessThan,issearch,column_entity=date_authentif" ;
	//		int page hint = "page" ;
           // int pageSize hint = "pageSize" ;
           //int totalPages hint = "totalPages" ;
        }

        Service Pcard_authentification_histService {
			//hint="secured"
            > @Pcard_authentification_histRepository
            String createPcard_authentification_histService(@Pcard_authentification_histVO pcard_authentification_histVO);
            String updatePcard_authentification_histService(@Pcard_authentification_histVO pcard_authentification_histVO);
            String deletePcard_authentification_histService(@Pcard_authentification_histVO pcard_authentification_histVO);
            List<@Pcard_authentification_histVO> getAllPcard_authentification_histService(@Pcard_authentification_histVO pcard_authentification_histVO);
            List<@Pcard_authentification_histVO> searchPcard_authentification_histService(@Pcard_authentification_histVO
            pcard_authentification_histVO);
        } //****************************************  PCARD_USER_BLOCKED   *******************************************
        Entity Pcard_user_blocked {
            databaseTable = "Pcard_user_blocked" auditable
            ! optimisticLocking
            scaffold
			//String bank_code key databaseType="CHAR(6)";
		   Long blocked_id databaseColumn = "blocked_id" key hint = "AutoGenerated" databaseType = "NUMBER(20,0)";
		   - @Bank bank_code hint = "BaseColumn1=bank_code" fetch = "lazy";
            String user_code databaseColumn = "user_code" length = "16";
            Timestamp date_blocking databaseColumn = "date_blocking" nullable;
            String user_unblocking databaseColumn = "user_unblocking" length = "16" nullable;
            Timestamp date_unblocking databaseColumn = "date_unblocking" nullable;

            Repository Pcard_user_blockedRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Pcard_user_blockedVO {
          Long blocked_id ;  String bank_code; String user_code ; Timestamp date_blocking ; String user_unblocking ; Timestamp date_unblocking ; Timestamp after_date_blocking hint =
            "op=greatThanOrEqual,issearch,column_entity=date_blocking" ; Timestamp before_date_blocking hint =
            "op=lessThanOrEqual,issearch,column_entity=date_blocking" ; Timestamp after_strict_date_blocking hint =
            "op=greatThan,issearch,column_entity=date_blocking" ; Timestamp before_strict_date_blocking hint =
            "op=lessThan,issearch,column_entity=date_blocking" ; Timestamp after_date_unblocking hint =
            "op=greatThanOrEqual,issearch,column_entity=date_unblocking" ; Timestamp before_date_unblocking hint =
            "op=lessThanOrEqual,issearch,column_entity=date_unblocking" ; Timestamp after_strict_date_unblocking hint =
            "op=greatThan,issearch,column_entity=date_unblocking" ; Timestamp before_strict_date_unblocking hint =
            "op=lessThan,issearch,column_entity=date_unblocking" ;
        }

        Service Pcard_user_blockedService {
            hint = "ref1=User_passwordsService"
            > @Pcard_user_blockedRepository
            String createPcard_user_blockedService(@Pcard_user_blockedVO pcard_user_blockedVO);
            String updatePcard_user_blockedService(@Pcard_user_blockedVO pcard_user_blockedVO);
            String deletePcard_user_blockedService(@Pcard_user_blockedVO pcard_user_blockedVO);
            List<@Pcard_user_blockedVO> getAllPcard_user_blockedService();
            List<@Pcard_user_blockedVO> searchPcard_user_blockedService(@Pcard_user_blockedVO pcard_user_blockedVO);
        }

        Entity Component_validator {
            databaseTable = "Component_validator" auditable
            ! optimisticLocking
            scaffold
            Long component_validator_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String component_validator_code databaseColumn = "component_validator_code" length = "50" nullable;
            String type databaseColumn = "type" length = "25" nullable;
            String validator_operation databaseColumn = "validator_operation" length = "50" nullable;
            String validator_form_item databaseColumn = "validator_form_item" length = "50" nullable;
            String ^required databaseColumn = "required" length = "1" nullable;
            String property databaseColumn = "property" length = "25" nullable;
            Long precision databaseColumn = "precision" nullable;
            Long minValue databaseColumn = "minValue" nullable;
            Long maxValue databaseColumn = "maxValue" nullable;
            - @Component fk_component hint = "BaseColumn1=component_fk" nullable;

            Repository Component_validatorRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Component_validatorVO {
            Long component_validator_id ; String component_validator_code ; String type ; String validator_operation ; String validator_form_item
            ; String component_fk ; String property ; String ^required ; Long precision ; Long minValue ; Long maxValue ; String screen_code hint =
            "issearch,FK1=fk_component,FK2=screen_parent,attribute=screen_code" ComponentVO ref_component hint = "reference=fk_component"
            ;
        }

        Service Component_validatorService {
            > @Component_validatorRepository
            > @ComponentService
            String createComponent_validatorService(@Component_validatorVO component_validatorVO);
            String updateComponent_validatorService(@Component_validatorVO component_validatorVO);
            String deleteComponent_validatorService(@Component_validatorVO component_validatorVO);
            List<@Component_validatorVO> getAllComponent_validatorService();
            List<@Component_validatorVO> searchComponent_validatorService(@Component_validatorVO component_validatorVO);
        }

        Entity Wizard {
            databaseTable = "Wizard" auditable
            ! optimisticLocking
            scaffold
            String wizard_id key length = "30";
            String step_code databaseColumn = "step_code" length = "4" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            String serialized_object databaseColumn = "serialized_object" length = "4000" nullable;
            Date action_date databaseColumn = "action_date" nullable;
            String object_type databaseColumn = "object_type" length = "40" nullable;

            Repository WizardRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject WizardVO {
            String wizard_id ; String step_code ; String status ; String serialized_object ; Date action_date ; String object_type ;
        }

        Service WizardService {
            hint = "skipTest"
            > @WizardRepository
            String createWizardService(@WizardVO wizardVO);
            String updateWizardService(@WizardVO wizardVO);
            String deleteWizardService(@WizardVO wizardVO);
            List<@WizardVO> getAllWizardService();
            List<@WizardVO> searchWizardService(@WizardVO wizardVO);
        }

        Entity Component_formater {
            databaseTable = "Component_formater" auditable
            ! optimisticLocking
            scaffold
            Long component_formater_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String component_formater_code databaseColumn = "component_formater_code" length = "100" nullable;
            String type databaseColumn = "type" length = "100" nullable;
            - @Component fk_component01 hint = "BaseColumn1=component_fk" nullable;
            - @Component fk_component02 hint = "BaseColumn1=currency_component_fk" nullable;
            String currency_exponent databaseColumn = "currency_exponent" length = "100" nullable;
            String format databaseColumn = "format" length = "100" nullable;
            String datafield databaseColumn = "datafield" length = "100" nullable;
            String currency_table_fk databaseColumn = "currency_table_fk" length = "100" nullable;

            Repository Component_formaterRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Component_formaterVO {
            Long component_formater_id ; String component_formater_code ; String type ; String component_fk ; String currency_component_fk ; String
            currency_exponent ; String format ; String datafield ; String currency_table_fk ; String screen_code hint =
            "issearch,FK1=fk_component01,FK2=screen_parent,attribute=screen_code" ComponentVO ref_component hint =
            "reference=fk_component01" ; ComponentVO ref_currency_component hint = "reference=fk_component02" ;
        }

        Service Component_formaterService {
            > @Component_formaterRepository
            > @ComponentService
            String createComponent_formaterService(@Component_formaterVO component_formaterVO);
            String updateComponent_formaterService(@Component_formaterVO component_formaterVO);
            String deleteComponent_formaterService(@Component_formaterVO component_formaterVO);
            List<@Component_formaterVO> getAllComponent_formaterService();
            List<@Component_formaterVO> searchComponent_formaterService(@Component_formaterVO component_formaterVO);
        }

        Entity Favoris {
            databaseTable = "Favoris" auditable
            ! optimisticLocking
            scaffold
            Long favoris_id key hint = "AutoGenerated";
            - @Menu fk_favoris_01 hint = "BaseColumn1=menu_id";
            - @Users fk_favoris_02 hint = "BaseColumn1=users_id" nullable;
            String favoris_parent databaseColumn = "favoris_parent" databaseType = "NUMBER(10,0)" nullable;
            String favoris_level databaseColumn = "favoris_level" databaseType = "NUMBER(10,0)" nullable;
            String favoris_order databaseColumn = "favoris_order" databaseType = "NUMBER(10,0)" nullable;
            String wording databaseColumn = "wording" length = "512" nullable;
            String abrv_wording databaseColumn = "abrv_wording" length = "40" nullable;

            Repository FavorisRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject FavorisVO {
			Long favoris_id ;
			String menu_id ;
			Long users_id ;
			String favoris_level ;
			String favoris_order ;
			String wording ;
			String abrv_wording ;
		}

        Service FavorisService {
            > @FavorisRepository
            String createFavorisService(@FavorisVO favorisVO);
            String updateFavorisService(@FavorisVO favorisVO);
            String deleteFavorisService(@FavorisVO favorisVO);
            List<@FavorisVO> getAllFavorisService();
            List<@FavorisVO> searchFavorisService(@FavorisVO favorisVO);
        }

		Service InterceptorUtilService {
			Map<String, Object> loadDependenciesService(Map<String, Object> criterias);
		    Map<String, Object> loadEntitiesService(com.google.gson.JsonObject criterias);
			String processOperationService(Map<String, Object> criterias);
		}
		Entity Vassigned_roles2users
		{
		hint="view"
		databaseTable="V_assigned_roles2users"
		 !auditable
		 !optimisticLocking
		  scaffold
		 String institution_fk databaseColumn="institution_fk" databaseType="CHAR(6)" nullable;
		 String user_code key databaseColumn="user_code" length="16" ;
		 String role_id key databaseColumn="role_id" databaseType="NUMBER(10,0)";
		 String user_name databaseColumn="user_name" length="32" nullable;
		 String name databaseColumn="name" length="16" nullable;
		 String wording databaseColumn="wording" length="32" nullable;
		 String admin databaseColumn="admin" length="1" nullable;
		 Repository Vassigned_roles2usersRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Vassigned_roles2usersVO { 
		 String  institution_fk;
		 String  user_code;
		 String  role_id;
		 String  user_name;
		 String  name;
		 String  wording;
		 String  admin;
		 Collection < String > adminCol hint="attribute=admin";			
	  	 boolean adminConditionIn hint ="condition=in,operand=adminCol" ;  
		}
		Service Vassigned_roles2usersService{ 
		 > @Vassigned_roles2usersRepository
		 String createVassigned_roles2usersService(@Vassigned_roles2usersVO vassigned_roles2usersVO);
		 String updateVassigned_roles2usersService(@Vassigned_roles2usersVO vassigned_roles2usersVO);
		 String deleteVassigned_roles2usersService(@Vassigned_roles2usersVO vassigned_roles2usersVO);
		 List<@Vassigned_roles2usersVO> getAllVassigned_roles2usersService();
		 List<@Vassigned_roles2usersVO> searchVassigned_roles2usersService(@Vassigned_roles2usersVO vassigned_roles2usersVO);
		 }
		 
		 		  /**************************** Begin Multi_lang_values ****************************/
 Entity Multi_lang_values {
			databaseTable = "Multi_lang_values" 
			auditable
			! optimisticLocking
			scaffold
			
			String column_name  databaseColumn = "column_name"  key length = "32" ;
			-@Locale fk_multi_lang_values_01 hint = "BaseColumn1=locale" key fetch = "lazy";

			String column_value databaseColumn = "column_value" key length = "255" ;
			String multi_lang_value databaseColumn = "multi_lang_value" length = "255" nullable;

			-@Multi_lang_tables fk_multi_lang_values_02  hint = "BaseColumn1=table_name" key  fetch = "lazy";
			


			Repository Multi_lang_valuesRepository {
				findByKeys;
				findByKey;
				findByCondition;
				findByCriteria;
				insert;
				//removeById(String multi_lang_id) => AccessObject;
				//String getSequenceNextVal() => AccessObject;

			}
		}

		DataTransferObject Multi_lang_valuesVO {
			
			
			String locale ;
			String column_name;
			String column_value;

			String table_name;
			String multi_lang_value;

			
			
			
			
		}


        Service Multi_lang_valuesService {
            > @Multi_lang_valuesRepository
            String createMulti_lang_valuesService(@Multi_lang_valuesVO multi_lang_valuesVO);
            String mergeMulti_lang_valuesService(@Multi_lang_valuesVO multi_lang_valuesVO);
            String updateMulti_lang_valuesService(@Multi_lang_valuesVO multi_lang_valuesVO);
            String deleteMulti_lang_valuesService(@Multi_lang_valuesVO multi_lang_valuesVO);
            List<@Multi_lang_valuesVO> getAllMulti_lang_valuesService(@Multi_lang_valuesVO multi_lang_valuesVO);
            List<@Multi_lang_valuesVO> searchMulti_lang_valuesService(@Multi_lang_valuesVO multi_lang_valuesVO);
            String processOperations(com.google.gson.JsonObject mapVO) hint = "multiOperations,Entity1=Multi_lang_values";
           // Map<String, Object> loadDependencies(Map<String, Object> criterias) hint ="Dependency1=Multi_lang_tables,Dependency2=Locale";
            String mergeAllMulti_lang_valuesService(List<@Multi_lang_valuesVO> listMulti_lang_valuesVO);
            String createAllMulti_lang_valuesService(List<@Multi_lang_valuesVO> listMulti_lang_valuesVO);
			String updateAllMulti_lang_valuesService(List<@Multi_lang_valuesVO>  listMulti_lang_valuesVO);
			String deletAlleMulti_lang_valuesService(List<@Multi_lang_valuesVO> listMulti_lang_valuesVO);
			List<@Multi_lang_values> getCachedMultiLangValues(String tableName, String columnName, String locale);
			List<@Multi_lang_values> updateCachedMultiLangValues(String tableName, String columnName, String locale);
			String cacheEvict();			
        }
        
        
  /**************************** Begin Multi_lang_tables ****************************/
    Entity Multi_lang_tables {
            databaseTable = "Multi_lang_tables" 
            auditable
            ! optimisticLocking
            scaffold
                   
            String table_name key databaseColumn = "table_name" length = "32";   


            Repository Multi_lang_tablesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Multi_lang_tablesVO {
            
            String table_name ;
        }

        Service Multi_lang_tablesService {
            > @Multi_lang_tablesRepository
            String createMulti_lang_tablesService(@Multi_lang_tablesVO multi_lang_tablesVO);
            String updateMulti_lang_tablesService(@Multi_lang_tablesVO multi_lang_tablesVO);
            String deleteMulti_lang_tablesService(@Multi_lang_tablesVO multi_lang_tablesVO);
            List<@Multi_lang_tablesVO> getAllMulti_lang_tablesService();
            List<@Multi_lang_tablesVO> searchMulti_lang_tablesService(@Multi_lang_tablesVO multi_lang_tablesVO);
            List<@Multi_lang_tablesVO> getCachedMulti_lang_tables();
        }
        
        
         /**************************** Begin Locale ****************************/
    Entity Locale {
            databaseTable = "Locale" 
            auditable
            ! optimisticLocking
            scaffold
            
            String locale length = "10" key;
            String description databaseColumn = "description" length = "255" nullable;   


            Repository LocaleRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject LocaleVO {
            
            String locale ;
            String description ;
        }

        Service LocaleService {
            > @LocaleRepository
            String createLocaleService(@LocaleVO localeVO);
            String updateLocaleService(@LocaleVO localeVO);
            String deleteLocaleService(@LocaleVO localeVO);
            List<@LocaleVO> getAllLocaleService();
            List<@LocaleVO> searchLocaleService(@LocaleVO localeVO);
        }
        
        

   	 	Entity Dbms_session {
            ! optimisticLocking  
            String user_id  key;

            Repository Dbms_sessionRepository {
               // set_identifier(String user_id) => AccessObject;
            }
        }
 
       // Service SessionService {
        //    > @Dbms_sessionRepository
           //  set_identifier();
       // }
		
		/**************************** Begin Multi_lang_values_view ****************************/
		Entity Multi_lang_values_view {
			hint = "view"
            databaseTable = "Multi_lang_values_view" ! auditable
            ! optimisticLocking
            scaffold
            String multi_lang_id key length = "10";
            String column_name key databaseColumn = "column_name"  length = "32" ;	
			String table_name databaseColumn = "table_name"  length = "32" nullable;			  		
			String data_length databaseColumn = "data_length" nullable; 			
			String en_value databaseColumn = "en_value" length = "255" nullable; 
			String es_value databaseColumn = "es_value" length = "255" nullable; 
			String fr_value databaseColumn = "fr_value" length = "255" nullable; 
			
            Repository Multi_lang_values_viewRepository {
                findByKeys;
                findByKey;
               // findByCondition(PagingParameter pagingParameter);
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Multi_lang_values_viewVO {            
            String multi_lang_id  ;
            String column_name;
			String table_name; 
			String data_length;			
			String en_value; 
			String es_value; 
			String fr_value; 	
					
			String  en_valueOr hint="attribute=en_value";			
			String  es_valueOr hint="attribute=es_value";			
			String  fr_valueOr hint="attribute=fr_value";			
			
			boolean a_condition hint="condition=equal,operand=en_valueOr"; 
			boolean b_condition hint="condition=equal,operand=es_valueOr"; 
			boolean c_condition hint="condition=equal,operand=fr_valueOr"; 	
			
			boolean firstCondition hint="condition=or,leftOperand=a_condition,rightOperand=b_condition";
			boolean secondCondition hint="condition=or,leftOperand=firstCondition,rightOperand=c_condition"; 
			
           /* int page hint = "page" ;
            int pageSize hint = "pageSize" ;
            int totalPages hint = "totalPages" ;*/
        }

        Service Multi_lang_values_viewService {
            > @Multi_lang_values_viewRepository
            List<@Multi_lang_values_viewVO> getAllMulti_lang_values_viewService(@Multi_lang_values_viewVO multi_lang_values_viewVO);
            List<@Multi_lang_values_viewVO> searchMulti_lang_values_viewService(@Multi_lang_values_viewVO multi_lang_values_viewVO);
        }
		DataTransferObject Get_screen_codeInVO {
			Date p_business_date;
			String p_bank_code;
			String p_operation_code;
			String p_langue;
		}
		DataTransferObject Get_screen_codeOutVO {
			String p_screen_code;
			Collection <Changed_fields_columnsVO> p_changed_fields_col_curs;
			Collection <Key_fields_col_recordVO> p_key_fields_col_curs;
			String p_msg_error;
			String p_return_code;
		}
		DataTransferObject Get_blocked_operationsInVO {
			Date p_business_date;
			String p_bank_code;
			String p_operation_name;
			String p_screen_code;
			String p_service_name;
			String p_langue;
		}
		DataTransferObject Get_blocked_operationsOutVO {
			Collection <Maker_checker_id_recordVO> p_maker_checker_id_cursor;
			String p_msg_error;
			String p_return_code;
		}
		DataTransferObject Delete_restricted_fieldsInVO {
			Date p_business_date;
			String p_bank_code;
			String p_group_code;
			String p_operation_code;
			BigDecimal p_screen_code;
			String p_langue;
		}
		DataTransferObject Delete_restricted_fieldsOutVO {
			String p_msg_error;
			String p_return_code;
		}
		DataTransferObject Get_operation_bank_codeInVO {
			Date p_business_date;
			String p_bank_code;
			String p_operation_name;
			String p_langue;
		}
		DataTransferObject Get_operation_bank_codeOutVO {
			String p_bank_code_field;
			String p_msg_error;
			String p_return_code;
		}
		
		
		DataTransferObject Changed_fields_columnsVO {
           String column_name;
         }
		 DataTransferObject Key_fields_col_recordVO {
           String field_name;
		 }
		 DataTransferObject Maker_checker_id_recordVO {
           String maker_checker_id;
		   String operation_name;
           String key_fields;
           String blocked_key_fields;
		 }

		Entity Blocked_operations_link
		{
			databaseTable="Blocked_operations_link"
			 !auditable
			 !optimisticLocking
			 scaffold
			 String operation_name key length="64";
			 String screen_code key length="64";
			 String key_fields length="512" nullable;
			 String blocked_operation_name key length="64";
			 String blocked_screen_code key length="64";
			 String blocked_key_fields length="512" nullable;
			 String private_tlv_data databaseColumn="private_tlv_data" length="1024" nullable;
		Repository Blocked_operations_linkRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Blocked_operations_linkVO { 
			 String  operation_name;
			 String  screen_code;
			 String key_fields;
			 String  blocked_operation_name;
			 String  blocked_screen_code;
			 String blocked_key_fields;
			 String  private_tlv_data;
		}
		Service Blocked_operations_linkService{ 
			 > @Blocked_operations_linkRepository
			 String createBlocked_operations_linkService(@Blocked_operations_linkVO blocked_operations_linkVO);
			 String updateBlocked_operations_linkService(@Blocked_operations_linkVO blocked_operations_linkVO);
			 String deleteBlocked_operations_linkService(@Blocked_operations_linkVO blocked_operations_linkVO);
			 List<@Blocked_operations_linkVO> getAllBlocked_operations_linkService();
			 List<@Blocked_operations_linkVO> searchBlocked_operations_linkService(@Blocked_operations_linkVO blocked_operations_linkVO);
		}
		Entity Operation_bank_field
		{
			databaseTable="Operation_bank_field"
			 !auditable
			 !optimisticLocking
			 scaffold
			 String operation_id key ;
			 String service_id key;
			 String bank_field length="64" nullable;
		Repository Operation_bank_fieldRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		
		DataTransferObject Operation_bank_fieldVO { 
			 String operation_id;
			 String service_id;
			 String bank_field;
		}
		Service Operation_bank_fieldService{ 
			 > @Operation_bank_fieldRepository
			 String createOperation_bank_fieldService(@Operation_bank_fieldVO operation_bank_fieldVO);
			 String updateOperation_bank_fieldService(@Operation_bank_fieldVO operation_bank_fieldVO);
			 String deleteOperation_bank_fieldService(@Operation_bank_fieldVO operation_bank_fieldVO);
			 List<@Operation_bank_fieldVO> getAllOperation_bank_fieldService();
			 List<@Operation_bank_fieldVO> searchOperation_bank_fieldService(@Operation_bank_fieldVO operation_bank_fieldVO);
		}
		
		    /**************************** Ldap_param_by_bank ****************************/
		Entity Ldap_param_by_bank
		{
		databaseTable="Ldap_param_by_bank"
		 auditable
		 !optimisticLocking
		 scaffold
		 String bank_code databaseColumn="bank_code" hint="dataAccess=Bank" databaseType="CHAR(6)" key;
		 String status_ldap databaseColumn="status_ldap" databaseType="CHAR(1)" nullable;
		 String ldap_url databaseColumn="ldap_url" length="80";
		 String ldap_base databaseColumn="ldap_base" length="300";
		 String domaine_name databaseColumn="domaine_name" length="80" nullable;
		 String group_search_base databaseColumn="group_search_base" length="300"nullable;
		 String manager_id databaseColumn="manager_id" length="100";
		 String manager_password databaseColumn="manager_password" length="100";
		 Clob mapped_profiles databaseColumn = "mapped_profiles"  nullable;
		Repository Ldap_param_by_bankRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Ldap_param_by_bankVO { 
		 String  bank_code;
		 String  status_ldap;
		 String  ldap_url;
		 String  ldap_base;
		 String  domaine_name;
		 String  group_search_base;
		 String  manager_id;
		 String  manager_password;
		 Clob  mapped_profiles;
		}
		Service Ldap_param_by_bankService{ 
		 > @Ldap_param_by_bankRepository
		 > @BankService
		 String createLdap_param_by_bankService(@Ldap_param_by_bankVO ldap_param_by_bankVO);
		 String updateLdap_param_by_bankService(@Ldap_param_by_bankVO ldap_param_by_bankVO);
		 String deleteLdap_param_by_bankService(@Ldap_param_by_bankVO ldap_param_by_bankVO);
		 List<@Ldap_param_by_bankVO> getAllLdap_param_by_bankService();
		 List<@Ldap_param_by_bankVO> searchLdap_param_by_bankService(@Ldap_param_by_bankVO ldap_param_by_bankVO);
		 List<String> findAllLdapProfilesService(String manager_id, String manager_password,
			String ldap_url, String ldap_base);
		 // Map<String, Object> loadDependencies(Map<String, Object> criterias) hint ="Dependency1=Bank";	
		 }

				
		
	Service Pcrd_flex_allowed_da_opService 
		{
			hint="jpubPackage=PCRD_FLEX_ALLOWED_DA_OP,Property1=jpub_datasource"
			@Perform_allowed_da_rud_opOutVO perform_allowed_da_rud_op(@Perform_allowed_da_rud_opInVO perform_allowed_da_rud_opInVO );
		}
		
		DataTransferObject Perform_allowed_da_rud_opInVO 
		{
			String p_operation;
			Collection<Allowed_da_bank_typeVO> p_list_da hint="collection=list_allowed_da_bank_type,object=allowed_da_bank_type";
			String p_language_code;
		}
		
		
		DataTransferObject Allowed_da_bank_typeVO{
			String  bank_code;                
			BigDecimal  data_access_id;      
			String  wording;            
		}
		
		DataTransferObject Perform_allowed_da_rud_opOutVO 
		{
			String p_return_code;
			String p_error_description;
			String p_msg_error;
		}


		Entity Allowed_da_by_bank
		{
			databaseTable="Allowed_da_by_bank"
			auditable
			!optimisticLocking
			scaffold
			String bank_code  length="6"    key;
			BigDecimal data_access_id databaseType="NUMBER(10,0)" key;
			String wording databaseColumn="wording" length="32" nullable;
			String multi_lang_id databaseColumn="multi_lang_id" databaseType="NUMBER(10,0)" nullable;
			Repository Allowed_da_by_bankRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 

		DataTransferObject Allowed_da_by_bankVO 
		{ 
			String      bank_code;
			BigDecimal  data_access_id;
			String      wording  ;
		}

		Service Allowed_da_by_bankService
		{ 
			> @Allowed_da_by_bankRepository
			String createAllowed_da_by_bankService(@Allowed_da_by_bankVO allowed_da_by_bankVO);
			String updateAllowed_da_by_bankService(@Allowed_da_by_bankVO allowed_da_by_bankVO);
			String deleteAllowed_da_by_bankService(@Allowed_da_by_bankVO allowed_da_by_bankVO);
			List<@Allowed_da_by_bankVO> getAllAllowed_da_by_bankService();
			List<@Allowed_da_by_bankVO> searchAllowed_da_by_bankService(@Allowed_da_by_bankVO allowed_da_by_bankVO);
			Map<String,Object> loadDependencies(Map<String, Object> criterias) hint="Dependency1=Bank,Dependency2=Data_access";
			String processOperations(com.google.gson.JsonObject mapVO) hint="multiOperations,Entity1=Allowed_da_by_bank";
		}
		Entity User_context
		{
		databaseTable="User_context"
		 !auditable
		 !optimisticLocking
		  scaffold
		-@ Users fk_user_context key hint="BaseColumn1=user_id"fetch="lazy";
		 String context_key key length="15";
		 String context_value databaseColumn="context_value" length="4000" nullable;

		Repository User_contextRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject User_contextVO { 
		 Long  user_id;
		 String  context_key;
		 String  context_value;
		}
		Service User_contextService{ 
		 > @User_contextRepository
		 String createUser_contextService(@User_contextVO user_contextVO);
		 String updateUser_contextService(@User_contextVO user_contextVO);
		 String deleteUser_contextService(@User_contextVO user_contextVO);
		 List<@User_contextVO> getAllUser_contextService();
		 List<@User_contextVO> searchUser_contextService(@User_contextVO user_contextVO);
		 }
		Service UserPreferencesService {
			> @User_contextRepository
			List<@User_contextVO> saveUserPreferences(List<@User_contextVO> user_preferences);
			List<@User_contextVO> searchUserPreferences(@User_contextVO user_contextVO);
		}		 
 /**************************** Begin Currency_table ****************************/ Entity Currency_table {
            databaseTable = "Currency_table" auditable 
            ! optimisticLocking
            scaffold
            String currency_code key length = "3";
            String currency_code_alpha databaseColumn = "currency_code_alpha" length = "3" nullable;
            String currency_name databaseColumn = "currency_name" length = "28" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            String currency_exponent databaseColumn = "currency_exponent" databaseType = "NUMBER(1,0)" nullable;
            String currency_exponent_2 databaseColumn = "currency_exponent_2" databaseType = "NUMBER(1,0)" nullable;
            String conversion_mode databaseColumn = "conversion_mode" length = "1" nullable;

            Repository Currency_tableRepository {
                findByKeys;
                findByKey;
                findByCondition; 
                findByCriteria;
            }
        }

        DataTransferObject Currency_tableVO {
            String currency_code ; String currency_code_alpha ; String currency_name ; String status ; String currency_exponent ; String
            currency_exponent_2 ; String conversion_mode ;
			 Collection < String > currency_codeCollection hint = "op=in,issearch,column_entity=currency_code" ;
      
        }

        Service Currency_tableService {
            > @Currency_tableRepository
            String createCurrency_tableService(@Currency_tableVO currency_tableVO);
            String updateCurrency_tableService(@Currency_tableVO currency_tableVO);
            String deleteCurrency_tableService(@Currency_tableVO currency_tableVO);
            List<@Currency_tableVO> getAllCurrency_tableService();
            List<@Currency_tableVO> searchCurrency_tableService(@Currency_tableVO currency_tableVO);
        }

        /****************** Branch_groups ************************/ Entity Branch_groups {
            databaseTable = "Branch_groups" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String group_code key length = "3";
            - @Bank fk_branch_groups_bc key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String group_label databaseColumn = "group_label" length = "30" nullable;
            String account_number databaseColumn = "account_number" length = "24" nullable;
            String key_account databaseColumn = "key_account" length = "2" nullable;
            - @Currency_table fk_branch_groups_cc hint = "BaseColumn1=currency_code" nullable fetch = "lazy";

            Repository Branch_groupsRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Branch_groupsVO {
            String bank_code ; String group_code ; String group_label ; String account_number ; String key_account ; String currency_code ;
        }

        Service Branch_groupsService {
            hint = "ref1=currency_tableService,
       		   ref2=bankService"
            > @Branch_groupsRepository
            String createBranch_groupsService(@Branch_groupsVO branch_groupsVO);
            String updateBranch_groupsService(@Branch_groupsVO branch_groupsVO);
            String deleteBranch_groupsService(@Branch_groupsVO branch_groupsVO);
            List<@Branch_groupsVO> getAllBranch_groupsService();
            List<@Branch_groupsVO> searchBranch_groupsService(@Branch_groupsVO branch_groupsVO);
        }

        /********************** Region ***************************/ Entity Region {
            databaseTable = "Region" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String region_code key length = "3";
            String country_code key length = "3";
            String language_code_1 length = "3" nullable;
            String language_code_2 length = "3" nullable;
            String language_code_3 length = "3" nullable;
            String language_code_4 length = "3" nullable;
            String remittance_period databaseColumn = "remittance_period" databaseType = "NUMBER(2,0)" nullable;
            String region_name databaseColumn = "region_name" length = "30" nullable;
            String region_name_1 databaseColumn = "region_name_1" length = "30" nullable;
            String region_name_2 databaseColumn = "region_name_2" length = "30" nullable;
            String region_name_3 databaseColumn = "region_name_3" length = "30" nullable;
            String region_name_4 databaseColumn = "region_name_4" length = "30" nullable;

            Repository RegionRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject RegionVO {
            String country_code ; String region_code ; String region_name ; String region_name_1 ; String language_code_1 ; String region_name_2 ;
            String language_code_2 ; String region_name_3 ; String language_code_3 ; String region_name_4 ; String language_code_4 ; String
            remittance_period ;
        }

        Service RegionService {
            hint = "ref1=countryService,
       			   ref2=language_listService"
            > @RegionRepository
            String createRegionService(@RegionVO regionVO);
            String updateRegionService(@RegionVO regionVO);
            String deleteRegionService(@RegionVO regionVO);
            List<@RegionVO> getAllRegionService();
            List<@RegionVO> searchRegionService(@RegionVO regionVO);
        }

        /********************** Branch ***************************/ Entity Branch {
            cache databaseTable = "Branch" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String branch_code key length = "6";
            - @Bank fk_branch_01 key hint = "BaseColumn1=bank_code";
            String grouping_code length = "3" nullable;
            String branch_name databaseColumn = "branch_name" length = "40" nullable;
            String abrev_name databaseColumn = "abrev_name" length = "15" nullable;
            String address_1 databaseColumn = "address_1" length = "64" nullable;
            String address_2 databaseColumn = "address_2" length = "64" nullable;
            String address_3 databaseColumn = "address_3" length = "64" nullable;
            String address_4 databaseColumn = "address_4" length = "64" nullable;
            String zip_code length = "10" nullable;
            String city_code length = "5" nullable;
            String region_code length = "3" nullable;
            String country_code length = "3" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String fax_number databaseColumn = "fax_number" length = "20" nullable;
            String mail databaseColumn = "email" length = "64" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;
            String contact_name databaseColumn = "contact_name" length = "40" nullable;
            String contact_phone databaseColumn = "contact_phone" length = "20" nullable;
            String renew_print_delay databaseColumn = "renew_print_delay" databaseType = "NUMBER(2,0)" nullable;
            String account_number databaseColumn = "account_number" length = "24" nullable;
            String key_account databaseColumn = "key_account" length = "2" nullable;
            String currency_code length = "3" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            Date status_date databaseColumn = "status_date" nullable;
			String region_name databaseColumn = "region_name" length = "40" nullable;
			String city_name databaseColumn = "city_name" length = "32" nullable;
			
            Repository BranchRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject BranchVO {
            String bank_code ; String branch_code ; String branch_name; String abrev_name ; String grouping_code ; String address_1 ; String address_2 ; String address_3 ;
            String address_4 ; String zip_code ; String city_code ; String region_code ; String country_code ; String phone_1 ; String phone_2 ; String
            fax_number ; String mail ; String web_url ; String contact_name ; String contact_phone ; String renew_print_delay ; String account_number ;
            String region_name; String city_name;
			String key_account ; String currency_code ; String status ; Date status_date ; Collection < String > branchColVO ;
        	Collection < String > branch_codeCollection hint = "op=in,issearch,column_entity=branch_code,PK" ;
        	
        	String skip_da hint ="issearch,skip"; //used to skip dataFilter
		}

        Service BranchService {
            
            > @BranchRepository
            String createBranchService(@BranchVO branchVO);
            String updateBranchService(@BranchVO branchVO);
            String deleteBranchService(@BranchVO branchVO);
            List<@BranchVO> getAllBranchService();
            List<@BranchVO> searchBranchService(@BranchVO branchVO);
        }
		
		 /********************** Branch without DATA ACCESS ***************************/ Entity Branch_spec {
            cache databaseTable = "Branch" auditable
            ! optimisticLocking
            scaffold
            String branch_code key length = "6";
            String bank_code key databaseType="CHAR(6)";
            String grouping_code length = "3" nullable;
            String branch_name databaseColumn = "branch_name" length = "40" nullable;
            String abrev_name databaseColumn = "abrev_name" length = "15" nullable;
        /**  String address_1 databaseColumn = "address_1" length = "64" nullable;
            String address_2 databaseColumn = "address_2" length = "64" nullable;
            String address_3 databaseColumn = "address_3" length = "64" nullable;
            String address_4 databaseColumn = "address_4" length = "64" nullable;
            String zip_code length = "10" nullable;
            String city_code length = "5" nullable;
            String region_code length = "3" nullable;
            String country_code length = "3" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String fax_number databaseColumn = "fax_number" length = "20" nullable;
            String mail databaseColumn = "email" length = "64" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;
            String contact_name databaseColumn = "contact_name" length = "40" nullable;
            String contact_phone databaseColumn = "contact_phone" length = "20" nullable;
            String renew_print_delay databaseColumn = "renew_print_delay" databaseType = "NUMBER(2,0)" nullable;
            String account_number databaseColumn = "account_number" length = "24" nullable;
            String key_account databaseColumn = "key_account" length = "2" nullable;
            String currency_code length = "3" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            Date status_date databaseColumn = "status_date" nullable;  **/

            Repository Branch_specRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Branch_specVO {
            String bank_code ; String branch_code ; String branch_name; String abrev_name ; String grouping_code ;/*** String address_1 ; String address_2 ; String address_3 ;
            String address_4 ; String zip_code ; String city_code ; String region_code ; String country_code ; String phone_1 ; String phone_2 ; String
            fax_number ; String mail ; String web_url ; String contact_name ; String contact_phone ; String renew_print_delay ; String account_number ;
            String key_account ; String currency_code ; String status ; Date status_date ; Collection < String > branchColVO ;
        	Collection < String > branch_codeCollection hint = "op=in,issearch,column_entity=branch_code,PK" ;
        	
        	String skip_da hint ="issearch,skip"; //used to skip dataFilter
			***/
		}

        Service Branch_specService {
            
            > @Branch_specRepository
            List<@Branch_specVO> searchBranch_specService(@Branch_specVO branch_specVO);
        }


        /*********************** Branch_addendum ****************************/ Entity Branch_addendum {
            databaseTable="Branch_addendum"
            auditable
            !optimisticLocking
            scaffold
            String bank_code key databaseType="CHAR(6)";
            String branch_code key databaseType="CHAR(6)";
            String tax_id_number databaseColumn="tax_id_number" length="40" nullable;
            String channel_number databaseColumn="channel_number" length="15" nullable;
            String direct_sale_agent databaseColumn="direct_sale_agent" length="15" nullable;
            String corporation_type databaseColumn="corporation_type" databaseType="CHAR(1)" nullable;
            String default_posting_id databaseColumn="default_posting_id" length="15" nullable;
            String posting_criteria_id databaseColumn="posting_criteria_id" length="15" nullable;
            String contract_duration databaseColumn="contract_duration" databaseType="NUMBER(3,0)" nullable;
            Date agreement_date databaseColumn="agreement_date" nullable;
            Date expiry_date databaseColumn="expiry_date" nullable;
            String profile_code databaseColumn="profile_code" length="6" nullable;
            String settlement_mode databaseColumn="settlement_mode" length="15" nullable;
            String settlement_period databaseColumn="settlement_period" length="15" nullable;
            String bank_identification_code databaseColumn="bank_identification_code" length="11" nullable;
            String sort_code databaseColumn="sort_code" length="6" nullable;
            String national_clearing_code databaseColumn="national_clearing_code" length="20" nullable;
            Repository Branch_addendumRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
            } 
            DataTransferObject Branch_addendumVO { 
            String  bank_code;
            String  branch_code;
            String  tax_id_number;
            String  channel_number;
            String  direct_sale_agent;
            String  corporation_type;
            String  default_posting_id;
            String  posting_criteria_id;
            String  contract_duration;
            Date  agreement_date;
            Date  expiry_date;
            String  profile_code;
            String  settlement_mode;
            String  settlement_period;
            String  bank_identification_code;
            String  sort_code;
            String  national_clearing_code;

            }
            Service Branch_addendumService{ 
            > @Branch_addendumRepository
            String createBranch_addendumService(@Branch_addendumVO branch_addendumVO);
            String updateBranch_addendumService(@Branch_addendumVO branch_addendumVO);
            String deleteBranch_addendumService(@Branch_addendumVO branch_addendumVO);
            List<@Branch_addendumVO> getAllBranch_addendumService();
            List<@Branch_addendumVO> searchBranch_addendumService(@Branch_addendumVO branch_addendumVO);

            }

        /*********************** City ****************************/ Entity City {
            databaseTable = "City" auditable
            hint = "cacheNotifier,cacheFamily=Platform"
            ! optimisticLocking
            scaffold
            String city_code key length = "5";
            String region_code length = "3";
            - @Country fk_city_01 key hint = "BaseColumn1=country_code" fetch = "lazy";
            String city_name databaseColumn = "city_name" length = "30" nullable;
            String city_name_1 databaseColumn = "city_name_1" length = "30" nullable;
            String city_name_2 databaseColumn = "city_name_2" length = "30" nullable;
            String city_name_3 databaseColumn = "city_name_3" length = "30" nullable;
            String city_name_4 databaseColumn = "city_name_4" length = "30" nullable;
            String tzname databaseColumn = "tzname" length = "64" nullable;
            String language_code_1 length = "3" nullable;
            String language_code_2 length = "3" nullable;
            String language_code_3 length = "3" nullable;
            String language_code_4 length = "3" nullable;

            Repository CityRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject CityVO {
            String country_code ; String city_code ; String city_name ; String tzname; String city_name_1 ; String language_code_1 ; String city_name_2 ; String
            language_code_2 ; String city_name_3 ; String language_code_3 ; String city_name_4 ; String language_code_4 ; String region_code ;
            CountryVO ref_country hint = "reference=fk_city_01" ;
			Collection < String > city_code_list hint="op=in,issearch,column_entity=city_code";
        }

        Service CityService {
           
            > @CityRepository
            > @CountryService
            String createCityService(@CityVO cityVO);
            String updateCityService(@CityVO cityVO);
            String deleteCityService(@CityVO cityVO);
            List<@CityVO> getAllCityService();
            List<@CityVO> searchCityService(@CityVO cityVO);
        }
        
                
         /*********************** Citylov ****************************/ 
            Entity Citylov {
            databaseTable = "City" auditable
            ! optimisticLocking
            scaffold
            String city_code  key length = "5";
            - @Country fk_country_code key hint = "BaseColumn1=country_code" fetch="lazy";
            String region_code length = "3";
            String city_name databaseColumn = "city_name" length = "30" nullable;
            String city_name_1 databaseColumn = "city_name_1" length = "30" nullable;
            String city_name_2 databaseColumn = "city_name_2" length = "30" nullable;
            String city_name_3 databaseColumn = "city_name_3" length = "30" nullable;
            String city_name_4 databaseColumn = "city_name_4" length = "30" nullable;
            String language_code_1 length = "3" nullable;
            String language_code_2 length = "3" nullable;
            String language_code_3 length = "3" nullable;
            String language_code_4 length = "3" nullable;

            Repository CitylovRepository {
                findByKeys;
                findByKey;
                findByCondition;//(PagingParameter pagingParameter);
                findByCriteria;
            }
        }

        DataTransferObject CitylovVO {
            String city_code ;String country_code ; String region_code ; String city_name ; String city_name_1 ; String language_code_1 ; String city_name_2 ; String
            language_code_2 ; String city_name_3 ; String language_code_3 ; String city_name_4 ; String language_code_4 ; 
            CountryVO ref_country hint ="reference=fk_country_code" ; 
            //int page hint = "page"; int pageSize hint = "pageSize"; int totalPages hint = "totalPages"; 
        }

        Service CitylovService {
            > @CitylovRepository
            
            String createCitylovService(@CitylovVO citylovVO);
            String updateCitylovService(@CitylovVO citylovVO);
            String deleteCitylovService(@CitylovVO citylovVO);
            List<@CitylovVO> getAllCitylovService();
            List<@CitylovVO> searchCitylovService(@CitylovVO citylovVO);
        }
        

        /********************** Country **************************/ Entity Country {
            databaseTable = "Country" cache auditable
            hint = "cacheNotifier,cacheFamily=location_params"
            ! optimisticLocking
            scaffold
            String country_code key length = "3";
            String wording databaseColumn = "wording" length = "32" nullable;
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording_1 databaseColumn = "wording_1" length = "32" nullable;
            String abrv_wording_1 databaseColumn = "abrv_wording_1" length = "16" nullable;
            String language_code_1 length = "3" nullable;
            String wording_2 databaseColumn = "wording_2" length = "32" nullable;
            String abrv_wording_2 databaseColumn = "abrv_wording_2" length = "16" nullable;
            String language_code_2 length = "3" nullable;
            String wording_3 databaseColumn = "wording_3" length = "32" nullable;
            String abrv_wording_3 databaseColumn = "abrv_wording_3" length = "16" nullable;
            String language_code_3 length = "3" nullable;
            String wording_4 databaseColumn = "wording_4" length = "32" nullable;
            String abrv_wording_4 databaseColumn = "abrv_wording_4" length = "16" nullable;
            String language_code_4 length = "3" nullable;
            String currency_code length = "3" nullable;
            String iso_country_alpha databaseColumn = "iso_country_alpha" length = "3" nullable;
            String visa_country_code databaseColumn = "visa_country_code" length = "4" nullable;
            String mci_epi_country_code databaseColumn = "mci_epi_country_code" length = "4" nullable;
            String amex_country_code databaseColumn = "amex_country_code" length = "4" nullable;
            String jcb_country_code databaseColumn = "jcb_country_code" length = "4" nullable;
            String dinners_country_code databaseColumn = "dinners_country_code" length = "4" nullable;
            String other_country_code databaseColumn = "other_country_code" length = "4" nullable;
            String bank_area databaseColumn = "bank_area" length = "4" nullable;
            String bank_sub_area databaseColumn = "bank_sub_area" length = "4" nullable;
            String visa_area databaseColumn = "visa_area" length = "4" nullable;
            String visa_sub_area databaseColumn = "visa_sub_area" length = "4" nullable;
            String mci_epi_area databaseColumn = "mci_epi_area" length = "4" nullable;
            String mci_epi_sub_area databaseColumn = "mci_epi_sub_area" length = "4" nullable;
            String jcb_area databaseColumn = "jcb_area" length = "4" nullable;
            String jcb_sub_area databaseColumn = "jcb_sub_area" length = "4" nullable;
            String amex_area databaseColumn = "amex_area" length = "4" nullable;
            String amex_sub_area databaseColumn = "amex_sub_area" length = "4" nullable;
            String dinners_area databaseColumn = "dinners_area" length = "4" nullable;
            String dinners_sub_area databaseColumn = "dinners_sub_area" length = "4" nullable;
            String other_area databaseColumn = "other_area" length = "4" nullable;
            String other_sub_area databaseColumn = "other_sub_area" length = "4" nullable;

            Repository CountryRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject CountryVO {
            String country_code ; String wording hint="multiLang"; String abrv_wording ; String wording_1 ; String abrv_wording_1 ; String language_code_1 ; String
            wording_2 ; String abrv_wording_2 ; String language_code_2 ; String wording_3 ; String abrv_wording_3 ; String language_code_3 ; String
            wording_4 ; String abrv_wording_4 ; String language_code_4 ; String currency_code ; String iso_country_alpha ; String visa_country_code
            ; String mci_epi_country_code ; String amex_country_code ; String jcb_country_code ; String dinners_country_code ; String
            other_country_code ; String bank_area ; String bank_sub_area ; String visa_area ; String visa_sub_area ; String mci_epi_area ; String
            mci_epi_sub_area ; String jcb_area ; String jcb_sub_area ; String amex_area ; String amex_sub_area ; String dinners_area ; String
            dinners_sub_area ; String other_area ; String other_sub_area ;
			Collection < String > country_codeCollection hint = "op=in,issearch,column_entity=country_code" ;
  
        }

        Service CountryService {
            hint = "ref1=currency_tableService,
       		   ref2=language_listService"
            > @CountryRepository
            String createCountryService(@CountryVO countryVO);
            String updateCountryService(@CountryVO countryVO);
            String deleteCountryService(@CountryVO countryVO);
            List<@CountryVO> getAllCountryService();
            List<@CountryVO> searchCountryService(@CountryVO countryVO);
        }

        /*********************** Bank ****************************/ Entity Bank {
            databaseTable = "Bank" cache auditable
            hint = "cacheNotifier,cacheFamily=ParSwitch"
            ! optimisticLocking
            scaffold
            String bank_code key length = "6";
            String category databaseColumn = "category" length = "2" nullable;
            String center_code length = "2" nullable;
            String bank_name databaseColumn = "bank_name" length = "40" nullable;
            String abrev_name databaseColumn = "abrev_name" length = "15" nullable;
            String address_1 databaseColumn = "address_1" length = "64" nullable;
            String address_2 databaseColumn = "address_2" length = "64" nullable;
            String address_3 databaseColumn = "address_3" length = "64" nullable;
            String address_4 databaseColumn = "address_4" length = "64" nullable;
            String zip_code length = "10" nullable;
            String city_code length = "5" nullable;
            String region_code length = "3" nullable;
            String country_code length = "3" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String fax_number databaseColumn = "fax_number" length = "20" nullable;
            String mail databaseColumn = "email" length = "40" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;
            String image databaseColumn = "image" nullable;
            String bank_member_ind databaseColumn = "bank_member_ind" length = "1" nullable;
            String checking_account_ind databaseColumn = "checking_account_ind" length = "1" nullable;
            String transmission_mode databaseColumn = "transmission_mode" length = "1" nullable;
            String multi_country_ind databaseColumn = "multi_country_ind" length = "1" nullable;
            String public_bank_id databaseColumn = "public_bank_id" length = "6" nullable;
            String contact_name databaseColumn = "contact_name" length = "40" nullable;
            String contact_phone databaseColumn = "contact_phone" length = "20" nullable;
            BigDecimal vat databaseColumn = "vat" databaseType = "NUMBER(5,2)" nullable;
            Date eff_date_vat databaseColumn = "eff_date_vat" nullable;
            BigDecimal former_vat databaseColumn = "former_vat" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal interest_vat databaseColumn = "interest_vat" databaseType = "NUMBER(5,2)" nullable;
            Date interest_eff_date_vat databaseColumn = "interest_eff_date_vat" nullable;
            BigDecimal interest_former_vat databaseColumn = "interest_former_vat" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal fund databaseColumn = "fund" databaseType = "NUMBER(5,2)" nullable;
            Date eff_date_fund databaseColumn = "eff_date_fund" nullable;
            BigDecimal former_fund databaseColumn = "former_fund" databaseType = "NUMBER(5,2)" nullable;
            String bank_currency_code length = "3" nullable;
            String zip_code_option databaseColumn = "zip_code_option" length = "1" nullable;
            String ctrl_client_len databaseColumn = "ctrl_client_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_client_key databaseColumn = "ctrl_client_key" length = "1" nullable;
            String ctrl_shadow_account_len databaseColumn = "ctrl_shadow_account_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_shadow_account_key databaseColumn = "ctrl_shadow_account_key" length = "1" nullable;
            String ctrl_account_len databaseColumn = "ctrl_account_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_account_key databaseColumn = "ctrl_account_key" length = "1" nullable;
            String ctrl_chain_len databaseColumn = "ctrl_chain_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_chain_key databaseColumn = "ctrl_chain_key" length = "1" nullable;
            String ctrl_merchant_len databaseColumn = "ctrl_merchant_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_merchant_key databaseColumn = "ctrl_merchant_key" length = "1" nullable;
            String ctrl_outlet_len databaseColumn = "ctrl_outlet_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_outlet_key databaseColumn = "ctrl_outlet_key" length = "1" nullable;
            String ctrl_onl databaseColumn = "ctrl_onl"  length = "12" nullable;
            String renew_print_delay databaseColumn = "renew_print_delay" databaseType = "NUMBER(2,0)" nullable;
            String delivery_default databaseColumn = "delivery_default" length = "1" nullable;
            String daily_autho_number_alert databaseColumn = "daily_autho_number_alert" length = "1" nullable;
            String account_number databaseColumn = "account_number" length = "24" nullable;
            String key_account databaseColumn = "key_account" length = "2" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            Date status_date databaseColumn = "status_date" nullable;
			String region_name databaseColumn = "region_name" length = "32" nullable;
			String city_name databaseColumn = "city_name" length = "32" nullable;
			
            Repository BankRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject BankVO {
            String bank_code ; String category ; String center_code ; String bank_name ; String abrev_name ; String address_1 ; String address_2 ; String
            address_3 ; String address_4 ; String city_code ; String zip_code ; String region_code ; String country_code ; String phone_1 ; String
            phone_2 ; String fax_number ; String mail ; String web_url ; String image ; String bank_member_ind ; String checking_account_ind ; String
            transmission_mode ; String multi_country_ind ; String public_bank_id ; String contact_name ; String contact_phone ; BigDecimal vat ; Date
            eff_date_vat ; BigDecimal former_vat ; BigDecimal interest_vat ; Date interest_eff_date_vat ; BigDecimal interest_former_vat ;
            BigDecimal fund ; Date eff_date_fund ; BigDecimal former_fund ; String bank_currency_code ; String zip_code_option ; String
            ctrl_client_len ; String ctrl_client_key ; String ctrl_shadow_account_len ; String ctrl_shadow_account_key ; String ctrl_account_len
            ; String ctrl_account_key ; String ctrl_chain_len ; String ctrl_chain_key ; String ctrl_merchant_len ; String ctrl_merchant_key ; 
            String region_name; String city_name;
			String ctrl_outlet_len ; String ctrl_outlet_key ; 	String ctrl_onl; String renew_print_delay ; String delivery_default ; String daily_autho_number_alert ;
            String account_number ; String key_account ; String status ; Date status_date ; Collection < String > bankColVO ; Date createdDate hint =
            "order1=Asc" ;
			 Collection < String > bank_codeCollection hint = "op=in,issearch,column_entity=bank_code" ;
      
        }

        Service BankService {
            > @BankRepository
            String createBankService(@BankVO bankVO);
            String updateBankService(@BankVO bankVO);
            String deleteBankService(@BankVO bankVO);
            List<@BankVO> getAllBankService();
            List<@BankVO> searchBankService(@BankVO bankVO);
        }

        /****************** Language_list ************************/ 
        Entity Language_list {
            databaseTable = "Language_list" cache auditable
            ! optimisticLocking
            scaffold
            String language_code key length = "3";
            String language_code_639 databaseColumn = "language_code_639" length = "2" nullable;
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;
            

            Repository Language_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Language_listVO {
            String language_code ; String language_code_639 ; String abrv_wording hint="multiLang"; String wording hint="multiLang"; String data_capture_mode ; 
        }

        Service Language_listService {
            > @Language_listRepository
            String createLanguage_listService(@Language_listVO language_listVO);
            String updateLanguage_listService(@Language_listVO language_listVO);
            String deleteLanguage_listService(@Language_listVO language_listVO);
            List<@Language_listVO> getAllLanguage_listService();
            List<@Language_listVO> searchLanguage_listService(@Language_listVO language_listVO);
        }

        Entity Department {
            databaseTable = "Department" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String department_code key length = "3";
            - @Bank fk_department_bc key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String departmenet_name databaseColumn = "departmenet_name" length = "30" nullable;
            String department_description databaseColumn = "department_description" length = "120" nullable;
            String parent_departmenet_code databaseColumn = "parent_departmenet_code" length = "3" nullable;
            String collection_indicator databaseColumn = "collection_indicator" length = "1" nullable;
            String automatic_case_allocation databaseColumn = "automatic_case_allocation" length = "1" nullable;
            

            Repository DepartmentRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject DepartmentVO {
            String bank_code ; String department_code ; String departmenet_name hint = "multiLang" ; String department_description hint =
            "multiLang" ; String parent_departmenet_code ; String collection_indicator ; String automatic_case_allocation ; 
            
        }

        Service DepartmentService {
            > @DepartmentRepository
            String createDepartmentService(@DepartmentVO departmentVO);
            String updateDepartmentService(@DepartmentVO departmentVO);
            String deleteDepartmentService(@DepartmentVO departmentVO);
            List<@DepartmentVO> getAllDepartmentService();
            List<@DepartmentVO> searchDepartmentService(@DepartmentVO departmentVO);
            /*Map<String, Object> loadDependencies(Map<String, Object> criterias) hint ="Dependency1=Bank,Dependency2=Department";*/
            
        }

        /******************** Center **************************/ Entity Center {
            databaseTable = "Center" auditable
            hint = "cacheNotifier,cacheFamily=ParSwitchGenParam"
            ! optimisticLocking
            scaffold
            String center_code key length = "2";
            String grouping_code databaseColumn = "grouping_code" length = "1" nullable;
            String center_name databaseColumn = "center_name" length = "30" nullable;
            - @Network fk_center_nc hint = "BaseColumn1=network_code" nullable fetch = "lazy";
            String multi_country_option databaseColumn = "multi_country_option" length = "1" nullable;
            - @Country fk_center_ccd hint = "BaseColumn1=country_code" nullable fetch = "lazy";
            String country_code_alpha databaseColumn = "country_code_alpha" length = "3" nullable;
            - @Currency_table fk_center_ccy hint = "BaseColumn1=currency_code" nullable fetch = "lazy";
            String currency_code_alpha databaseColumn = "currency_code_alpha" length = "3" nullable;

            Repository CenterRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject CenterVO {
            String center_code ; String grouping_code ; String center_name ; String network_code ; String multi_country_option ; String country_code
            ; String country_code_alpha ; String currency_code ; String currency_code_alpha ;
        }

        Service CenterService {
           
            > @CenterRepository
            String createCenterService(@CenterVO centerVO);
            String updateCenterService(@CenterVO centerVO);
            String deleteCenterService(@CenterVO centerVO);
            List<@CenterVO> getAllCenterService();
            List<@CenterVO> searchCenterService(@CenterVO centerVO);
        }

        /******************* Zip Code *************************/ Entity Zip_code {
            databaseTable = "Zip_code" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String zip_code key length = "10";//             String city_code key length = "5"  ;
            //             String country_code key length = "3"  ;
            - @City fk_zip_code_01 key hint = "BaseColumn1=city_code,BaseColumn2=country_code" fetch = "lazy";
            String description databaseColumn = "description" length = "30" nullable;

            Repository Zip_codeRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Zip_codeVO {
            String country_code ; String zip_code ; String city_code ; String description ; CityVO ref_city hint = "reference=fk_zip_code_01" ;
        }

        Service Zip_codeService {
            hint = "ref1=cityService,
       			ref2=countryService"
            > @Zip_codeRepository
            > @CityService
            String createZip_codeService(@Zip_codeVO zip_codeVO);
            String updateZip_codeService(@Zip_codeVO zip_codeVO);
            String deleteZip_codeService(@Zip_codeVO zip_codeVO);
            List<@Zip_codeVO> getAllZip_codeService();
            List<@Zip_codeVO> searchZip_codeService(@Zip_codeVO zip_codeVO);
        }
		/******************************************* Network ***********************************************/

		Entity Network {
            databaseTable = "Network" cache auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String network_code key length = "2";
            String network_label databaseColumn = "network_label" length = "15" nullable;
            String presentment_time_limit databaseColumn = "presentment_time_limit" databaseType = "NUMBER(3,0)" nullable;
            String credit_primary_port length = "6" nullable;
            String credit_alternate_port length = "6" nullable;
            String debit_primary_port length = "6" nullable;
            String debit_alternate_port length = "6" nullable;
            String virtual_bank_code length = "6" nullable;

            Repository NetworkRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject NetworkVO {
            String network_code ; String network_label ; String presentment_time_limit ; String credit_primary_port ; String
            credit_alternate_port ; String debit_primary_port ; String debit_alternate_port ; String virtual_bank_code ;
	    Collection < String > network_codeCollection hint = "op=in,issearch,column_entity=network_code" ;
        }

        Service NetworkService {
            hint = "ref1=resourcesService,
        	  ref2=bankService"
            > @NetworkRepository
            String createNetworkService(@NetworkVO networkVO);
            String updateNetworkService(@NetworkVO networkVO);
            String deleteNetworkService(@NetworkVO networkVO);
            List<@NetworkVO> getAllNetworkService();
            List<@NetworkVO> searchNetworkService(@NetworkVO networkVO);
        }


        
        
      /******************************************* Comms_list ***********************************************/
        
        
        Entity Comms_list {
            databaseTable = "Comms_list" auditable
            ! optimisticLocking
            scaffold
            String comms_id key length = "2";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;

            Repository Comms_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Comms_listVO {
            String comms_id ; String abrv_wording ; String wording ; String data_capture_mode ;
        }

        Service Comms_listService {
            > @Comms_listRepository
            String createComms_listService(@Comms_listVO comms_listVO);
            String updateComms_listService(@Comms_listVO comms_listVO);
            String deleteComms_listService(@Comms_listVO comms_listVO);
            List<@Comms_listVO> getAllComms_listService();
            List<@Comms_listVO> searchComms_listService(@Comms_listVO comms_listVO);
        }

        /************************Markup_index**********************************/ Entity Markup_index {
            databaseTable = "Markup_index" auditable
            ! optimisticLocking
            scaffold
            String markup_fee_index key length = "2";
            String bank_code key hint="dataAccess=Bank" length = "6";
            //- @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
 			- Set<@Markup_currency_index> markup_children cascade = "all-delete-orphan" opposite fk_markup_fee_index;

            Repository Markup_indexRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Markup_indexVO {
            String markup_fee_index ; String bank_code ; String abrv_wording ; String wording ;
            Collection< Markup_currency_indexVO > markup_children_col hint="Set=markup_children";
        }

        Service Markup_indexService {
            > @Markup_indexRepository
            //> @Markup_currency_indexRepository
            > @Markup_currency_indexService
            
            String createMarkup_indexService(@Markup_indexVO markup_indexVO);
            String updateMarkup_indexService(@Markup_indexVO markup_indexVO);
            String deleteMarkup_indexService(@Markup_indexVO markup_indexVO);
			String mergeMarkup_indexService(@Markup_indexVO markup_indexVO);
            List<@Markup_indexVO> getAllMarkup_indexService();
            List<@Markup_indexVO> searchMarkup_indexService(@Markup_indexVO markup_indexVO);
            
        }

        /************************Markup_currency_index**********************************/ Entity Markup_currency_index {
            databaseTable = "Markup_currency_index" auditable
            ! optimisticLocking
            scaffold
            //String markup_fee_index key length = "2";
          //  String rowID key;
            - @Currency_table fk_markup_currency_index_01 key hint = "BaseColumn1=currency_code" fetch = "lazy";
            //- @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";
            - @Markup_index fk_markup_fee_index key hint= "BaseColumn1=markup_fee_index,BaseColumn2=bank_code" opposite markup_children ;
            BigDecimal default_buying_rate databaseColumn = "default_buying_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal default_buying_fix databaseColumn = "default_buying_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal default_buying_min databaseColumn = "default_buying_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal default_buying_max databaseColumn = "default_buying_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal default_buying_grace databaseColumn = "default_buying_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal default_selling_rate databaseColumn = "default_selling_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal default_selling_fix databaseColumn = "default_selling_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal default_selling_min databaseColumn = "default_selling_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal default_selling_max databaseColumn = "default_selling_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal default_selling_grace databaseColumn = "default_selling_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal cash_buying_rate databaseColumn = "cash_buying_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal cash_buying_fix databaseColumn = "cash_buying_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal cash_buying_min databaseColumn = "cash_buying_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal cash_buying_max databaseColumn = "cash_buying_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal cash_buying_grace databaseColumn = "cash_buying_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal cash_selling_rate databaseColumn = "cash_selling_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal cash_selling_fix databaseColumn = "cash_selling_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal cash_selling_min databaseColumn = "cash_selling_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal cash_selling_max databaseColumn = "cash_selling_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal cash_selling_grace databaseColumn = "cash_selling_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal central_bank_buying_rate databaseColumn = "central_bank_buying_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal central_bank_buying_fix databaseColumn = "central_bank_buying_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal central_bank_buying_min databaseColumn = "central_bank_buying_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal central_bank_buying_max databaseColumn = "central_bank_buying_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal central_bank_buying_grace databaseColumn = "central_bank_buying_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal central_bank_selling_rate databaseColumn = "central_bank_selling_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal central_bank_selling_fix databaseColumn = "central_bank_selling_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal central_bank_selling_min databaseColumn = "central_bank_selling_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal central_bank_selling_max databaseColumn = "central_bank_selling_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal central_bank_selling_grace databaseColumn = "central_bank_selling_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal inter_transfer_buying_rate databaseColumn = "inter_transfer_buying_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal inter_transfer_buying_fix databaseColumn = "inter_transfer_buying_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal inter_transfer_buying_min databaseColumn = "inter_transfer_buying_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal inter_transfer_buying_max databaseColumn = "inter_transfer_buying_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal inter_transfer_buying_grace databaseColumn = "inter_transfer_buying_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal inter_transfer_selling_rate databaseColumn = "inter_transfer_selling_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal inter_transfer_selling_fix databaseColumn = "inter_transfer_selling_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal inter_transfer_selling_min databaseColumn = "inter_transfer_selling_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal inter_transfer_selling_max databaseColumn = "inter_transfer_selling_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal inter_transfer_selling_grace databaseColumn = "inter_transfer_selling_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal special_buying_rate databaseColumn = "special_buying_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal special_buying_fix databaseColumn = "special_buying_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal special_buying_min databaseColumn = "special_buying_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal special_buying_max databaseColumn = "special_buying_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal special_buying_grace databaseColumn = "special_buying_grace" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal special_selling_rate databaseColumn = "special_selling_rate" databaseType = "NUMBER(9,6)" nullable;
            BigDecimal special_selling_fix databaseColumn = "special_selling_fix" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal special_selling_min databaseColumn = "special_selling_min" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal special_selling_max databaseColumn = "special_selling_max" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal special_selling_grace databaseColumn = "special_selling_grace" databaseType = "NUMBER(18,3)" nullable;
            String rule_identifier databaseColumn = "rule_identifier" length = "3" nullable;
            String rounded_method_identifier databaseColumn = "rounded_method_identifier" length = "1" nullable;
            BigDecimal threshold_amount databaseColumn = "threshold_amount" databaseType = "NUMBER(18,3)" nullable;
			String country_verification databaseColumn="country_verification" databaseType="CHAR(1)" nullable;
			

            Repository Markup_currency_indexRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Markup_currency_indexVO {
            //String rowID ; 
            String currency_code ;String markup_fee_index ; String bank_code ; BigDecimal default_buying_rate ; BigDecimal default_buying_fix ;
            BigDecimal default_buying_min ; BigDecimal default_buying_max ; BigDecimal default_buying_grace ; BigDecimal default_selling_rate ;
            BigDecimal default_selling_fix ; BigDecimal default_selling_min ; BigDecimal default_selling_max ; BigDecimal
            default_selling_grace ; BigDecimal cash_buying_rate ; BigDecimal cash_buying_fix ; BigDecimal cash_buying_min ; BigDecimal
            cash_buying_max ; BigDecimal cash_buying_grace ; BigDecimal cash_selling_rate ; BigDecimal cash_selling_fix ; BigDecimal
            cash_selling_min ; BigDecimal cash_selling_max ; BigDecimal cash_selling_grace ; BigDecimal central_bank_buying_rate ; BigDecimal
            central_bank_buying_fix ; BigDecimal central_bank_buying_min ; BigDecimal central_bank_buying_max ; BigDecimal
            central_bank_buying_grace ; BigDecimal central_bank_selling_rate ; BigDecimal central_bank_selling_fix ; BigDecimal
            central_bank_selling_min ; BigDecimal central_bank_selling_max ; BigDecimal central_bank_selling_grace ; BigDecimal
            inter_transfer_buying_rate ; BigDecimal inter_transfer_buying_fix ; BigDecimal inter_transfer_buying_min ; BigDecimal
            inter_transfer_buying_max ; BigDecimal inter_transfer_buying_grace ; BigDecimal inter_transfer_selling_rate ; BigDecimal
            inter_transfer_selling_fix ; BigDecimal inter_transfer_selling_min ; BigDecimal inter_transfer_selling_max ; BigDecimal
            inter_transfer_selling_grace ; BigDecimal special_buying_rate ; BigDecimal special_buying_fix ; BigDecimal special_buying_min ;
            BigDecimal special_buying_max ; BigDecimal special_buying_grace ; BigDecimal special_selling_rate ; BigDecimal special_selling_fix
            ; BigDecimal special_selling_min ; BigDecimal special_selling_max ; BigDecimal special_selling_grace ; String rule_identifier ;
            String rounded_method_identifier ; BigDecimal threshold_amount ; String country_verification;
        }

        Service Markup_currency_indexService {
            hint = "ref1=currency_tableService,	ref2=markup_indexService"
            
            > @Markup_currency_indexRepository
            String createMarkup_currency_indexService(@Markup_currency_indexVO markup_currency_indexVO);
            String updateMarkup_currency_indexService(@Markup_currency_indexVO markup_currency_indexVO);
            String deleteMarkup_currency_indexService(@Markup_currency_indexVO markup_currency_indexVO);
            List<@Markup_currency_indexVO> getAllMarkup_currency_indexService();
            List<@Markup_currency_indexVO> searchMarkup_currency_indexService(@Markup_currency_indexVO markup_currency_indexVO);
        }

        /************************MCC_RANGE**********************************/ Entity Mcc_range {
            databaseTable = "Mcc_range" auditable
            hint = "cacheNotifier,cacheFamily=ParMCC"
            ! optimisticLocking
            scaffold
            String mcc_group key length = "4";
            String description databaseColumn = "description" length = "32" nullable;
            String description_1 databaseColumn = "description_1" length = "32" nullable;
            String description_2 databaseColumn = "description_2" length = "32" nullable;
            String description_3 databaseColumn = "description_3" length = "32" nullable;
            String description_4 databaseColumn = "description_4" length = "32" nullable;
            String language_code_1 length = "3" nullable;
            String language_code_2 length = "3" nullable;
            String language_code_3 length = "3" nullable;
            String language_code_4 length = "3" nullable;

            Repository Mcc_rangeRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Mcc_rangeVO {
            String mcc_group ; String description hint="multiLang" ; String description_1 ; String language_code_1 ; String description_2 ; String language_code_2 ;
            String description_3 ; String language_code_3 ; String description_4 ; String language_code_4 ;
        }

        Service Mcc_rangeService {
            hint = "ref1=language_listService"
            > @Mcc_rangeRepository
            String createMcc_rangeService(@Mcc_rangeVO mcc_rangeVO);
            String updateMcc_rangeService(@Mcc_rangeVO mcc_rangeVO);
            String deleteMcc_rangeService(@Mcc_rangeVO mcc_rangeVO);
            List<@Mcc_rangeVO> getAllMcc_rangeService();
            List<@Mcc_rangeVO> searchMcc_rangeService(@Mcc_rangeVO mcc_rangeVO);
        }

        /**********************************Mcc**********************************/ Entity Mcc {
            databaseTable = "Mcc" auditable
            hint = "cacheNotifier,cacheFamily=ParMCC"
            ! optimisticLocking
            scaffold
            String mcc_code key length = "4";
            String tcc databaseColumn = "tcc" length = "1" nullable;
            String description databaseColumn = "description" length = "60" nullable;
            String description_1 databaseColumn = "description_1" length = "32" nullable;
            String description_2 databaseColumn = "description_2" length = "32" nullable;
            String description_3 databaseColumn = "description_3" length = "32" nullable;
            String description_4 databaseColumn = "description_4" length = "32" nullable;
            String mcc_group length = "4" nullable;
            String mcc_group_visa databaseColumn = "mcc_group_visa" length = "4" nullable;
            String mcc_group_mci databaseColumn = "mcc_group_mci" length = "4" nullable;
            String mcc_group_europay databaseColumn = "mcc_group_europay" length = "4" nullable;
            String mcc_group_amex databaseColumn = "mcc_group_amex" length = "4" nullable;
            String mcc_group_jcb databaseColumn = "mcc_group_jcb" length = "4" nullable;
            String mcc_group_diners databaseColumn = "mcc_group_diners" length = "4" nullable;
            String language_code_1 length = "3" nullable;
            String language_code_2 length = "3" nullable;
            String language_code_3 length = "3" nullable;
            String language_code_4 length = "3" nullable;

            Repository MccRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject MccVO {
            String mcc_code ; String tcc ; String description ; String description_1 ; String language_code_1 ; String description_2 ; String
            language_code_2 ; String description_3 ; String language_code_3 ; String description_4 ; String language_code_4 ; String mcc_group ;
            String mcc_group_visa ; String mcc_group_mci ; String mcc_group_europay ; String mcc_group_amex ; String mcc_group_jcb ; String
            mcc_group_diners ;
        }

        Service MccService {
            hint = "ref1=language_listService,
			  ref2=mcc_rangeService"
            > @MccRepository
            String createMccService(@MccVO mccVO);
            String updateMccService(@MccVO mccVO);
            String deleteMccService(@MccVO mccVO);
            List<@MccVO> getAllMccService();
            List<@MccVO> searchMccService(@MccVO mccVO);
        }
        /************************Tcc**********************************/ 
        	Entity Tcc
			{
			databaseTable="Tcc"
			!auditable
			!optimisticLocking
 			scaffold
			String code_tcc key databaseType="CHAR(1)";
			String label_tcc databaseColumn="label_tcc" length="80" nullable;
			Repository TccRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
			} 
			
			DataTransferObject TccVO { 
 			String  code_tcc;
 			String  label_tcc;
			}
			
			Service TccService{ 
 			> @TccRepository
			String createTccService(@TccVO tccVO);
			String updateTccService(@TccVO tccVO);
			String deleteTccService(@TccVO tccVO);
			List<@TccVO> getAllTccService();
			List<@TccVO> searchTccService(@TccVO tccVO);
			}  

        /************************Addresses_type_list**********************************/ 
        Entity Addresses_type_list {
            databaseTable = "Addresses_type_list" 
            cache auditable
            ! optimisticLocking
            scaffold
            String address_type key length = "2";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch="lazy";
            String wording databaseColumn = "wording" length = "32" nullable;
            String address_type_flag databaseColumn = "address_type_flag" length = "1" nullable;
            String entity_concerned databaseColumn = "entity_concerned" length = "2" nullable;
            String link_search databaseColumn = "link_search" length = "2" nullable;
            

            Repository Addresses_type_listRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Addresses_type_listVO {
            String address_type ; String bank_code; String wording hint="multiLang"; String address_type_flag ; String entity_concerned ; String link_search ; 
            
            Collection < String >          addresses_type_listColVO ;
        }

        Service Addresses_type_listService {
            > @Addresses_type_listRepository
            String createAddresses_type_listService(@Addresses_type_listVO addresses_type_listVO);
            String updateAddresses_type_listService(@Addresses_type_listVO addresses_type_listVO);
            String deleteAddresses_type_listService(@Addresses_type_listVO addresses_type_listVO);
            List<@Addresses_type_listVO> getAllAddresses_type_listService();
            List<@Addresses_type_listVO> searchAddresses_type_listService(@Addresses_type_listVO addresses_type_listVO);
        }

        /************************Status_list**********************************/ 
        Entity Status_list {
            databaseTable = "Status_list" auditable
            ! optimisticLocking
            scaffold
            String status_code key length = "1";
			- @Bank fk_bank_code  key hint = "BaseColumn1=bank_code" fetch="lazy";
            String abrv_wording  databaseColumn = "abrv_wording" length = "16" nullable ;
            String wording  databaseColumn = "wording" length = "32" nullable;
            String normal_flag databaseColumn = "normal_flag" length = "1" nullable;
			String ch_entity databaseColumn="ch_entity" databaseType="CHAR(1)" nullable;
			String mc_entity databaseColumn="mc_entity" databaseType="CHAR(1)" nullable;
			String mt_entity databaseColumn="mt_entity" databaseType="CHAR(1)" nullable;
			String cl_entity databaseColumn="cl_entity" databaseType="CHAR(1)" nullable;
			String ol_entity databaseColumn="ol_entity" databaseType="CHAR(1)" nullable;
			String ca_entity databaseColumn="ca_entity" databaseType="CHAR(1)" nullable;
			String ct_entity databaseColumn="ct_entity" databaseType="CHAR(1)" nullable;
			String co_entity databaseColumn="co_entity" databaseType="CHAR(1)" nullable;
			String nl_entity databaseColumn="nl_entity" databaseType="CHAR(1)" nullable;
			String sa_entity databaseColumn="sa_entity" databaseType="CHAR(1)" nullable;
			String pb_entity databaseColumn="pb_entity" databaseType="CHAR(1)" nullable;
			String ta_entity databaseColumn="ta_entity" databaseType="CHAR(1)" nullable;
			String tp_entity databaseColumn="tp_entity" databaseType="CHAR(1)" nullable;
			String it_entity databaseColumn="it_entity" databaseType="CHAR(1)" nullable;
			String ba_entity databaseColumn="ba_entity" databaseType="CHAR(1)" nullable;
			String pa_entity databaseColumn="pa_entity" databaseType="CHAR(1)" nullable;
			String aa_entity databaseColumn="aa_entity" databaseType="CHAR(1)" nullable;
			String vh_entity databaseColumn="vh_entity" databaseType="CHAR(1)" nullable;
			String dv_entity databaseColumn="dv_entity" databaseType="CHAR(1)" nullable;
						
            Repository Status_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }
        DataTransferObject Status_listVO {
            String status_code ; 
			String bank_code; 
			String abrv_wording hint="multiLang"; 
			String wording hint="multiLang"; 
			String normal_flag;
			String  ch_entity;
			String  mc_entity;
			String  mt_entity;
			String  cl_entity;
			String  ol_entity;
			String  ca_entity;
			String  ct_entity;
			String  co_entity;
			String  nl_entity;
			String  sa_entity;
			String  pb_entity;
			String  ta_entity;
			String  tp_entity;
			String  it_entity;
			String  ba_entity;
			String  pa_entity;
			String  aa_entity;
			String  vh_entity;
			String  dv_entity;
			
			 			
			Collection < String > status_codeCollection hint = "op=in,issearch,column_entity=status_code" ;
        }
        Service Status_listService {
            > @Status_listRepository
            String createStatus_listService(@Status_listVO status_listVO);
            String updateStatus_listService(@Status_listVO status_listVO);
            String deleteStatus_listService(@Status_listVO status_listVO);
            List<@Status_listVO> getAllStatus_listService();
            List<@Status_listVO> searchStatus_listService(@Status_listVO status_listVO);
        }

        /************************Status_reason_list**********************************/ Entity Status_reason_list {
            databaseTable = "Status_reason_list" auditable
            ! optimisticLocking
            scaffold		
			
			- @Bank fk_status_reason_list_03 key hint = "BaseColumn1=bank_code" fetch = "lazy";
			String internal_reason hint="BaseColumn1=internal_reason" nullable;
            String reason_code key length = "2";
            String status_code databaseColumn="status_code" nullable;
            String entity_code databaseColumn = "entity_code" length = "2" nullable;
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String request_origin databaseColumn = "request_origin" length = "1" nullable;
			String reason_type databaseColumn="reason_type" databaseType="CHAR(1)" nullable;
	       -@ Action_list fk_status_reason_list_05 hint="BaseColumn1=authorization_response" nullable;
            String permitted_trx databaseColumn = "permitted_trx" length = "8" nullable;
	        String suspend_transactions databaseColumn="suspend_transactions" databaseType="CHAR(1)" nullable;
	        String load_reload databaseColumn="load_reload" databaseType="CHAR(1)" nullable;
	        String loyalty_accrual databaseColumn="loyalty_accrual" databaseType="CHAR(1)" nullable;
	        String loyalty_redemption databaseColumn="loyalty_redemption" databaseType="CHAR(1)" nullable;
	        String interest_accrual databaseColumn="interest_accrual" databaseType="CHAR(1)" nullable;
	        String interest_billing databaseColumn="interest_billing" databaseType="CHAR(1)" nullable;
	        String embossing databaseColumn="embossing" databaseType="CHAR(1)" nullable;
	        String revolving_to_full_charge databaseColumn="revolving_to_full_charge" databaseType="CHAR(1)" nullable;
	        String annual_fee_refund databaseColumn="annual_fee_refund" databaseType="CHAR(1)" nullable;
	        String replacement_request databaseColumn="replacement_request" databaseType="CHAR(1)" nullable;
	        String renewal_request databaseColumn="renewal_request" databaseType="CHAR(1)" nullable;
            String lost_stolen_casech databaseColumn="lost_stolen_casech" databaseType="CHAR(1)" nullable;
            String lost_stolen_case databaseColumn="lost_stolen_case" databaseType="CHAR(1)" nullable;
	        String lost_stolen_rep_option databaseColumn="lost_stolen_rep_option" databaseType="CHAR(1)" nullable;
	        String replacement_delay_in_days databaseColumn="replacement_delay_in_days" databaseType="NUMBER(3,0)" nullable;
	        String transaction_notif_network databaseColumn="transaction_notif_network" databaseType="CHAR(1)" nullable;
	        String visa_fraud_type databaseColumn="visa_fraud_type" databaseType="CHAR(2)" nullable;
	        String mc_fraud_type databaseColumn="mc_fraud_type" databaseType="CHAR(2)" nullable;
	        String amex_fraud_type databaseColumn="amex_fraud_type" databaseType="CHAR(2)" nullable;
	        String card_notif_network databaseColumn="card_notif_network" databaseType="CHAR(1)" nullable;
	        String operation databaseColumn="operation" databaseType="CHAR(1)" nullable;
	        String purge_days databaseColumn="purge_days" databaseType="NUMBER(3,0)" nullable;
	        String visa_action_code databaseColumn="visa_action_code" databaseType="CHAR(2)" nullable;
	        String visa_region databaseColumn="visa_region" databaseType="CHAR(1)" nullable;
	        String mc_reason_type databaseColumn="mc_reason_type" databaseType="CHAR(2)" nullable;
	        String mc_region databaseColumn="mc_region" databaseType="CHAR(2)" nullable;
	        String amex_reason_type databaseColumn="amex_reason_type" databaseType="CHAR(2)" nullable;
	        String status_reason_retained databaseColumn="status_reason_retained" databaseType="CHAR(1)" nullable;
			String settlement_order_index databaseColumn="settlement_order_index" nullable;
	        String sms_code databaseColumn="sms_code" databaseType="CHAR(4)" nullable;
	        String email_code databaseColumn="email_code" length="6" nullable;
	        String pin_mailer databaseColumn="pin_mailer" databaseType="CHAR(1)" nullable;
	        String pin_change databaseColumn="pin_change" databaseType="CHAR(1)" nullable;
	        String loan_force_closure databaseColumn="loan_force_closure" databaseType="CHAR(1)" nullable;
	        String status_reason_fee databaseColumn="status_reason_fee" databaseType="CHAR(1)" nullable;
	        BigDecimal fee_amount databaseColumn="fee_amount" databaseType="NUMBER(18,3)" nullable;
	       -@ Currency_table fk_status_reason_list_08 hint="BaseColumn1=fee_currency_code" nullable;
	        String fee_transaction_code databaseColumn="fee_transaction_code" databaseType="CHAR(3)" nullable;
	        String autho_resp_operation_prop databaseColumn="autho_resp_operation_prop" databaseType="CHAR(1)" nullable;
	        String prop_secondary_account_card databaseColumn="prop_secondary_account_card" databaseType="CHAR(1)" nullable;
	        String card_cancel_status_reason databaseColumn="card_cancel_status_reason" databaseType="CHAR(1)" nullable;
	        String replacement_fee_debit databaseColumn="replacement_fee_debit" databaseType="CHAR(1)" nullable;
	        String renewal_fees_debit databaseColumn="renewal_fees_debit" databaseType="CHAR(1)" nullable;
	        String plastic_fees_debit databaseColumn="plastic_fees_debit" databaseType="CHAR(1)" nullable;
	        String photo_fees_debit databaseColumn="photo_fees_debit" databaseType="CHAR(1)" nullable;
	        String membership_fees_debit databaseColumn="membership_fees_debit" databaseType="CHAR(1)" nullable;
	        String transaction_fees_debit databaseColumn="transaction_fees_debit" databaseType="CHAR(1)" nullable;
	        String card_insurance_fees_debit databaseColumn="card_insurance_fees_debit" databaseType="CHAR(1)" nullable;
	        String periodic_card_fees_debit databaseColumn="periodic_card_fees_debit" databaseType="CHAR(1)" nullable;
	        String pin_change_fees_debit databaseColumn="pin_change_fees_debit" databaseType="CHAR(1)" nullable;
	        String balance_inquiry_fees_debit databaseColumn="balance_inquiry_fees_debit" databaseType="CHAR(1)" nullable;
	        String replacement_fee_pre_paid databaseColumn="replacement_fee_pre_paid" databaseType="CHAR(1)" nullable;
	        String renewal_fees_pre_paid databaseColumn="renewal_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String plastic_fees_pre_paid databaseColumn="plastic_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String photo_fees_pre_paid databaseColumn="photo_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String membership_fees_pre_paid databaseColumn="membership_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String transaction_fees_pre_paid databaseColumn="transaction_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String card_insurance_fees_pre_paid databaseColumn="card_insurance_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String periodic_card_fees_pre_paid databaseColumn="periodic_card_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String pin_change_fees_pre_paid databaseColumn="pin_change_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String balance_inquiry_fees_pre_paid databaseColumn="balance_inquiry_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String top_up_fees_pre_paid databaseColumn="top_up_fees_pre_paid" databaseType="CHAR(1)" nullable;
	        String rep_fee_credit_and_charge databaseColumn="rep_fee_credit_and_charge" databaseType="CHAR(1)" nullable;
	        String renewal_fees_credit_and_charge databaseColumn="renewal_fees_credit_and_charge" databaseType="CHAR(1)" nullable;
	        String plastic_fees_credit_and_charge databaseColumn="plastic_fees_credit_and_charge" databaseType="CHAR(1)" nullable;
	        String photo_fees_credit_and_charge databaseColumn="photo_fees_credit_and_charge" databaseType="CHAR(1)" nullable;
	        String membership_fees_credit_charge databaseColumn="membership_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String transaction_fees_credit_charge databaseColumn="transaction_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String card_insur_fees_credit_charge databaseColumn="card_insur_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String perio_card_fees_credit_charge databaseColumn="perio_card_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String pin_change_fees_credit_charge databaseColumn="pin_change_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String balance_inq_fees_credit_charge databaseColumn="balance_inq_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String credit_tran_fees_credit_charge databaseColumn="credit_tran_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String late_pay_fees_credit_charge databaseColumn="late_pay_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String penalties_fees_credit_charge databaseColumn="penalties_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String stat_rep_fees_credit_charge databaseColumn="stat_rep_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String overdrawn_fees_credit_charge databaseColumn="overdrawn_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String acc_insu_fees_credit_charge databaseColumn="acc_insu_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String pay_inci_fees_credit_charge databaseColumn="pay_inci_fees_credit_charge" databaseType="CHAR(1)" nullable;
	        String cheque_fees_credit_and_charge databaseColumn="cheque_fees_credit_and_charge" databaseType="CHAR(1)" nullable;
			String account_Inssurance_pre_paid databaseColumn="account_Inssurance_pre_paid" databaseType="CHAR(1)" nullable;
            String loan_epp databaseColumn="loan_epp" databaseType="CHAR(1)" nullable;
            String loan_lop databaseColumn="loan_lop" databaseType="CHAR(1)" nullable;
            String loan_bal databaseColumn="loan_bal" databaseType="CHAR(1)" nullable;
            String direct_debit databaseColumn="direct_debit" databaseType="CHAR(1)" nullable;
            String send_sms databaseColumn="send_sms" databaseType="CHAR(1)" nullable;
            String statement_file_gen databaseColumn="statement_file_gen" databaseType="CHAR(1)" nullable;
            String account_change_product databaseColumn="account_change_product" databaseType="CHAR(1)" nullable;
			String card_change_product databaseColumn="card_change_product" databaseType="CHAR(1)" nullable;
            String allow_super_delay databaseColumn="allow_super_delay" databaseType="CHAR(1)" nullable;
            String gdpr_request_allowed databaseColumn="gdpr_request_allowed" databaseType="CHAR(1)" nullable;

            Repository Status_reason_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Status_reason_listVO { 
			
			String bank_code ; 
			String reason_code ; 
			String status_code ; 
			String entity_code ; 
			String abrv_wording hint="multiLang"; 
			String wording hint="multiLang"; 
			String request_origin ;
			String  reason_type;
			String  authorization_response;
            String permitted_trx;
			String  suspend_transactions;
			String  load_reload;
			String  loyalty_accrual;
			String  loyalty_redemption;
			String  interest_accrual;
			String  interest_billing;
			String  embossing;
			String  revolving_to_full_charge;
			String  annual_fee_refund;
			String  replacement_request;
			String  renewal_request;
            String  lost_stolen_casech;
			String  lost_stolen_case;
			String  internal_reason;
			String  lost_stolen_rep_option;
			String  replacement_delay_in_days;
			String  transaction_notif_network;
			String  visa_fraud_type;
			String  mc_fraud_type;
			String  amex_fraud_type;
			String  card_notif_network;
			String  operation;
			String  purge_days;
			String  visa_action_code;
			String  visa_region;
			String  mc_reason_type;
			String  mc_region;
			String  amex_reason_type;
			String  status_reason_retained;
			String  settlement_order_index;
			String  sms_code;
			String  email_code;
			String  pin_mailer;
			String  pin_change;
			String  loan_force_closure;
			String  status_reason_fee;
			BigDecimal  fee_amount;
			String  fee_currency_code;
			String  fee_transaction_code;
			String  autho_resp_operation_prop;
			String  prop_secondary_account_card;
			String  card_cancel_status_reason;
			String  replacement_fee_debit;
			String  renewal_fees_debit;
			String  plastic_fees_debit;
			String  photo_fees_debit;
			String  membership_fees_debit;
			String  transaction_fees_debit;
			String  card_insurance_fees_debit;
			String  periodic_card_fees_debit;
			String  pin_change_fees_debit;
			String  balance_inquiry_fees_debit;
			String  replacement_fee_pre_paid;
			String  renewal_fees_pre_paid;
			String  plastic_fees_pre_paid;
			String  photo_fees_pre_paid;
			String  membership_fees_pre_paid;
			String  transaction_fees_pre_paid;
			String  card_insurance_fees_pre_paid;
			String  periodic_card_fees_pre_paid;
			String  pin_change_fees_pre_paid;
			String  balance_inquiry_fees_pre_paid;
			String  top_up_fees_pre_paid;
			String  rep_fee_credit_and_charge;
			String  renewal_fees_credit_and_charge;
			String  plastic_fees_credit_and_charge;
			String  photo_fees_credit_and_charge;
			String  membership_fees_credit_charge;
			String  transaction_fees_credit_charge;
			String  card_insur_fees_credit_charge;
			String  perio_card_fees_credit_charge;
			String  pin_change_fees_credit_charge;
			String  balance_inq_fees_credit_charge;
			String  credit_tran_fees_credit_charge;
			String  late_pay_fees_credit_charge;
			String  penalties_fees_credit_charge;
			String  stat_rep_fees_credit_charge;
			String  overdrawn_fees_credit_charge;
			String  acc_insu_fees_credit_charge;
			String  pay_inci_fees_credit_charge;
			String  cheque_fees_credit_and_charge;	
			String account_Inssurance_pre_paid	;	
            String loan_epp;			
            String loan_lop;            
            String loan_bal;            
            String direct_debit ;       
            String send_sms;            
            String statement_file_gen;  
			String account_change_product;
			String card_change_product;
            String allow_super_delay;
            String gdpr_request_allowed;
			Date createdDate hint = "order1=Asc" ;
        }

        Service Status_reason_listService {
            > @Status_reason_listRepository
            String createStatus_reason_listService(@Status_reason_listVO status_reason_listVO);
            String updateStatus_reason_listService(@Status_reason_listVO status_reason_listVO);
            String deleteStatus_reason_listService(@Status_reason_listVO status_reason_listVO);
            List<@Status_reason_listVO> getAllStatus_reason_listService();
            List<@Status_reason_listVO> searchStatus_reason_listService(@Status_reason_listVO status_reason_listVO);
        }

        /************************Vip_list**********************************/ Entity Vip_list {
            databaseTable = "Vip_list" cache auditable
            ! optimisticLocking
            scaffold
            String vip_level key length = "1";
            - @Bank fk_vip_list_01 key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;
            

            Repository Vip_listRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Vip_listVO {
            String bank_code ; String vip_level ; String abrv_wording hint = "multiLang"; String wording hint = "multiLang"; String data_capture_mode; 
        }

        Service Vip_listService {
            hint = "ref1=bankService"
            > @Vip_listRepository
            String createVip_listService(@Vip_listVO vip_listVO);
            String updateVip_listService(@Vip_listVO vip_listVO);
            String deleteVip_listService(@Vip_listVO vip_listVO);
            List<@Vip_listVO> getAllVip_listService();
            List<@Vip_listVO> searchVip_listService(@Vip_listVO vip_listVO);
        }

        /************************M_education_list**********************************/ Entity Meducation_list {
            databaseTable = "M_education_list" auditable
            ! optimisticLocking
            scaffold			
            String m_education_code key length = "4";
            - @Bank fk_bank_code hint = "BaseColumn1=bank_code" key fetch = "lazy";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String education_level databaseColumn = "education_level" length = "1" nullable;
            

            Repository Meducation_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Meducation_listVO {
            String m_education_code ; String bank_code ;  String abrv_wording hint="multiLang"; String wording hint="multiLang"; String education_level ; 
            
        }

        Service Meducation_listService {
			hint = "ref1=bankService"
            > @Meducation_listRepository
            String createMeducation_listService(@Meducation_listVO meducation_listVO);
            String updateMeducation_listService(@Meducation_listVO meducation_listVO);
            String deleteMeducation_listService(@Meducation_listVO meducation_listVO);
            List<@Meducation_listVO> getAllMeducation_listService();
            List<@Meducation_listVO> searchMeducation_listService(@Meducation_listVO meducation_listVO);
        }

        /************************Document_list**********************************/ Entity Document_list {
            databaseTable = "Document_list" cache auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            //String bank_code key length = "6";
			-@Bank fk_bank_code key hint = "BaseColumn1=bank_code" ;
            String document_code key length = "2";
            // String bank_code key databaseColumn = "bank_code" length = "6";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            

            Repository Document_listRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Document_listVO {
            String bank_code;String document_code ; String abrv_wording hint="multiLang" ; String wording hint="multiLang" ; 
        }

        Service Document_listService {
            > @Document_listRepository
            String createDocument_listService(@Document_listVO document_listVO);
            String updateDocument_listService(@Document_listVO document_listVO);
            String deleteDocument_listService(@Document_listVO document_listVO);
            List<@Document_listVO> getAllDocument_listService();
            List<@Document_listVO> searchDocument_listService(@Document_listVO document_listVO);
        }

        /************************Working_days**********************************/ Entity Working_days {
            databaseTable = "Working_days" auditable
            ! optimisticLocking
            scaffold
            String country_code key length = "3";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch="lazy";            
            String holidays_management_ind databaseColumn = "holidays_management_ind" length = "1" nullable;
            String indefined_year_ind databaseColumn = "indefined_year_ind" length = "1" nullable;
            String sunday databaseColumn = "sunday" length = "1" nullable;
            String monday databaseColumn = "monday" length = "1" nullable;
            String tuesday databaseColumn = "tuesday" length = "1" nullable;
            String wednesday databaseColumn = "wednesday" length = "1" nullable;
            String thursday databaseColumn = "thursday" length = "1" nullable;
            String friday databaseColumn = "friday" length = "1" nullable;
            String saturday databaseColumn = "saturday" length = "1" nullable;
            String days_concat databaseColumn = "days_concat" length = "7" nullable;

            Repository Working_daysRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Working_daysVO {
            String country_code ;String bank_code; String holidays_management_ind ; String indefined_year_ind ; String sunday ; String monday ; String tuesday ; String
            wednesday ; String thursday ; String friday ; String saturday ; String days_concat ;
        }

        Service Working_daysService {
            hint = "ref1=countryService"
            > @Working_daysRepository
            String createWorking_daysService(@Working_daysVO working_daysVO);
            String updateWorking_daysService(@Working_daysVO working_daysVO);
            String deleteWorking_daysService(@Working_daysVO working_daysVO);
            List<@Working_daysVO> getAllWorking_daysService();
            List<@Working_daysVO> searchWorking_daysService(@Working_daysVO working_daysVO);
        }

        /************************Holidays**********************************/ 
        Entity Holidays {
            databaseTable = "Holidays" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            
            String working_year key databaseType = "NUMBER(4,0)";
            Date day_off key;           
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch="lazy";
            - @Country fk_holidays_cc key hint = "BaseColumn1=country_code" fetch = "lazy"; 
            String day_off_description databaseColumn = "day_off_description" length = "30" nullable;
            String reoccuring_flag databaseColumn="reoccuring_flag" databaseType="CHAR(1)" nullable;

            Repository HolidaysRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject HolidaysVO {
             String bank_code; String country_code; String working_year; Date day_off; String day_off_description  hint="multiLang";
             String reoccuring_flag;  
        }

        Service HolidaysService {
            > @HolidaysRepository
            String createHolidaysService(@HolidaysVO holidaysVO);
            String updateHolidaysService(@HolidaysVO holidaysVO);
            String deleteHolidaysService(@HolidaysVO holidaysVO);
            List<@HolidaysVO> getAllHolidaysService();
            List<@HolidaysVO> searchHolidaysService(@HolidaysVO holidaysVO);
        }

        /************************Pcard_id_entity_sequence**********************************/ Entity Pcard_id_entity_sequence {
            databaseTable = "Pcard_id_entity_sequence" auditable
            ! optimisticLocking
            scaffold
            String sequence_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String branch_code length = "6" nullable;
            - @Bank fk_pcard_id_entity_sequence_bc hint = "BaseColumn1=bank_code" nullable fetch = "lazy";
            String entity_code databaseColumn = "entity_code" length = "2" nullable;
            String cycle_indicator databaseColumn = "cycle_indicator" length = "1" nullable;
            String random_option databaseColumn = "random_option" length = "1" nullable;
            String increment_by databaseColumn = "increment_by" databaseType = "NUMBER(12,0)" nullable;
            String seq_start_with databaseColumn = "seq_start_with" databaseType = "NUMBER(22,0)" nullable;
            String seq_min_val databaseColumn = "seq_min_val" databaseType = "NUMBER(22,0)" nullable;
            String seq_max_val databaseColumn = "seq_max_val" databaseType = "NUMBER(22,0)" nullable;
            String seq_current_val databaseColumn = "seq_current_val" databaseType = "NUMBER(22,0)" nullable;

            Repository Pcard_id_entity_sequenceRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Pcard_id_entity_sequenceVO {
            String sequence_id ; String bank_code ; String branch_code ; String entity_code ; String cycle_indicator ; String random_option ; String increment_by ;
            String seq_start_with ; String seq_min_val ; String seq_max_val ; String seq_current_val ; Collection < String > pcard_id_entity_sequenceColVO ;
        }

        Service Pcard_id_entity_sequenceService {
            hint = "ref1=bankService,
    				  ref2=branchService"
            > @Pcard_id_entity_sequenceRepository
            String createPcard_id_entity_sequenceService(@Pcard_id_entity_sequenceVO pcard_id_entity_sequenceVO);
            String updatePcard_id_entity_sequenceService(@Pcard_id_entity_sequenceVO pcard_id_entity_sequenceVO);
            String deletePcard_id_entity_sequenceService(@Pcard_id_entity_sequenceVO pcard_id_entity_sequenceVO);
            List<@Pcard_id_entity_sequenceVO> getAllPcard_id_entity_sequenceService();
            List<@Pcard_id_entity_sequenceVO> searchPcard_id_entity_sequenceService(@Pcard_id_entity_sequenceVO
            pcard_id_entity_sequenceVO);
        }

        /************************M_institution_list**********************************/ Entity Minstitution_list {
            databaseTable = "M_institution_list" auditable
            ! optimisticLocking
            scaffold
            String m_institution_code key length = "15";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch="lazy";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String contact_name databaseColumn = "contact_name" length = "30" nullable;
            String segment_code databaseColumn = "segment_code" length = "1" nullable;
            String address_1_type  length = "2" databaseColumn = "address_1_type" nullable;
            String address_1_code databaseColumn = "address_1_code" length = "2" nullable;
            String address_2_type databaseColumn = "address_2_type" length = "2" nullable;
            String address_2_code databaseColumn = "address_2_code" length = "2" nullable;
            String preferred_mailing_address  length = "2" databaseColumn = "preferred_mailing_address" nullable;
            - @Sending_mode_list fk_minstitution_list_05 hint = "BaseColumn1=sm_preferred_mailing_address" nullable fetch = "lazy";
            String preferred_statement_address  length = "2" databaseColumn = "preferred_statement_address" nullable;
            - @Sending_mode_list fk_minstitution_list_07 hint = "BaseColumn1=sm_preferred_statement_address" nullable fetch = "lazy";
            String status_code databaseColumn = "status_code" length = "1" nullable;
            Date status_date databaseColumn = "status_date" nullable;
            String nb_accounts_link databaseColumn = "nb_accounts_link" databaseType = "NUMBER(2,0)" nullable;
            String entity_code databaseColumn = "entity_code" length = "2" nullable;



            Repository Minstitution_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Minstitution_listVO {
            String m_institution_code ;String abrv_wording ; String wording ; String bank_code ; String contact_name ; String segment_code ; String
            address_1_type ; String address_1_code ; String address_2_type ; String address_2_code ; String preferred_mailing_address ; String
            sm_preferred_mailing_address ; String preferred_statement_address ; String sm_preferred_statement_address ; String status_code ;
            Date status_date ; String nb_accounts_link ; String entity_code ; 
            Collection < String > minstitution_listColVO ;
        }

        Service Minstitution_listService {
            > @Minstitution_listRepository
            >@Accounts_linkService
            String createMinstitution_listService(@Minstitution_listVO minstitution_listVO);
            String updateMinstitution_listService(@Minstitution_listVO minstitution_listVO);
            String deleteMinstitution_listService(@Minstitution_listVO minstitution_listVO);
            List<@Minstitution_listVO> getAllMinstitution_listService();
            List<@Minstitution_listVO> searchMinstitution_listService(@Minstitution_listVO minstitution_listVO);
            String processOperations(com.google.gson.JsonObject mapVO) hint = "multiOperations,Entity1=Minstitution_list,Entity2=Accounts_link";
        }
Entity Accounts_link_view
		{
		databaseTable="Accounts_link_view"
		 auditable
		 !optimisticLocking
		  scaffold
		 String entity_code databaseColumn="entity_code" key databaseType="CHAR(2)";
		 String entity_id databaseColumn="entity_id" key length="24";
		 String account_sequence databaseColumn="account_sequence" key databaseType="NUMBER(2,0)";
		 String account_bank_code databaseColumn="account_bank_code" key databaseType="CHAR(6)";
		 String account_branch_code databaseColumn="account_branch_code" key databaseType="CHAR(6)";
		 String routing_number databaseColumn="routing_number" length="9" nullable;
		 String account_number databaseColumn="account_number" length="24" nullable;
		 String account_type databaseColumn="account_type" databaseType="CHAR(2)" nullable;
		 String account_currency_code databaseColumn="account_currency_code" databaseType="CHAR(3)" nullable;
		 String account_status databaseColumn="account_status" databaseType="CHAR(1)" nullable;
		 String account_status_reason databaseColumn="account_status_reason" databaseType="CHAR(2)" nullable;
		 String settlement_mode databaseColumn="settlement_mode" databaseType="CHAR(1)" nullable;
		 String posting_usage_flag databaseColumn="posting_usage_flag" databaseType="CHAR(1)" nullable;
		 String operations_choice_usage_flag databaseColumn="operations_choice_usage_flag" databaseType="CHAR(1)" nullable;
		 String address_code databaseColumn="address_code" databaseType="CHAR(2)" nullable;
		 Date opening_date databaseColumn="opening_date" nullable;
		 Date closing_date databaseColumn="closing_date" nullable;
		 Date status_date databaseColumn="status_date" nullable;
		 String direct_debit_reference_nbr databaseColumn="direct_debit_reference_nbr" length="16" nullable;
		 String account_bank_name databaseColumn="account_bank_name" length="32" nullable;
		 String account_bank_city databaseColumn="account_bank_city" length="30" nullable;
		 String account_bank_country databaseColumn="account_bank_country" length="32" nullable;
		 String account_conversion_in databaseColumn="account_conversion_in" databaseType="CHAR(1)" nullable;
		 String account_split_transfer databaseColumn="account_split_transfer" databaseType="CHAR(1)" nullable;
		 BigDecimal percentage_transfer databaseColumn="percentage_transfer" databaseType="NUMBER(9,3)" nullable;
		 String default_flag databaseColumn="default_flag" databaseType="CHAR(1)" nullable;
		 String remittance_grouping databaseColumn="remittance_grouping" databaseType="CHAR(1)" nullable;
		 String fees_grouping databaseColumn="fees_grouping" databaseType="CHAR(1)" nullable;
		 String chargeback_grouping databaseColumn="chargeback_grouping" databaseType="CHAR(1)" nullable;
		 String billiable_elmnt_grouping databaseColumn="billiable_elmnt_grouping" databaseType="CHAR(1)" nullable;
		 String iban databaseColumn="iban" length="34" nullable;
		 String closing_raison databaseColumn="closing_raison" length="2" nullable;
		 String private_data_1 databaseColumn="private_data_1" length="64" nullable;
		 String private_data_2 databaseColumn="private_data_2" length="64" nullable;
		 BigDecimal private_data_3 databaseColumn="private_data_3" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal private_data_4 databaseColumn="private_data_4" databaseType="NUMBER(18,3)" nullable;
		 Date private_data_5 databaseColumn="private_data_5" nullable;
		 Date private_data_6 databaseColumn="private_data_6" nullable;
		 String ref_echange databaseColumn="ref_echange" length="20" nullable;
		 String default_account databaseColumn="default_account" databaseType="CHAR(1)" nullable;
		Repository Accounts_link_viewRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Accounts_link_viewVO { 
		 String  entity_code;
		 String  entity_id;
		 String  account_sequence;
		 String  account_bank_code;
		 String  account_branch_code;
		 String  routing_number;
		 String  account_number;
		 String  account_type;
		 String  account_currency_code;
		 String  account_status;
		 String  account_status_reason;
		 String  settlement_mode;
		 String  posting_usage_flag;
		 String  operations_choice_usage_flag;
		 String  address_code;
		 Date  opening_date;
		 Date  closing_date;
		 Date  status_date;
		 String  direct_debit_reference_nbr;
		 String  account_bank_name;
		 String  account_bank_city;
		 String  account_bank_country;
		 String  account_conversion_in;
		 String  account_split_transfer;
		 BigDecimal  percentage_transfer;
		 String  default_flag;
		 String  remittance_grouping;
		 String  fees_grouping;
		 String  chargeback_grouping;
		 String  billiable_elmnt_grouping;
		 String  iban;
		 String  closing_raison;
		 String  private_data_1;
		 String  private_data_2;
		 BigDecimal  private_data_3;
		 BigDecimal  private_data_4;
		 Date  private_data_5;
		 Date  private_data_6;
		 String  ref_echange;
		 String  default_account;
		
		}
		Service Accounts_link_viewService{ 
		 > @Accounts_link_viewRepository
		 String createAccounts_link_viewService(@Accounts_link_viewVO accounts_link_viewVO);
		 String updateAccounts_link_viewService(@Accounts_link_viewVO accounts_link_viewVO);
		 String deleteAccounts_link_viewService(@Accounts_link_viewVO accounts_link_viewVO);
		 List<@Accounts_link_viewVO> getAllAccounts_link_viewService();
		 List<@Accounts_link_viewVO> searchAccounts_link_viewService(@Accounts_link_viewVO accounts_link_viewVO);
		
		 }
        /************************Sending_mode_list**********************************/ Entity Sending_mode_list {
            databaseTable = "Sending_mode_list" cache auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String sending_code key length = "2";
            String description databaseColumn = "description" length = "32" nullable;
            String sending_mode databaseColumn = "sending_mode" length = "1" nullable;
            

            Repository Sending_mode_listRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Sending_mode_listVO {
            String sending_code ; String description hint="multiLang"; String sending_mode ; 
        }

        Service Sending_mode_listService {
            > @Sending_mode_listRepository
            String createSending_mode_listService(@Sending_mode_listVO sending_mode_listVO);
            String updateSending_mode_listService(@Sending_mode_listVO sending_mode_listVO);
            String deleteSending_mode_listService(@Sending_mode_listVO sending_mode_listVO);
            List<@Sending_mode_listVO> getAllSending_mode_listService();
            List<@Sending_mode_listVO> searchSending_mode_listService(@Sending_mode_listVO sending_mode_listVO);
        }

        /************************Account_type_list**********************************/ 
        Entity Account_type_list {
            databaseTable = "Account_type_list" auditable
            ! optimisticLocking
            scaffold
            String bank_code key length = "6";
            String account_type key length = "2";
            String entity_code key length = "2";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String account_category databaseColumn = "account_category" length = "2" nullable;
            

            Repository Account_type_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Account_type_listVO {
            String bank_code; String account_type ; String abrv_wording hint="multiLang"; String wording hint="multiLang"; String account_category ; String entity_code ;
			Collection < String > account_typeCollection hint = "op=in,issearch,column_entity=account_type" ;

        }

        Service Account_type_listService {
            > @Account_type_listRepository
            String createAccount_type_listService(@Account_type_listVO account_type_listVO);
            String updateAccount_type_listService(@Account_type_listVO account_type_listVO);
            String deleteAccount_type_listService(@Account_type_listVO account_type_listVO);
            List<@Account_type_listVO> getAllAccount_type_listService();
            List<@Account_type_listVO> searchAccount_type_listService(@Account_type_listVO account_type_listVO);
        }

        /************************Conversion_rate**********************************/ Entity Conversion_rate {
            databaseTable = "Conversion_rate" auditable
            hint = "cacheNotifier,cacheFamily=ParSwitch"
            ! optimisticLocking
            scaffold
            Date rate_date key;
            String rate_origin key length = "1";
            - @Bank fk_conversion_rate_bc key hint = "BaseColumn1=bank_code" fetch = "lazy";
            - @Currency_table fk_conversion_rate_cc key hint = "BaseColumn1=currency_code" fetch = "lazy";
            String status databaseColumn = "status" length = "1" nullable;
            String conversion_mode databaseColumn = "conversion_mode" length = "1" nullable;
            String currency_exponent databaseColumn = "currency_exponent" databaseType = "NUMBER(1,0)" nullable;
            BigDecimal default_buying_rate_i databaseColumn = "default_buying_rate_i" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal default_selling_rate_o databaseColumn = "default_selling_rate_o" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal cash_buying_rate_i databaseColumn = "cash_buying_rate_i" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal cash_selling_rate_o databaseColumn = "cash_selling_rate_o" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal central_bank_buying_rate_i databaseColumn = "central_bank_buying_rate_i" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal central_bank_selling_rate_o databaseColumn = "central_bank_selling_rate_o" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal inter_transfer_buying_rate_i databaseColumn = "inter_transfer_buying_rate_i" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal inter_transfer_selling_rate_o databaseColumn = "inter_transfer_selling_rate_o" databaseType = "NUMBER(18,6)" nullable
            ;
            BigDecimal special_buying_rate_i databaseColumn = "special_buying_rate_i" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal special_selling_rate_o databaseColumn = "special_selling_rate_o" databaseType = "NUMBER(18,6)" nullable;

            Repository Conversion_rateRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Conversion_rateVO {
            String bank_code ; String currency_code ; Date rate_date ; String rate_origin ; String status ; String conversion_mode ; String
            currency_exponent ; BigDecimal default_buying_rate_i ; BigDecimal default_selling_rate_o ; BigDecimal cash_buying_rate_i ;
            BigDecimal cash_selling_rate_o ; BigDecimal central_bank_buying_rate_i ; BigDecimal central_bank_selling_rate_o ; BigDecimal
            inter_transfer_buying_rate_i ; BigDecimal inter_transfer_selling_rate_o ; BigDecimal special_buying_rate_i ; BigDecimal
            special_selling_rate_o ; Date createdDate hint = "order1=Asc" ;
             
        }

        Service Conversion_rateService {
            > @Conversion_rateRepository
            String createConversion_rateService(@Conversion_rateVO conversion_rateVO);
            String updateConversion_rateService(@Conversion_rateVO conversion_rateVO);
            String deleteConversion_rateService(@Conversion_rateVO conversion_rateVO);
            List<@Conversion_rateVO> getAllConversion_rateService(@Conversion_rateVO conversion_rateVO);
            List<@Conversion_rateVO> searchConversion_rateService(@Conversion_rateVO conversion_rateVO);
        }

        /****************************  Cross_rates   ****************************/ Entity Cross_rates {
            databaseTable = "Cross_rates" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String rate_origin key length = "1";
            Date rate_date key;
            - @Network fk_cross_rates_nc key hint = "BaseColumn1=network_code" fetch = "lazy";
             String source_currency_code key length = "3";
            - @Currency_table fk_cross_rates_dcc key hint = "BaseColumn1=destination_currency_code" fetch = "lazy";
            String conversion_mode databaseColumn = "conversion_mode" length = "1" nullable;
            String source_currency_exp databaseColumn = "source_currency_exp" databaseType = "NUMBER(1,0)" nullable;
            String destination_currency_exp databaseColumn = "destination_currency_exp" databaseType = "NUMBER(1,0)" nullable;
            BigDecimal average_rate databaseColumn = "average_rate" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal buying_rate databaseColumn = "buying_rate" databaseType = "NUMBER(18,6)" nullable;
            BigDecimal selling_rate databaseColumn = "selling_rate" databaseType = "NUMBER(18,6)" nullable;

            Repository Cross_ratesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Cross_ratesVO {
            String network_code ; String rate_origin ; String source_currency_code ; String destination_currency_code ; Date rate_date ; String
            conversion_mode ; String source_currency_exp ; String destination_currency_exp ; BigDecimal average_rate ; BigDecimal buying_rate ;
            BigDecimal selling_rate ;
        }

        Service Cross_ratesService {
            hint = "ref1=NetworkService;ref2=Currency_tableService"
            > @Cross_ratesRepository
            String createCross_ratesService(@Cross_ratesVO cross_ratesVO);
            String updateCross_ratesService(@Cross_ratesVO cross_ratesVO);
            String deleteCross_ratesService(@Cross_ratesVO cross_ratesVO);
            List<@Cross_ratesVO> getAllCross_ratesService();
            List<@Cross_ratesVO> searchCross_ratesService(@Cross_ratesVO cross_ratesVO);
        }

      
    
     
        

        /****************************  Addresses_table   ****************************/Entity Addresses_table {
            databaseTable = "Addresses_table" ! auditable
            ! optimisticLocking
            scaffold
            String entity_code key length = "2";
            String entity_id key length = "25";
            String address_code key length = "2";
            String care_of databaseColumn = "care_of" length = "32" nullable;
            String address_1 databaseColumn = "address_1" length = "64" nullable;
            String address_2 databaseColumn = "address_2" length = "64" nullable;
            String address_3 databaseColumn = "address_3" length = "64" nullable;
            String address_4 databaseColumn = "address_4" length = "64" nullable;
            String zip_code length = "10" nullable;
            String city_code length = "5" nullable;
            String region_code databaseColumn = "region_code" length = "3" nullable;
            String country_code length = "3" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String fax databaseColumn = "fax" length = "20" nullable;
            String mail databaseColumn = "email" length = "64" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;

            Repository Addresses_tableRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Addresses_tableVO {
            String entity_code ; String entity_id ; String address_code ; String care_of ; String address_1 ; String address_2 ; String address_3 ;
            String address_4 ; String zip_code ; String city_code ; String region_code ; String country_code ; String phone_1 ; String phone_2 ; String
            fax ; String mail ; String web_url ;
        }

        Service Addresses_tableService {
            > @Addresses_tableRepository
            String createAddresses_tableService(@Addresses_tableVO addresses_tableVO);
            String updateAddresses_tableService(@Addresses_tableVO addresses_tableVO);
            String deleteAddresses_tableService(@Addresses_tableVO addresses_tableVO);
            List<@Addresses_tableVO> getAllAddresses_tableService();
            List<@Addresses_tableVO> searchAddresses_tableService(@Addresses_tableVO addresses_tableVO);
            String createAllAddresses_table(List<@Addresses_tableVO> list_Addresses_table);
            String deleteAllAddresses_table(List<@Addresses_tableVO> list_Addresses_table);
        }

        /****************************  Bank_network   ****************************/ Entity Bank_network {
            databaseTable = "Bank_network" auditable
            hint = "cacheNotifier,cacheFamily=ParSwitch"
            ! optimisticLocking
            scaffold
            - @Bank fk_bank_network_bc key hint = "BaseColumn1=bank_code" fetch = "lazy";
			//String bank_code key length = "6";
            - @Network fk_bank_network_nc key hint = "BaseColumn1=network_code" fetch = "lazy";
            String acquirer_bin databaseColumn = "acquirer_bin" length = "11" nullable;
            String acquirer_ica databaseColumn = "acquirer_ica" length = "6" nullable;
            String member_identification databaseColumn = "member_identification" length = "11" nullable;
            - @Currency_table fk_bank_network_stc hint = "BaseColumn1=settlement_currency" nullable fetch = "lazy";
            - @Currency_table fk_bank_network_btc hint = "BaseColumn1=billing_currency" nullable fetch = "lazy";
            - @Currency_table fk_bank_network_rtc hint = "BaseColumn1=reconciliation_currency" nullable fetch = "lazy";
            String virtual_chain_code databaseColumn = "virtual_chain_code" length = "15" nullable;
            String virtual_merchant_number databaseColumn = "virtual_merchant_number" length = "15" nullable;
            String virtual_outlet_number databaseColumn = "virtual_outlet_number" length = "15" nullable;
            String virtual_acronym databaseColumn = "virtual_acronym" length = "25" nullable;
            String virtual_abrev_location databaseColumn = "virtual_abrev_location" length = "25" nullable;
            String virtual_activity_code databaseColumn = "virtual_activity_code" length = "4" nullable;
            String virtual_city_code databaseColumn = "virtual_city_code" length = "5" nullable;
            String virtual_region_code databaseColumn = "virtual_region_code" length = "3" nullable;
            String virtual_country_code databaseColumn = "virtual_country_code" length = "3" nullable;
            String private_data_v1 databaseColumn = "private_data_v1" length = "10" nullable;
            String private_data_v2 databaseColumn = "private_data_v2" length = "20" nullable;
            String private_data_v3 databaseColumn = "private_data_v3" length = "30" nullable;
            String private_data_v4 databaseColumn = "private_data_v4" length = "40" nullable;

            Repository Bank_networkRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Bank_networkVO {
            String bank_code ; String network_code ; String acquirer_bin ; String acquirer_ica ; String member_identification ; String
            settlement_currency ; String billing_currency ; String reconciliation_currency ; String virtual_chain_code ; String
            virtual_merchant_number ; String virtual_outlet_number ; String virtual_acronym ; String virtual_abrev_location ; String
            virtual_activity_code ; String virtual_city_code ; String virtual_region_code ; String virtual_country_code ; String private_data_v1
            ; String private_data_v2 ; String private_data_v3 ; String private_data_v4 ; boolean network_codeEqualCond hint =
            "condition=equal,operand=network_codeEqual" ; String network_codeEqual hint = "attribute=network_code,PK" ;String includeVB hint="issearch,skip" ;
        }

        Service Bank_networkService {
            > @Bank_networkRepository
            String createBank_networkService(@Bank_networkVO bank_networkVO);
            String updateBank_networkService(@Bank_networkVO bank_networkVO);
            String deleteBank_networkService(@Bank_networkVO bank_networkVO);
            List<@Bank_networkVO> getAllBank_networkService();
            List<@Bank_networkVO> searchBank_networkService(@Bank_networkVO bank_networkVO);
        }

        /****************************  Socioprof_list   ****************************/ Entity Socioprof_list {
            databaseTable = "Socioprof_list" auditable
            ! optimisticLocking
            scaffold
            String socio_prof_code key length = "4";
            - @Bank fk_socioprof_list_bc key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String activity_code databaseColumn = "activity_code" length = "4" nullable;
            String description databaseColumn = "description" length = "30" nullable;
            

            Repository Socioprof_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Socioprof_listVO {
            String bank_code ; String socio_prof_code ; String activity_code ; String description hint = "multiLang" ; 
            
        }

        Service Socioprof_listService {
            > @Socioprof_listRepository
            > @BankRepository
            > @Client_activity_setRepository
            String createSocioprof_listService(@Socioprof_listVO socioprof_listVO);
            String updateSocioprof_listService(@Socioprof_listVO socioprof_listVO);
            String deleteSocioprof_listService(@Socioprof_listVO socioprof_listVO);
            List<@Socioprof_listVO> getAllSocioprof_listService();
            List<@Socioprof_listVO> searchSocioprof_listService(@Socioprof_listVO socioprof_listVO);
            /*Map<String, Object> loadDependencies(Map<String, Object> criterias) hint = "Dependency1=Bank,Dependency2=Client_activity_set";*/
        }

        /****************************  Client_activity_set  ****************************/ Entity Client_activity_set {
            databaseTable = "Client_activity_set" auditable
            ! optimisticLocking
            scaffold
            String activity_code key length = "4";
            - @Bank fk_client_activity_set_bc key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String description databaseColumn = "description" length = "30" nullable;
            

            Repository Client_activity_setRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Client_activity_setVO {
            String activity_code ; String bank_code ; String description hint = "multiLang"; 
            
        }

        Service Client_activity_setService {
            > @Client_activity_setRepository
            > @BankRepository
            String createClient_activity_setService(@Client_activity_setVO client_activity_setVO);
            String updateClient_activity_setService(@Client_activity_setVO client_activity_setVO);
            String deleteClient_activity_setService(@Client_activity_setVO client_activity_setVO);
            List<@Client_activity_setVO> getAllClient_activity_setService();
            List<@Client_activity_setVO> searchClient_activity_setService(@Client_activity_setVO client_activity_setVO);
            /*Map<String, Object> loadDependencies(Map<String, Object> criterias) hint = "Dependency1=Bank";*/
        }

        /****************************  Accounts_link   ****************************/ Entity Accounts_link {
            databaseTable = "Accounts_link" auditable
            ! optimisticLocking
            scaffold
            String entity_code key length = "2";
            String account_sequence key databaseType = "NUMBER(2,0)";
            String entity_id key length = "24";
            String account_branch_code length = "6" nullable;
            - @Bank fk_bank_01  hint = "BaseColumn1=account_bank_code" fetch = "lazy" nullable;
            //String account_bank_code length = "6" nullable;
            String routing_number databaseColumn = "routing_number" length = "9" nullable;
            String settlement_mode databaseColumn = "settlement_mode" length = "1" nullable;
            String account_number databaseColumn = "account_number" length = "24" nullable;
            String account_type length = "2" nullable;
            String account_currency_code length = "3" nullable;
            String account_status databaseColumn = "account_status" length = "1" nullable;
            String account_status_reason databaseColumn="account_status_reason" databaseType="CHAR(2)" nullable;
            String posting_usage_flag databaseColumn = "posting_usage_flag" length = "1" nullable;
            String operations_choice_usage_flag databaseColumn = "operations_choice_usage_flag" length = "1" nullable;
            String address_code databaseColumn = "address_code" length = "2" nullable;
            Date opening_date databaseColumn = "opening_date" nullable;
            Date closing_date databaseColumn = "closing_date" nullable;
            Date status_date databaseColumn = "status_date" nullable;
            String direct_debit_reference_nbr databaseColumn = "direct_debit_reference_nbr" length = "16" nullable;
            String account_bank_name databaseColumn = "account_bank_name" length = "32" nullable;
            String account_bank_city databaseColumn = "account_bank_city" length = "30" nullable;
            String account_bank_country databaseColumn = "account_bank_country" length = "32" nullable;
            String account_conversion_in databaseColumn = "account_conversion_in" length = "1" nullable;
            String account_split_transfer databaseColumn = "account_split_transfer" length = "1" nullable;
            BigDecimal percentage_transfer databaseColumn = "percentage_transfer" databaseType = "NUMBER(9,3)" nullable;
			String default_flag databaseColumn="default_flag" databaseType="CHAR(1)" nullable;
			String remittance_grouping databaseColumn="remittance_grouping" databaseType="CHAR(1)" nullable;
			String fees_grouping databaseColumn="fees_grouping" databaseType="CHAR(1)" nullable;
			String chargeback_grouping databaseColumn="chargeback_grouping" databaseType="CHAR(1)" nullable;
			String billiable_elmnt_grouping databaseColumn="billiable_elmnt_grouping" databaseType="CHAR(1)" nullable;
			String iban databaseColumn="iban" length="34" nullable;
			String closing_raison databaseColumn="closing_raison" length="2" nullable;
            String private_data_1 databaseColumn = "private_data_1" length = "64" nullable;
            String private_data_2 databaseColumn = "private_data_2" length = "64" nullable;
            BigDecimal private_data_3 databaseColumn = "private_data_3" databaseType = "NUMBER(18,3)" nullable;
            BigDecimal private_data_4 databaseColumn = "private_data_4" databaseType = "NUMBER(18,3)" nullable;
            Date private_data_5 databaseColumn = "private_data_5" nullable;
            Date private_data_6 databaseColumn = "private_data_6" nullable;
			String ref_echange databaseColumn="ref_echange" length="20" nullable;
			String default_account databaseColumn="default_account" databaseType="CHAR(1)" nullable;
            Repository Accounts_linkRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Accounts_linkVO {
            String entity_code ; String entity_id  hint = "Mask"; String account_sequence hint = "order1=Asc" ; String account_bank_code ; String
            account_branch_code ; String routing_number; String settlement_mode; String account_number ; String account_type ; String account_currency_code ; String account_status ;
            String posting_usage_flag ; String operations_choice_usage_flag ; String address_code ; Date opening_date ; Date closing_date ; Date
            status_date ; String direct_debit_reference_nbr ; String account_bank_name ; String account_bank_city ; String account_bank_country ;
            String account_conversion_in ; String account_split_transfer ; BigDecimal percentage_transfer ; String default_flag;String remittance_grouping;String fees_grouping ;
			String chargeback_grouping;	String billiable_elmnt_grouping ;	String iban ; String closing_raison ;	String private_data_1 ; String
            private_data_2 ; BigDecimal private_data_3 ; BigDecimal private_data_4 ; Date private_data_5 ; Date private_data_6 ;  String ref_echange; 
            String default_account; String  account_status_reason;
            Collection < String > entity_id_collection hint = "op=in,issearch,column_entity=entity_id" ;
            boolean entity_idConditionIn hint ="condition=in,operand=entity_idCol" ;   
			Collection < String > entity_idCol hint="attribute=entity_id,PK";
			//int page hint = "page" ; int pageSize hint = "pageSize" ; int totalPages hint = "totalPages" ;
			Collection < String > account_numberCol    hint = "op=in,issearch,column_entity=account_number" ;
            Collection < String > inEntityIds hint ="op=in,issearch,column_entity=entity_id" ;

        }

        Service Accounts_linkService {
            > @Accounts_linkRepository
            String createAccounts_linkService(@Accounts_linkVO accounts_linkVO);
            String updateAccounts_linkService(@Accounts_linkVO accounts_linkVO);
            String deleteAccounts_linkService(@Accounts_linkVO accounts_linkVO);
            String mergeAccounts_linkService(@Accounts_linkVO accounts_linkVO);
            List<@Accounts_linkVO> getAllAccounts_linkService();
            List<@Accounts_linkVO> searchAccounts_linkService(@Accounts_linkVO accounts_linkVO);
            String createAllAccounts_link(List<@Accounts_linkVO> list_Accounts_link);
            String deleteAllAccounts_link(List<@Accounts_linkVO> list_Accounts_link);
            String updateAllAccounts_linkService(List<@Accounts_linkVO> list_Accounts_link);
        }

        /**************************** Account_link_spec ****************************/
		
		DataTransferObject Accounts_linkSpecVO { 
			String operation;
			Accounts_linkVO ref_accounts_link;
		}
		
		Service Accounts_linkSpecService{
			>@Accounts_linkService
			String processAccounts_linkSpecService(List<@Accounts_linkSpecVO> list_accounts_linkSpecVO);
		}
		
		/**************************************************************************/

        /************************************ List_product *****************************************/ Entity List_product {
            databaseTable = "List_product" cache auditable
            ! optimisticLocking
            scaffold
            String list_product_code key length = "15";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String list_product_parent_code length = "15" nullable;
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String segment_code databaseColumn = "segment_code" length = "1" nullable;
            String description databaseColumn = "description" length = "200" nullable;

            Repository List_productRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject List_productVO {
            String list_product_code ; String bank_code ; String list_product_parent_code ; String abrv_wording ; String wording ; String
            segment_code ; String description ;
			 Collection < String > list_product_codeCollection hint = "op=in,issearch,column_entity=list_product_code,PK" ;
   
        }

        Service List_productService {
            > @List_productRepository
            String createList_productService(@List_productVO list_productVO);
            String updateList_productService(@List_productVO list_productVO);
            String deleteList_productService(@List_productVO list_productVO);
            List<@List_productVO> getAllList_productService();
            List<@List_productVO> searchList_productService(@List_productVO list_productVO);
        }

        /************************************  Site_type_list  *****************************************/ Entity Site_type_list {
            databaseTable = "Site_type_list" auditable
            ! optimisticLocking
            scaffold
            String type_code key length = "2";
            String type_name databaseColumn = "type_name" length = "15" nullable;
            String type_description databaseColumn = "type_description" length = "30" nullable;
            

            Repository Site_type_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Site_type_listVO {
            String type_code ; String type_name hint="multiLang" ; String type_description hint="multiLang"; 
        }

        Service Site_type_listService {
            > @Site_type_listRepository
            String createSite_type_listService(@Site_type_listVO site_type_listVO);
            String updateSite_type_listService(@Site_type_listVO site_type_listVO);
            String deleteSite_type_listService(@Site_type_listVO site_type_listVO);
            List<@Site_type_listVO> getAllSite_type_listService();
            List<@Site_type_listVO> searchSite_type_listService(@Site_type_listVO site_type_listVO);
        }

        /************************************  Powercard_globals   *****************************************/ Entity
            Powercard_globals {
            databaseTable = "Powercard_globals" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String variable_name key length = "30";
            String variable_value databaseColumn = "variable_value" length = "128" nullable;
            String variable_comment databaseColumn = "variable_comment" length = "2000" nullable;

            Repository Powercard_globalsRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Powercard_globalsVO {
            String variable_name ; String variable_value ; String variable_comment ;
            Collection < String > inVariable_names hint = "op=in,issearch,column_entity=variable_name" ;
        }

        Service Powercard_globalsService {
            > @Powercard_globalsRepository
            String createPowercard_globalsService(@Powercard_globalsVO powercard_globalsVO);
            String updatePowercard_globalsService(@Powercard_globalsVO powercard_globalsVO);
            String deletePowercard_globalsService(@Powercard_globalsVO powercard_globalsVO);
            List<@Powercard_globalsVO> getAllPowercard_globalsService();
            List<@Powercard_globalsVO> searchPowercard_globalsService(@Powercard_globalsVO powercard_globalsVO);
        }

        /************************************  Switch_cut_off   *****************************************/ Entity Switch_cut_off {
            databaseTable = "Switch_cut_off" auditable
            ! optimisticLocking
            scaffold
            Long sequence_id key hint = "AutoGenerated" databaseType = "NUMBER(8,0)";
            Date last_cutoff_date databaseColumn = "last_cutoff_date" nullable;
            Date last_cutoff_date_bo databaseColumn = "last_cutoff_date_bo" nullable;
            String hour_cutoff databaseColumn = "hour_cutoff" length = "4" nullable;
            String hour_cutoff_bo databaseColumn = "hour_cutoff_bo" length = "4" nullable;
            String processing_mode databaseColumn = "processing_mode" length = "1" nullable;
            Date trn_cut_off_date databaseColumn = "trn_cut_off_date" nullable;
            String trn_cut_off_id databaseColumn = "trn_cut_off_id" databaseType = "NUMBER(10,0)" nullable;
            Date bal_cut_off_date databaseColumn = "bal_cut_off_date" nullable;
            String bal_cut_off_id databaseColumn = "bal_cut_off_id" databaseType = "NUMBER(10,0)" nullable;
            Date last_switch_date databaseColumn = "last_switch_date" nullable;
            String delete_flag databaseColumn = "delete_flag" length = "1" nullable;
            String processing_date_type databaseColumn = "processing_date_type" length = "1" nullable;
            String processing_date_modif_flag databaseColumn = "processing_date_modif_flag" length = "1" nullable;

            Repository Switch_cut_offRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Switch_cut_offVO {
            Long sequence_id ; Date last_cutoff_date ; Date last_cutoff_date_bo ; String hour_cutoff ; String hour_cutoff_bo ; String
            processing_mode ; Date trn_cut_off_date ; String trn_cut_off_id ; Date bal_cut_off_date ; String bal_cut_off_id ; Date last_switch_date
            ; String delete_flag ; String processing_date_type ; String processing_date_modif_flag ;
        }

        Service Switch_cut_offService {
            > @Switch_cut_offRepository
            String createSwitch_cut_offService(@Switch_cut_offVO switch_cut_offVO);
            String updateSwitch_cut_offService(@Switch_cut_offVO switch_cut_offVO);
            String deleteSwitch_cut_offService(@Switch_cut_offVO switch_cut_offVO);
            List<@Switch_cut_offVO> getAllSwitch_cut_offService();
            List<@Switch_cut_offVO> searchSwitch_cut_offService(@Switch_cut_offVO switch_cut_offVO);
        }

        /************************************  Bank_switch_cut_off   *****************************************/ Entity Bank_switch_cut_off {
            databaseTable = "Bank_switch_cut_off" auditable
            ! optimisticLocking
            scaffold
            String bank_code key databaseColumn = "bank_code";
            Date last_cutoff_date databaseColumn = "last_cutoff_date" nullable;
            Date last_cutoff_date_bo databaseColumn = "last_cutoff_date_bo" nullable;
            String hour_cutoff databaseColumn = "hour_cutoff" length = "4" nullable;
            String hour_cutoff_bo databaseColumn = "hour_cutoff_bo" length = "4" nullable;
            String processing_mode databaseColumn = "processing_mode" length = "1" nullable;
            Date trn_cut_off_date databaseColumn = "trn_cut_off_date" nullable;
            String trn_cut_off_id databaseColumn = "trn_cut_off_id" databaseType = "NUMBER(10,0)" nullable;
            Date bal_cut_off_date databaseColumn = "bal_cut_off_date" nullable;
            String bal_cut_off_id databaseColumn = "bal_cut_off_id" databaseType = "NUMBER(10,0)" nullable;
            Date last_switch_date databaseColumn = "last_switch_date" nullable;
            String delete_flag databaseColumn = "delete_flag" length = "1" nullable;
            String processing_date_type databaseColumn = "processing_date_type" length = "1" nullable;
            String processing_date_modif_flag databaseColumn = "processing_date_modif_flag" length = "1" nullable;

            Repository Bank_switch_cut_offRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Bank_switch_cut_offVO {
            String bank_code ; Date last_cutoff_date ; Date last_cutoff_date_bo ; String hour_cutoff ; String hour_cutoff_bo ; String
            processing_mode ; Date trn_cut_off_date ; String trn_cut_off_id ; Date bal_cut_off_date ; String bal_cut_off_id ; Date last_switch_date
            ; String delete_flag ; String processing_date_type ; String processing_date_modif_flag ;
        }

        Service Bank_switch_cut_offService {
            > @Bank_switch_cut_offRepository
            String createBank_switch_cut_offService(@Bank_switch_cut_offVO bank_switch_cut_offVO);
            String updateBank_switch_cut_offService(@Bank_switch_cut_offVO bank_switch_cut_offVO);
            String deleteBank_switch_cut_offService(@Bank_switch_cut_offVO bank_switch_cut_offVO);
            List<@Bank_switch_cut_offVO> getAllBank_switch_cut_offService();
            List<@Bank_switch_cut_offVO> searchBank_switch_cut_offService(@Bank_switch_cut_offVO bank_switch_cut_offVO);
        }

        /* ********************* Action_list *************************** */ Entity Action_list {
            databaseTable = "Action_list" auditable
            ! optimisticLocking
            scaffold
            String code_action key length = "3";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String action_flag databaseColumn = "action_flag" length = "1" nullable;
			
            Repository Action_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Action_listVO {
            String code_action ; String abrv_wording hint="multiLang"  ; String wording hint="multiLang"  ; String action_flag ; 
        }

        Service Action_listService {
            > @Action_listRepository
            String createAction_listService(@Action_listVO action_listVO);
            String updateAction_listService(@Action_listVO action_listVO);
            String deleteAction_listService(@Action_listVO action_listVO);
            List<@Action_listVO> getAllAction_listService();
            List<@Action_listVO> searchAction_listService(@Action_listVO action_listVO);
        }

        /* ********************* Processing_list *************************** */ Entity Processing_list {
            databaseTable = "Processing_list" auditable
            ! optimisticLocking
            scaffold
            String processing_code key length = "2";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
			
            Repository Processing_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Processing_listVO {
            String processing_code ; String abrv_wording hint="multiLang" ; String wording hint="multiLang";
        }

        Service Processing_listService {
            > @Processing_listRepository
            String createProcessing_listService(@Processing_listVO processing_listVO);
            String updateProcessing_listService(@Processing_listVO processing_listVO);
            String deleteProcessing_listService(@Processing_listVO processing_listVO);
            List<@Processing_listVO> getAllProcessing_listService();
            List<@Processing_listVO> searchProcessing_listService(@Processing_listVO processing_listVO);
        }

        /* ********************* Message_list *************************** */ Entity Message_list {
            databaseTable = "Message_list" auditable
            ! optimisticLocking
            scaffold
            String mti key length = "4";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;
			

            Repository Message_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Message_listVO {
            String mti ; String abrv_wording hint="multiLang" ; String wording hint="multiLang" ; String data_capture_mode ; 
            
        }

        Service Message_listService {
            > @Message_listRepository
            String createMessage_listService(@Message_listVO message_listVO);
            String updateMessage_listService(@Message_listVO message_listVO);
            String deleteMessage_listService(@Message_listVO message_listVO);
            List<@Message_listVO> getAllMessage_listService();
            List<@Message_listVO> searchMessage_listService(@Message_listVO message_listVO);
        }

 /* ********************* Network_message_list *************************** */ Entity Network_message_list {
                    databaseTable = "Network_message_list" auditable
                    ! optimisticLocking
                    scaffold
                    String protocol_id key length = "3";
                    String mti key length = "4";
                    String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
                    String wording databaseColumn = "wording" length = "32" nullable;
                    String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;


                    Repository Network_message_listRepository {
                        findByKeys;
                        findByKey;
                        findByCondition;
                        findByCriteria;
                    }
                }

                DataTransferObject Network_message_listVO {
                    String protocol_id; String mti ; String abrv_wording hint="multiLang" ; String wording hint="multiLang" ; String data_capture_mode ;

                }

                Service Network_message_listService {
                    > @Network_message_listRepository
                    String createNetwork_message_listService(@Network_message_listVO network_message_listVO);
                    String updateNetwork_message_listService(@Network_message_listVO network_message_listVO);
                    String deleteNetwork_message_listService(@Network_message_listVO network_message_listVO);
                    List<@Network_message_listVO> getAllNetwork_message_listService();
                    List<@Network_message_listVO> searchNetwork_message_listService(@Network_message_listVO network_message_listVO);
                }


        /* ********************* Function_list *************************** */ Entity Function_list {
            databaseTable = "Function_list" auditable
            ! optimisticLocking
            scaffold
            String function_code key length = "3";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "42" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;
			 
 
            Repository Function_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Function_listVO {
            String function_code ; String abrv_wording  hint="multiLang"; String wording  hint="multiLang" ; String data_capture_mode ; 
 
        }

        Service Function_listService {
            > @Function_listRepository
            String createFunction_listService(@Function_listVO function_listVO);
            String updateFunction_listService(@Function_listVO function_listVO);
            String deleteFunction_listService(@Function_listVO function_listVO);
            List<@Function_listVO> getAllFunction_listService();
            List<@Function_listVO> searchFunction_listService(@Function_listVO function_listVO);
        }

        Service Parameters_toolsService {
            hint = "Property1=jpub_datasource"
            int call_check_flag(String bank_code);
            int call_set_control_buffer_status(String bank_code);
        }

        /* ********************************************************** */ Entity Owner_list {
            databaseTable = "Owner_list" cache auditable
            ! optimisticLocking
            scaffold
            String owner_code key length = "2";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String owner_category databaseColumn = "owner_category" length = "1" nullable;
            String fee_category databaseColumn = "fee_category" length = "1" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;
            

            Repository Owner_listRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Owner_listVO {
            String owner_code ; String bank_code ; String abrv_wording hint = "multiLang"; String wording hint = "multiLang"; String owner_category ;
            String fee_category ; String data_capture_mode ; 
        }

        Service Owner_listService {
            > @Owner_listRepository
            String createOwner_listService(@Owner_listVO owner_listVO);
            String updateOwner_listService(@Owner_listVO owner_listVO);
            String deleteOwner_listService(@Owner_listVO owner_listVO);
            List<@Owner_listVO> getAllOwner_listService();
            List<@Owner_listVO> searchOwner_listService(@Owner_listVO owner_listVO);
        }

        /* ********************************************************** */ Entity Title_list {
            databaseTable = "Title_list" auditable
            hint = "cacheNotifier,cacheFamily=general_params"
            ! optimisticLocking
            scaffold
            String title_code key length = "2"; 
			- @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String gender databaseColumn = "gender" length = "1" nullable;
            

            Repository Title_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Title_listVO {
            String title_code ; 
			String bank_code ;
            String abrv_wording hint = "multiLang"; 
            String wording hint = "multiLang"; 
            String gender ; 
            
        }

        Service Title_listService {
            > @Title_listRepository
            String createTitle_listService(@Title_listVO title_listVO);
            String updateTitle_listService(@Title_listVO title_listVO);
            String deleteTitle_listService(@Title_listVO title_listVO);
            List<@Title_listVO> getAllTitle_listService();
            List<@Title_listVO> searchTitle_listService(@Title_listVO title_listVO);
        }

        /*

        /* ********************************************************** */Entity Client_permit_stat_change {
            databaseTable = "Client_permit_stat_change" auditable
            ! optimisticLocking
            scaffold
            String sequence_id key databaseType = "NUMBER(2,0)";
            String old_status databaseColumn = "old_status" length = "1" nullable;
            String new_status databaseColumn = "new_status" length = "1" nullable;
            String value databaseColumn = "value" length = "30" nullable;

            Repository Client_permit_stat_changeRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Client_permit_stat_changeVO {
            String sequence_id ; String old_status ; String new_status ; String value ;
        }

        Service Client_permit_stat_changeService {
            > @Client_permit_stat_changeRepository
            String createClient_permit_stat_changeService(@Client_permit_stat_changeVO client_permit_stat_changeVO);
            String updateClient_permit_stat_changeService(@Client_permit_stat_changeVO client_permit_stat_changeVO);
            String deleteClient_permit_stat_changeService(@Client_permit_stat_changeVO client_permit_stat_changeVO);
            List<@Client_permit_stat_changeVO> getAllClient_permit_stat_changeService();
            List<@Client_permit_stat_changeVO> searchClient_permit_stat_changeService(@Client_permit_stat_changeVO
            client_permit_stat_changeVO);
        }

        Entity Protocol_list {
            databaseTable = "Protocol_list" auditable
            ! optimisticLocking
            scaffold
            String protocol_index key length = "2";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String resource_group databaseColumn = "resource_group" length = "1" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;

            Repository Protocol_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Protocol_listVO {
            String protocol_index ; String abrv_wording ; String wording ; String resource_group ; String data_capture_mode ;
        }

        Service Protocol_listService {
            > @Protocol_listRepository
            String createProtocol_listService(@Protocol_listVO protocol_listVO);
            String updateProtocol_listService(@Protocol_listVO protocol_listVO);
            String deleteProtocol_listService(@Protocol_listVO protocol_listVO);
            List<@Protocol_listVO> getAllProtocol_listService();
            List<@Protocol_listVO> searchProtocol_listService(@Protocol_listVO protocol_listVO);
        }

        /***************************************************** Cycle_cutoff_list **********************************************/
        Entity Cycle_cutoff_list {
            databaseTable = "Cycle_cutoff_list" cache auditable
            ! optimisticLocking
            scaffold
            - @Cycle_cutoff_parameters fk_status_cycle_cutoff_list_01 key hint =
            "BaseColumn1=task_code,BaseColumn2=cycle_code,BaseColumn3=bank_code" fetch = "lazy";			
            - @Bank fk_bank_code hint="BaseColumn1=bank_code";
            String cycle_status databaseColumn = "cycle_status" length = "1" nullable;
            String statement_date_ind databaseColumn = "statement_date_ind" length = "1" nullable;
            Date last_processing_date databaseColumn = "last_processing_date" nullable;
            Date next_processing_date_off databaseColumn = "next_processing_date_off" nullable;
            Date next_processing_date databaseColumn = "next_processing_date" nullable;
            String periodic_event_execute databaseColumn = "periodic_event_execute" length = "1" nullable;
            String sensitive_operation_record databaseColumn = "sensitive_operation_record" length = "1" nullable;

            Repository Cycle_cutoff_listRepository {
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Cycle_cutoff_listVO {
            String bank_code ; String task_code ; String cycle_code ; String cycle_status ; String statement_date_ind ; Date last_processing_date ;
            Date next_processing_date_off ; Date next_processing_date ; String periodic_event_execute ; String sensitive_operation_record ;
        }

        Service Cycle_cutoff_listService {
            > @Cycle_cutoff_listRepository
            String createCycle_cutoff_listService(@Cycle_cutoff_listVO cycle_cutoff_listVO);
            String updateCycle_cutoff_listService(@Cycle_cutoff_listVO cycle_cutoff_listVO);
            String deleteCycle_cutoff_listService(@Cycle_cutoff_listVO cycle_cutoff_listVO);
            List<@Cycle_cutoff_listVO> getAllCycle_cutoff_listService();
            List<@Cycle_cutoff_listVO> searchCycle_cutoff_listService(@Cycle_cutoff_listVO cycle_cutoff_listVO);
        }

        /***************************************************** Cycle_cutoff_parameters **********************************************/
        Entity Cycle_cutoff_parameters {
            databaseTable = "Cycle_cutoff_parameters" auditable
            ! optimisticLocking
            scaffold
            String task_code key length = "15";
            String cycle_code key length = "3";
            - @Bank fk_cycle_cutoff_parameters_01 key hint = "BaseColumn1=bank_code";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String method_flag databaseColumn = "method_flag" length = "2" nullable;
            String closing_day_a databaseColumn = "closing_day_a" databaseType = "NUMBER(2,0)" nullable;
            String closing_day_b databaseColumn = "closing_day_b" databaseType = "NUMBER(1,0)" nullable;
            String cycle_day_off_method databaseColumn = "cycle_day_off_method" length = "1" nullable;
            - @Country fk_cycle_cutoff_parameters_02 hint = "BaseColumn1=country_code" nullable;
            String cycle_status databaseColumn = "cycle_status" length = "1" nullable;
            String statement_date_ind databaseColumn = "statement_date_ind" length = "1" nullable;
            
             String first_bimonthly_day databaseColumn="first_bimonthly_day" databaseType="NUMBER(2,0)" nullable;
 			String bimonthly_day_number databaseColumn="bimonthly_day_number" databaseType="NUMBER(2,0)" nullable;
 			String second_bimonthly_day databaseColumn="second_bimonthly_day" databaseType="NUMBER(2,0)" nullable;
            

            Repository Cycle_cutoff_parametersRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Cycle_cutoff_parametersVO {
            String bank_code ; String task_code ; String cycle_code ; String abrv_wording ; String wording ; String
            method_flag ; String closing_day_a ; String closing_day_b ; String cycle_day_off_method ; String country_code ; String cycle_status ;
            String statement_date_ind ; 
            String  first_bimonthly_day;
 			String  bimonthly_day_number;
 			String  second_bimonthly_day;
        }

        Service Cycle_cutoff_parametersService {
            > @Cycle_cutoff_parametersRepository
            > @BankRepository
            > @CountryRepository			
            > @Cycle_cutoff_listService
            String createCycle_cutoff_parametersService(@Cycle_cutoff_parametersVO cycle_cutoff_parametersVO);
            String updateCycle_cutoff_parametersService(@Cycle_cutoff_parametersVO cycle_cutoff_parametersVO);
            String deleteCycle_cutoff_parametersService(@Cycle_cutoff_parametersVO cycle_cutoff_parametersVO);
            List<@Cycle_cutoff_parametersVO> getAllCycle_cutoff_parametersService();
            List<@Cycle_cutoff_parametersVO> searchCycle_cutoff_parametersService(@Cycle_cutoff_parametersVO cycle_cutoff_parametersVO);			
			String mergeCycle_cutoff_parametersService(@Cycle_cutoff_parametersVO cycle_cutoff_parametersVO);
            String createAllCycle_cutoff_parametersService(List<@Cycle_cutoff_parametersVO> list_cycle_cutoff_parameters);
			String updateAllCycle_cutoff_parametersService(List<@Cycle_cutoff_parametersVO> list_cycle_cutoff_parameters);
			String deleteAllCycle_cutoff_parametersService(List<@Cycle_cutoff_parametersVO> list_cycle_cutoff_parameters);
			String mergeAllCycle_cutoff_parametersService(List<@Cycle_cutoff_parametersVO> list_cycle_cutoff_parameters);
			String processOperations(com.google.gson.JsonObject mapVO) hint = "multiOperations,Entity1=Cycle_cutoff_parameters,Entity2=Cycle_cutoff_list";
        }

        /***************************************************** Utility_payment_identification **********************************************/
        Entity Utility_payment_identification {
            databaseTable = "Utility_payment_identification" auditable
            ! optimisticLocking
            scaffold
            String utility_code key length = "6";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;

            Repository Utility_payment_identificationRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Utility_payment_identificationVO {
            String utility_code ; String abrv_wording ; String wording ;
        }

        Service Utility_payment_identificationService {
            > @Utility_payment_identificationRepository
            String createUtility_payment_identificationService(@Utility_payment_identificationVO utility_payment_identificationVO);
            String updateUtility_payment_identificationService(@Utility_payment_identificationVO utility_payment_identificationVO);
            String deleteUtility_payment_identificationService(@Utility_payment_identificationVO utility_payment_identificationVO);
            List<@Utility_payment_identificationVO> getAllUtility_payment_identificationService();
            List<@Utility_payment_identificationVO> searchUtility_payment_identificationService(@Utility_payment_identificationVO
            utility_payment_identificationVO);
        }

        /********************************** Stop_list_parameters ******************************************/ Entity
            Stop_list_parameters {
            databaseTable = "Stop_list_parameters" auditable
            ! optimisticLocking
            scaffold
            String stop_list_code key length = "3";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String stop_list_label databaseColumn = "stop_list_label" length = "30" nullable;
            String stop_list_size databaseColumn = "stop_list_size" databaseType = "NUMBER(5,0)" nullable;
            String stop_list_type databaseColumn = "stop_list_type" length = "2" nullable;
            String stop_list_status databaseColumn = "stop_list_status" length = "1" nullable;
            String usage_code databaseColumn = "usage_code" length = "1" nullable;
            String record_type_card databaseColumn = "record_type_card" length = "1" nullable;
            String record_type_range databaseColumn = "record_type_range" length = "1" nullable;
            String record_type_bin databaseColumn = "record_type_bin" length = "1" nullable;
            String update_level databaseColumn = "update_level" databaseType = "NUMBER(1,0)" nullable;

            Repository Stop_list_parametersRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Stop_list_parametersVO {
            String stop_list_code ; String bank_code ; String stop_list_label ; String stop_list_size ; String stop_list_type ; String
            stop_list_status ; String usage_code ; String record_type_card ; String record_type_range ; String record_type_bin ; String
            update_level ; boolean stop_list_typeNotEqualCond hint = "not,condition=equal,operand=stop_list_typeNotEqual" ; String
            stop_list_typeNotEqual hint = "attribute=stop_list_type" ;
        }

        Service Stop_list_parametersService {
            > @Stop_list_parametersRepository
            String createStop_list_parametersService(@Stop_list_parametersVO stop_list_parametersVO);
            String updateStop_list_parametersService(@Stop_list_parametersVO stop_list_parametersVO);
            String deleteStop_list_parametersService(@Stop_list_parametersVO stop_list_parametersVO);
            List<@Stop_list_parametersVO> getAllStop_list_parametersService();
            List<@Stop_list_parametersVO> searchStop_list_parametersService(@Stop_list_parametersVO stop_list_parametersVO);
        } //*********************************** Application_purge_period ***************************************************
        Entity Application_purge_period {
            databaseTable = "Application_purge_period" auditable
            ! optimisticLocking
            scaffold
            Long application_purge_period_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String bank_code databaseColumn = "bank_code" length = "6" nullable;
            String product_code databaseColumn = "product_code" length = "3" nullable;
            String work_status databaseColumn = "work_status" length = "1" nullable;
            String period databaseColumn = "period" databaseType = "NUMBER(3,0)" nullable;

            Repository Application_purge_periodRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Application_purge_periodVO {
            Long application_purge_period_id ; String bank_code ; String product_code ; String work_status ; String period ;
        }

        Service Application_purge_periodService {
            > @Application_purge_periodRepository
            String createApplication_purge_periodService(@Application_purge_periodVO application_purge_periodVO);
            String updateApplication_purge_periodService(@Application_purge_periodVO application_purge_periodVO);
            String deleteApplication_purge_periodService(@Application_purge_periodVO application_purge_periodVO);
            List<@Application_purge_periodVO> getAllApplication_purge_periodService();
            List<@Application_purge_periodVO> searchApplication_purge_periodService(@Application_purge_periodVO
            application_purge_periodVO);
        } //***************************************  Application_event  **********************************************************
        Entity Application_event {
            databaseTable = "Application_event" auditable
            ! optimisticLocking
            scaffold
            String event_code key databaseColumn = "event_code" length = "3";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String event_abrv_label databaseColumn = "event_abrv_label" length = "16" nullable;
            String event_label databaseColumn = "event_label" length = "80" nullable;
            String action_type databaseColumn = "action_type" length = "1" nullable;
            String action_code databaseColumn = "action_code" length = "3" nullable;
            

            Repository Application_eventRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Application_eventVO {
            String bank_code ; String event_code ; String event_abrv_label hint = "multiLang" ; String event_label hint = "multiLang" ; String
            action_type ; String action_code ; 
        }

        Service Application_eventService {
            > @Application_eventRepository
            String createApplication_eventService(@Application_eventVO application_eventVO);
            String updateApplication_eventService(@Application_eventVO application_eventVO);
            String deleteApplication_eventService(@Application_eventVO application_eventVO);
            List<@Application_eventVO> getAllApplication_eventService();
            List<@Application_eventVO> searchApplication_eventService(@Application_eventVO application_eventVO);
        } //***************************************  Application_reject_reason  **********************************************************
        Entity Application_reject_reason {
            databaseTable = "Application_reject_reason" auditable
            ! optimisticLocking
            scaffold
            String reject_reason key length = "3";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";
            String reject_reason_abv_label databaseColumn = "reject_reason_abv_label" length = "16" nullable;
            String reject_reason_label databaseColumn = "reject_reason_label" length = "30" nullable;
            String reject_type databaseColumn = "reject_type" length = "1" nullable;
            

            Repository Application_reject_reasonRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Application_reject_reasonVO {
            String reject_reason ; String bank_code ; String reject_reason_abv_label hint = "multiLang" ; String reject_reason_label hint =
            "multiLang" ; String reject_type ; 
        }

        Service Application_reject_reasonService {
            > @Application_reject_reasonRepository
            String createApplication_reject_reasonService(@Application_reject_reasonVO application_reject_reasonVO);
            String updateApplication_reject_reasonService(@Application_reject_reasonVO application_reject_reasonVO);
            String deleteApplication_reject_reasonService(@Application_reject_reasonVO application_reject_reasonVO);
            List<@Application_reject_reasonVO> getAllApplication_reject_reasonService();
            List<@Application_reject_reasonVO> searchApplication_reject_reasonService(@Application_reject_reasonVO
            application_reject_reasonVO);
        }

        Entity Application_users_roles {
            databaseTable = "Application_users_roles" auditable
            ! optimisticLocking
            scaffold
            String user_code key databaseColumn = "user_code" length = "30";
            String bank_code key databaseColumn = "bank_code" length = "6";
            String product_code key databaseColumn = "product_code" length = "3";
            String work_status key databaseColumn = "work_status" length = "1";
            String forcing_flag databaseColumn = "forcing_flag" length = "1" nullable;
            String forcing_user_applic_capt databaseColumn = "forcing_user_applic_capt" length = "30" nullable;
            Date forcing_start_date databaseColumn = "forcing_start_date" nullable;
            Date forcing_end_date databaseColumn = "forcing_end_date" nullable;
            String manual_flag databaseColumn = "manual_flag" length = "1" nullable;
            String manual_user_applic_capt databaseColumn = "manual_user_applic_capt" length = "30" nullable;
            Date manual_start_date databaseColumn = "manual_start_date" nullable;
            Date manual_end_date databaseColumn = "manual_end_date" nullable;
            String creation_flag databaseColumn = "creation_flag" length = "1" nullable;
            String creation_user_applic_capt databaseColumn = "creation_user_applic_capt" length = "30" nullable;
            Date creation_start_date databaseColumn = "creation_start_date" nullable;
            Date creation_end_date databaseColumn = "creation_end_date" nullable;
            String discrimination_flag databaseColumn = "discrimination_flag" length = "1" nullable;

            Repository Application_users_rolesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Application_users_rolesVO {
            String user_code ; String bank_code ; String product_code ; String work_status ; String forcing_flag ; String forcing_user_applic_capt ;
            Date forcing_start_date ; Date forcing_end_date ; String manual_flag ; String manual_user_applic_capt ; Date manual_start_date ; Date
            manual_end_date ; String creation_flag ; String creation_user_applic_capt ; Date creation_start_date ; Date creation_end_date ; String
            discrimination_flag ;
        }

        Service Application_users_rolesService {
            > @Application_users_rolesRepository
            String createApplication_users_rolesService(@Application_users_rolesVO application_users_rolesVO);
            String updateApplication_users_rolesService(@Application_users_rolesVO application_users_rolesVO);
            String deleteApplication_users_rolesService(@Application_users_rolesVO application_users_rolesVO);
            List<@Application_users_rolesVO> getAllApplication_users_rolesService();
            List<@Application_users_rolesVO> searchApplication_users_rolesService(@Application_users_rolesVO application_users_rolesVO
            );
        } //*********************************  Score_policy_rules_param_mast *************************************************
        Entity Score_policy_rules_param_mast {
            databaseTable = "Score_policy_rules_param_mast" auditable
            ! optimisticLocking
            scaffold
            String bank_code key databaseColumn = "bank_code" length = "6";
            String work_status key databaseColumn = "work_status" length = "1";
            String product_code key databaseColumn = "product_code" length = "3";
            - Set<@Score_policy_rules_param> score_policy_rules_param cascade = "all-delete-orphan" opposite score_policy_rules_param_mast;
            /*-@ Bank fk_bank_code_policy_rules_mast key hint="BaseColumn1=bank_code"  fetch = "lazy";
	-@ Application_work_status fk_work_stat_policy_rules_mast key hint="BaseColumn1=work_status,BaseColumn2=bank_code"  fetch = "lazy";
	-@ Card_product fk_product_cd_policy_rule_mast key hint="BaseColumn1=bank_code,BaseColumn2=product_code"  fetch = "lazy";*/

            Repository Score_policy_rules_param_mastRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Score_policy_rules_param_mastVO {
            String bank_code ; String product_code ; String work_status ; Collection < Score_policy_rules_paramVO > score_policy_rules_param_col
            hint = "Set=score_policy_rules_param" ;
        }

        Service Score_policy_rules_param_mastService {
            > @Score_policy_rules_param_mastRepository
            > @Score_policy_rules_paramService
            String createScore_policy_rules_param_mastService(@Score_policy_rules_param_mastVO score_policy_rules_param_mastVO);
            String updateScore_policy_rules_param_mastService(@Score_policy_rules_param_mastVO score_policy_rules_param_mastVO);
            String deleteScore_policy_rules_param_mastService(@Score_policy_rules_param_mastVO score_policy_rules_param_mastVO);
            List<@Score_policy_rules_param_mastVO> getAllScore_policy_rules_param_mastService();
            List<@Score_policy_rules_param_mastVO> searchScore_policy_rules_param_mastService(@Score_policy_rules_param_mastVO
            score_policy_rules_param_mastVO);
        } //*********************************  Score_policy_rules_param *************************************************
        Entity Score_policy_rules_param {
            databaseTable = "Score_policy_rules_param" auditable
            ! optimisticLocking
            scaffold
            - @Score_policy_rules_param_mast score_policy_rules_param_mast key hint =
            "BaseColumn1=bank_code,BaseColumn2=work_status,BaseColumn3=product_code" opposite score_policy_rules_param;
            String field_name key databaseColumn = "field_name" length = "30";
            String operator_value key databaseColumn = "operator_value" length = "7";
            String value1 key databaseColumn = "value1" length = "30";
            String value2 databaseColumn = "value2" length = "30" nullable;
            String status databaseColumn = "status" length = "1" nullable;

            Repository Score_policy_rules_paramRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Score_policy_rules_paramVO {
            String bank_code ; String product_code ; String work_status ; String field_name ; String operator_value ; String value1 ; String value2 ;
            String status ;
        }

        Service Score_policy_rules_paramService {
            > @Score_policy_rules_paramRepository
            String createScore_policy_rules_paramService(@Score_policy_rules_paramVO score_policy_rules_paramVO);
            String updateScore_policy_rules_paramService(@Score_policy_rules_paramVO score_policy_rules_paramVO);
            String deleteScore_policy_rules_paramService(@Score_policy_rules_paramVO score_policy_rules_paramVO);
            List<@Score_policy_rules_paramVO> getAllScore_policy_rules_paramService();
            List<@Score_policy_rules_paramVO> searchScore_policy_rules_paramService(@Score_policy_rules_paramVO
            score_policy_rules_paramVO);
        }

        /************************************** Score_action **********************************************/ Entity Score_action {
            databaseTable = "Score_action" auditable
            ! optimisticLocking
            scaffold
            Long sequence_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String bank_code databaseColumn = "bank_code" length = "6" nullable;
            String product_code databaseColumn = "product_code" length = "3" nullable;
            String work_status databaseColumn = "work_status" length = "1" nullable;
            String min_score_approved databaseColumn = "min_score_approved" databaseType = "NUMBER(6,0)" nullable;
            String min_score_pending databaseColumn = "min_score_pending" databaseType = "NUMBER(6,0)" nullable;

            Repository Score_actionRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Score_actionVO {
            Long sequence_id ; String bank_code ; String product_code ; String work_status ; String min_score_approved ; String min_score_pending ;
        }

        Service Score_actionService {
            > @Score_actionRepository
            String createScore_actionService(@Score_actionVO score_actionVO);
            String updateScore_actionService(@Score_actionVO score_actionVO);
            String deleteScore_actionService(@Score_actionVO score_actionVO);
            List<@Score_actionVO> getAllScore_actionService();
            List<@Score_actionVO> searchScore_actionService(@Score_actionVO score_actionVO);
        }

        /*************************Score_product_limit********************************/ Entity Score_product_limit {
            databaseTable = "Score_product_limit" auditable
            ! optimisticLocking
            scaffold
            Long sequence_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String bank_code databaseColumn = "bank_code" length = "6" nullable;
            String product_code databaseColumn = "product_code" length = "3" nullable;
            String work_status databaseColumn = "work_status" length = "1" nullable;
            String min_limit databaseColumn = "min_limit" databaseType = "NUMBER(12,0)" nullable;
            String max_limit databaseColumn = "max_limit" databaseType = "NUMBER(12,0)" nullable;
            String downgrade_product_code databaseColumn = "downgrade_product_code" length = "3" nullable;
            String upgrade_product_code databaseColumn = "upgrade_product_code" length = "3" nullable;

            Repository Score_product_limitRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Score_product_limitVO {
            Long sequence_id ; String bank_code ; String product_code ; String work_status ; String min_limit ; String max_limit ; String
            downgrade_product_code ; String upgrade_product_code ;
        }

        Service Score_product_limitService {
            > @Score_product_limitRepository
            String createScore_product_limitService(@Score_product_limitVO score_product_limitVO);
            String updateScore_product_limitService(@Score_product_limitVO score_product_limitVO);
            String deleteScore_product_limitService(@Score_product_limitVO score_product_limitVO);
            List<@Score_product_limitVO> getAllScore_product_limitService();
            List<@Score_product_limitVO> searchScore_product_limitService(@Score_product_limitVO score_product_limitVO);
        }

   

        Entity Network_clearing_format {
            databaseTable = "Network_clearing_format" auditable
            ! optimisticLocking
            scaffold
            String clearing_format key length = "2";
            - @Network fk_network_clearing_format_01 key hint = "BaseColumn1=network_code";
            String description databaseColumn = "description" length = "20" nullable;

            Repository Network_clearing_formatRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Network_clearing_formatVO {
            String network_code ; String clearing_format ; String description ;
        }

        Service Network_clearing_formatService {
            > @Network_clearing_formatRepository
            String createNetwork_clearing_formatService(@Network_clearing_formatVO network_clearing_formatVO);
            String updateNetwork_clearing_formatService(@Network_clearing_formatVO network_clearing_formatVO);
            String deleteNetwork_clearing_formatService(@Network_clearing_formatVO network_clearing_formatVO);
            List<@Network_clearing_formatVO> getAllNetwork_clearing_formatService();
            List<@Network_clearing_formatVO> searchNetwork_clearing_formatService(@Network_clearing_formatVO network_clearing_formatVO
            );
        }

        Service Pcrd_flex_acount_linkService {
            hint = "jpubPackage=PCRD_FLEX_ACOUNT_LINK,Property1=jpub_datasource"
            @Ctrl_digit_accountOutVO ctrl_digit_account(@Ctrl_digit_accountInVO ctrl_digit_accountInVO);
            @Delete_account_linkOutVO delete_account_link(@Delete_account_linkInVO delete_account_linkInVO);
            @Validate_accountOutVO validate_account(@Validate_accountInVO validate_accountInVO);
        }

        DataTransferObject Ctrl_digit_accountInVO {
            String p_bank_code ; String p_branch_code ; String p_account_number ; String p_langue ; String p_account_type ;
        }

        DataTransferObject Delete_account_linkInVO {
            String p_entity_code ; String p_entity_id ; String p_langue ;
        }

        DataTransferObject Validate_accountInVO {
            String p_entity_code ; String p_entity_id ; String p_bank_code ; String p_card_product_code ; String p_merchant_profile_code ; String
            p_payment_mode_auto_debit_ind ; String p_langue ;
        }

        DataTransferObject Ctrl_digit_accountOutVO {
            String p_msg_error ; String p_return_code ;
        }

        DataTransferObject Delete_account_linkOutVO {
            String p_msg_error ; String p_return_code ;
        }

        DataTransferObject Validate_accountOutVO {
            String p_msg_error ; String p_return_code ;
        }

        Entity Exception_countries {
            databaseTable = "Exception_countries" auditable
            ! optimisticLocking
            scaffold
            String processing_mode key length = "1";
            String exception_type key length = "1";
            - @Network fk_exception_countries_03 key hint = "BaseColumn1=network_code";
            - @Country fk_exception_countries_04 key hint = "BaseColumn1=country_code";
            String exception_level databaseColumn = "exception_level" databaseType = "NUMBER(1,0)" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            - @Currency_table fk_exception_countries_05 hint = "BaseColumn1=submission_currency_code_1" nullable;
            - @Currency_table fk_exception_countries_07 hint = "BaseColumn1=submission_currency_code_2" nullable;
            - @Currency_table fk_exception_countries_09 hint = "BaseColumn1=submission_currency_code_3" nullable;
            - @Currency_table fk_exception_countries_11 hint = "BaseColumn1=submission_currency_code_4" nullable;

            Repository Exception_countriesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Exception_countriesVO {
            String network_code ; String country_code ; String processing_mode ; String exception_type ; String exception_level ; String wording ;
            String submission_currency_code_1 ; String submission_currency_code_2 ; String submission_currency_code_3 ; String
            submission_currency_code_4 ;
        }

        Service Exception_countriesService {
            > @Exception_countriesRepository
            String createException_countriesService(@Exception_countriesVO exception_countriesVO);
            String updateException_countriesService(@Exception_countriesVO exception_countriesVO);
            String deleteException_countriesService(@Exception_countriesVO exception_countriesVO);
            List<@Exception_countriesVO> getAllException_countriesService();
            List<@Exception_countriesVO> searchException_countriesService(@Exception_countriesVO exception_countriesVO);
        }

        Entity Customer_additionnal_crit {
            databaseTable = "Customer_additionnal_crit" auditable
            ! optimisticLocking
            scaffold
            Long sequence_id key hint = "AutoGenerated" databaseColumn = "sequence_id" databaseType = "NUMBER(10,0)";
            String entity_cde databaseColumn = "entity_cde" length = "2" nullable;
            String attribute_name databaseColumn = "attribute_name" length = "40" nullable;
            String label databaseColumn = "label" length = "40" nullable;
            String source databaseColumn = "source" length = "40" nullable;

            Repository Customer_additionnal_critRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Customer_additionnal_critVO {
            Long sequence_id ; String entity_cde ; String attribute_name ; String label ; String source ;
        }

        Service Customer_additionnal_critService {
            > @Customer_additionnal_critRepository
            String createCustomer_additionnal_critService(@Customer_additionnal_critVO customer_additionnal_critVO);
            String updateCustomer_additionnal_critService(@Customer_additionnal_critVO customer_additionnal_critVO);
            String deleteCustomer_additionnal_critService(@Customer_additionnal_critVO customer_additionnal_critVO);
            List<@Customer_additionnal_critVO> getAllCustomer_additionnal_critService();
            List<@Customer_additionnal_critVO> searchCustomer_additionnal_critService(@Customer_additionnal_critVO
            customer_additionnal_critVO);
        }

        Service Pcrd_flex_trans_definService {
            hint = "jpubPackage=PCRD_FLEX_TRANS_DEFIN,Property1=jpub_datasource"
            @Transaction_code_val_itemOutVO transaction_code_val_item(@Transaction_code_val_itemInVO transaction_code_val_itemInVO);
        }

        DataTransferObject Transaction_code_val_itemInVO {
            String p_transaction_code ; String p_langue ;
        }

        DataTransferObject Transaction_code_val_itemOutVO {
            String p_wording ; String p_transaction_sign_cardholder ; String p_transaction_sign_merchant ; String p_transaction_sign_bank ;
            String p_msg_error ; String p_return_code ;
        }

        Entity Capture_list {
            databaseTable = "Capture_list" auditable
            ! optimisticLocking
            scaffold
            String capture_code key length = "2";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;

            Repository Capture_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Capture_listVO {
            String capture_code ; String abrv_wording ; String wording ; String data_capture_mode ;
        }

        Service Capture_listService {
            > @Capture_listRepository
            String createCapture_listService(@Capture_listVO capture_listVO);
            String updateCapture_listService(@Capture_listVO capture_listVO);
            String deleteCapture_listService(@Capture_listVO capture_listVO);
            List<@Capture_listVO> getAllCapture_listService();
            List<@Capture_listVO> searchCapture_listService(@Capture_listVO capture_listVO);
        }

        Entity Fuel_type_list {
            databaseTable = "Fuel_type_list" auditable
            ! optimisticLocking
            scaffold
            String sequence_id databaseColumn = "sequence_id" key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String fuel_type_code databaseColumn = "fuel_type_code" length = "2" nullable;
            - @Network fk_network_code hint = "BaseColumn1=network_code" nullable;
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;
            String data_capture_mode databaseColumn = "data_capture_mode" length = "1" nullable;

            Repository Fuel_type_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Fuel_type_listVO {
            String sequence_id ; String fuel_type_code ; String network_code ; String abrv_wording ; String wording ; String data_capture_mode ;
        }

        Service Fuel_type_listService {
            > @Fuel_type_listRepository
            String createFuel_type_listService(@Fuel_type_listVO fuel_type_listVO);
            String updateFuel_type_listService(@Fuel_type_listVO fuel_type_listVO);
            String deleteFuel_type_listService(@Fuel_type_listVO fuel_type_listVO);
            List<@Fuel_type_listVO> getAllFuel_type_listService();
            List<@Fuel_type_listVO> searchFuel_type_listService(@Fuel_type_listVO fuel_type_listVO);
        }

        Entity Pcrd_contact_position_list {
            databaseTable = "Pcrd_contact_position_list" auditable
            ! optimisticLocking
            scaffold
            //String bank_code key length = "6";
			- @Bank fk_bank_code key hint = "BaseColumn1=bank_code" ;
            String entity_code key length = "2";
            String position_code key length = "2";
            String position_description databaseColumn = "position_description" length = "40" nullable;
            

            Repository Pcrd_contact_position_listRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Pcrd_contact_position_listVO {
            String bank_code ; String entity_code ; String position_code ; String position_description hint="multiLang"; 
        }

        Service Pcrd_contact_position_listService {
            > @Pcrd_contact_position_listRepository
            String createPcrd_contact_position_listService(@Pcrd_contact_position_listVO pcrd_contact_position_listVO);
            String updatePcrd_contact_position_listService(@Pcrd_contact_position_listVO pcrd_contact_position_listVO);
            String deletePcrd_contact_position_listService(@Pcrd_contact_position_listVO pcrd_contact_position_listVO);
            List<@Pcrd_contact_position_listVO> getAllPcrd_contact_position_listService();
            List<@Pcrd_contact_position_listVO> searchPcrd_contact_position_listService(@Pcrd_contact_position_listVO
            pcrd_contact_position_listVO);
        }

        Entity Tlv_repository {
            databaseTable = "Tlv_repository" auditable
            ! optimisticLocking
            scaffold
            String tlv_code key length = "6";
            String wording databaseColumn = "wording" length = "32" nullable;

            Repository Tlv_repositoryRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Tlv_repositoryVO {
            String tlv_code ; String wording ;
        }

        Service Tlv_repositoryService {
            > @Tlv_repositoryRepository
            String createTlv_repositoryService(@Tlv_repositoryVO tlv_repositoryVO);
            String updateTlv_repositoryService(@Tlv_repositoryVO tlv_repositoryVO);
            String deleteTlv_repositoryService(@Tlv_repositoryVO tlv_repositoryVO);
            List<@Tlv_repositoryVO> getAllTlv_repositoryService();
            List<@Tlv_repositoryVO> searchTlv_repositoryService(@Tlv_repositoryVO tlv_repositoryVO);
        }

        Entity Holidays_fe {
            databaseTable = "Holidays_fe" auditable
            ! optimisticLocking
            scaffold
            
            String working_year key databaseType = "NUMBER(4,0)";
            Date day_off key;
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch="lazy";
            - @Country fk_holidays_fe_cc key hint = "BaseColumn1=country_code";
            String day_off_description databaseColumn = "day_off_description" length = "30" nullable;
            

            Repository Holidays_feRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Holidays_feVO {
            String country_code ; Date day_off ; String bank_code; String working_year ;  String day_off_description hint="multiLang"; 
        }

        Service Holidays_feService {
            > @Holidays_feRepository
            String createHolidays_feService(@Holidays_feVO holidays_feVO);
            String updateHolidays_feService(@Holidays_feVO holidays_feVO);
            String deleteHolidays_feService(@Holidays_feVO holidays_feVO);
            List<@Holidays_feVO> getAllHolidays_feService();
            List<@Holidays_feVO> searchHolidays_feService(@Holidays_feVO holidays_feVO);
        }

        Entity Working_days_fe {
            databaseTable = "Working_days_fe" auditable
            ! optimisticLocking
            scaffold
            String country_code key length = "3";
            - @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch="lazy";            
            String holidays_management_ind databaseColumn = "holidays_management_ind" length = "1" nullable;
            String indefined_year_ind databaseColumn = "indefined_year_ind" length = "1" nullable;
            String sunday databaseColumn = "sunday" length = "1" nullable;
            String monday databaseColumn = "monday" length = "1" nullable;
            String tuesday databaseColumn = "tuesday" length = "1" nullable;
            String wednesday databaseColumn = "wednesday" length = "1" nullable;
            String thursday databaseColumn = "thursday" length = "1" nullable;
            String friday databaseColumn = "friday" length = "1" nullable;
            String saturday databaseColumn = "saturday" length = "1" nullable;
            String days_concat databaseColumn = "days_concat" length = "7" nullable;

            Repository Working_days_feRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Working_days_feVO {
            String country_code ; String bank_code;String holidays_management_ind ; String indefined_year_ind ; String sunday ; String monday ; String tuesday ; String
            wednesday ; String thursday ; String friday ; String saturday ; String days_concat ;
        }

        Service Working_days_feService {
            > @Working_days_feRepository
            String createWorking_days_feService(@Working_days_feVO working_days_feVO);
            String updateWorking_days_feService(@Working_days_feVO working_days_feVO);
            String deleteWorking_days_feService(@Working_days_feVO working_days_feVO);
            List<@Working_days_feVO> getAllWorking_days_feService();
            List<@Working_days_feVO> searchWorking_days_feService(@Working_days_feVO working_days_feVO);
        }

        DataTransferObject Client_info_detailVO {
            String entity_id ; String server_id ; String client_id ; String max_number ; String threshold ; String grace ; String block_option ; String
            illimited_option ; String wording ; String temporary_option ; Date expiry_date ; String threshold_days ;
        }

        DataTransferObject Client_infoVO {
            String server_id ; String client_id ; String block_option ; String illimited_option ; String wording ; String temporary_option ; Date
            expiry_date ; String threshold_days ; Collection < Client_info_detailVO > client_info_detail_col ;
        }


        Entity Pos_reason_back {
            databaseTable = "Pos_reason_back" auditable
            ! optimisticLocking
            scaffold
            String reason_back_code key length = "2";
            - @Bank fk_bank_01 key hint = "BaseColumn1=bank_code" fetch = "lazy" ;
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "64" nullable;
            String request_indicator databaseColumn = "request_indicator" length = "2" nullable;
            String status_code databaseColumn = "status_code" length = "2" nullable;

            Repository Pos_reason_backRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Pos_reason_backVO {
            String bank_code ; String reason_back_code ; String abrv_wording ; String wording ; String request_indicator ; String status_code ;
            boolean reason_backConditionNotIn hint = "not,condition=in,operand=reason_backCol" ; Collection < String > reason_backCol hint =
            "attribute=reason_back_code,PK" ;
        }

        Service Pos_reason_backService {
            > @Pos_reason_backRepository
            > @BankRepository
            String createPos_reason_backService(@Pos_reason_backVO pos_reason_backVO);
            String updatePos_reason_backService(@Pos_reason_backVO pos_reason_backVO);
            String deletePos_reason_backService(@Pos_reason_backVO pos_reason_backVO);
            List<@Pos_reason_backVO> getAllPos_reason_backService();
            List<@Pos_reason_backVO> searchPos_reason_backService(@Pos_reason_backVO pos_reason_backVO);
            /*Map<String, Object> loadDependencies(Map<String, Object> criterias) hint = "Dependency1=Bank";*/
        }

        Entity Pcrd_last_processing_date {
            databaseTable = "Pcrd_last_processing_date" auditable
            ! optimisticLocking
            scaffold
            String task_code key length = "15";
            Date task_sysdate key;
            String task_seq key databaseType = "NUMBER(3,0)";
            Timestamp last_processing_date databaseColumn = "last_processing_date" nullable;
            String sensitive_operation_record databaseColumn = "sensitive_operation_record" length = "1" nullable;

            Repository Pcrd_last_processing_dateRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Pcrd_last_processing_dateVO {
            String task_code ; Date task_sysdate ; String task_seq ; Timestamp last_processing_date ; String sensitive_operation_record ; Date
            after_task_sysdate hint = "op=greatThanOrEqual,issearch,column_entity=task_sysdate" ; Date before_task_sysdate hint =
            "op=lessThanOrEqual,issearch,column_entity=task_sysdate" ;
        }

        Service Pcrd_last_processing_dateService {
            > @Pcrd_last_processing_dateRepository
            String createPcrd_last_processing_dateService(@Pcrd_last_processing_dateVO pcrd_last_processing_dateVO);
            String updatePcrd_last_processing_dateService(@Pcrd_last_processing_dateVO pcrd_last_processing_dateVO);
            String deletePcrd_last_processing_dateService(@Pcrd_last_processing_dateVO pcrd_last_processing_dateVO);
            List<@Pcrd_last_processing_dateVO> getAllPcrd_last_processing_dateService();
            List<@Pcrd_last_processing_dateVO> searchPcrd_last_processing_dateService(@Pcrd_last_processing_dateVO
            pcrd_last_processing_dateVO);
        }

        Service Pcrd_flex_cutoff_procService {
            hint = "jpubPackage=PCRD_FLEX_CUTOFF_PROC,Property1=jpub_datasource"
            @Get_cycle_next_proc_dateOutVO get_cycle_next_proc_date(@Get_cycle_next_proc_dateInVO get_cycle_next_proc_dateInVO);
        }

        DataTransferObject Get_cycle_next_proc_dateInVO {
            Date p_business_date ; Cycle_cutoff_param_objVO cycle_cutoff_param_objVO hint = "record=cycle_cutoff_param_obj" ;
            Cycle_cutoff_list_objVO cycle_cutoff_list_objVO hint = "record=cycle_cutoff_list_obj,inout" ; String p_langue ;
        }

        DataTransferObject Get_cycle_next_proc_dateOutVO {
            Cycle_cutoff_list_objVO cycle_cutoff_list_objVO hint = "record=cycle_cutoff_list_obj" ; String p_msg_error ; String p_return_code ;
        }

        DataTransferObject Cycle_cutoff_param_objVO {
            String bank_code ; String task_code ; String cycle_code ; String abrv_wording ; String wording ; String method_flag ; Float closing_day_a ;
            Float closing_day_b ; String cycle_day_off_method ; String country_code ; String cycle_status ; String statement_date_ind ;
            Float first_bimonthly_day ; Float bimonthly_day_number ; Float second_bimonthly_day ;
        }

        DataTransferObject Cycle_cutoff_list_objVO {
            String bank_code ; String task_code ; String cycle_code ; String cycle_status ; String statement_date_ind ; Date last_processing_date ;
            Date next_processing_date_off ; Date next_processing_date ; String periodic_event_execute ; String sensitive_operation_record ;
        }

        Entity Diners_bin {
            databaseTable = "Diners_bin" auditable
            ! optimisticLocking
            scaffold
            String issuer_bin key length = "11";
            String abrv_wording databaseColumn = "abrv_wording" length = "16" nullable;
            String wording databaseColumn = "wording" length = "32" nullable;

            Repository Diners_binRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Diners_binVO {
             String issuer_bin ; String abrv_wording ; String wording ;
             BigDecimal bin_high hint="op=lessThanOrEqual,issearch,column_entity=issuer_bin";
             BigDecimal bin_low hint="op=greatThan,issearch,column_entity=issuer_bin";

        }

        Service Diners_binService {
            > @Diners_binRepository
            String createDiners_binService(@Diners_binVO diners_binVO);
            String updateDiners_binService(@Diners_binVO diners_binVO);
            String deleteDiners_binService(@Diners_binVO diners_binVO);
            List<@Diners_binVO> getAllDiners_binService();
            List<@Diners_binVO> searchDiners_binService(@Diners_binVO diners_binVO);
            String createAllDiners_binService(List<@Diners_binVO> list_diners_bin);

        }

       Service Pcrd_flex_diners_binsService {
                   hint = "jpubPackage=PCRD_FLEX_DINERS_PARAM,Property1=jpub_datasource"
                   @Generate_diners_binsOutVO generate_diners_bins(@Generate_diners_binsInVO generate_diners_binsInVO);
       }

       DataTransferObject Generate_diners_binsInVO {
                   String p_abrv_wording; String p_wording; String p_low_issuer_bin; String p_max_issuer_bin ;
       }

       DataTransferObject Generate_diners_binsOutVO {
                   String p_error_code ;
       }


		/********************************************* Pcrd_objects_memo *****************************************/
		Entity Pcrd_objects_memo
		{
		databaseTable="Pcrd_objects_memo"
		 auditable
		 !optimisticLocking
		  scaffold
		 
		 Long sequence_number key hint="AutoGenerated" databaseType="NUMBER(11,0)";
		 String entity_code  length="2";
		 String entity_id  length="25";
		 Timestamp recording_date ;
		 String bank_code databaseColumn="bank_code" length="6" nullable;
		 String department_code databaseColumn="department_code" length="3" nullable;
		 String memo databaseColumn="memo" length="2000" nullable;
		 
		Repository Pcrd_objects_memoRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Pcrd_objects_memoVO { 
		 String  entity_code;
		 String  entity_id;
		 Timestamp  recording_date;
		 Long  sequence_number;
		 String  bank_code;
		 String  department_code;
		 String  memo;
		 String  createdBy;
		}
		Service Pcrd_objects_memoService{ 
		 > @Pcrd_objects_memoRepository
		 String createPcrd_objects_memoService(@Pcrd_objects_memoVO pcrd_objects_memoVO) hint="returnAttribute=sequence_number";
		 String updatePcrd_objects_memoService(@Pcrd_objects_memoVO pcrd_objects_memoVO);
		 String deletePcrd_objects_memoService(@Pcrd_objects_memoVO pcrd_objects_memoVO);
		 List<@Pcrd_objects_memoVO> getAllPcrd_objects_memoService();
		 List<@Pcrd_objects_memoVO> searchPcrd_objects_memoService(@Pcrd_objects_memoVO pcrd_objects_memoVO);
		 }

        /******************************* Bank_network_fraud_param **********************************/ Entity
            Bank_network_fraud_param {
            databaseTable = "Bank_network_fraud_param" auditable
            ! optimisticLocking
            scaffold
            - @Bank fk_bank_network_fraud_param_01 key hint = "BaseColumn1=bank_code";
            - @Network fk_bank_network_fraud_param_02 key hint = "BaseColumn1=network_code";
            String day_value databaseColumn = "day_value" databaseType = "NUMBER(2,0)" nullable;
            String nbr_months databaseColumn = "nbr_months" databaseType = "NUMBER(2,0)" nullable;

            Repository Bank_network_fraud_paramRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Bank_network_fraud_paramVO {
            String bank_code ; String network_code ; String day_value ; String nbr_months ;
        }

        Service Bank_network_fraud_paramService {
            > @Bank_network_fraud_paramRepository
            > @BankRepository
            > @NetworkRepository
            String createBank_network_fraud_paramService(@Bank_network_fraud_paramVO bank_network_fraud_paramVO);
            String updateBank_network_fraud_paramService(@Bank_network_fraud_paramVO bank_network_fraud_paramVO);
            String deleteBank_network_fraud_paramService(@Bank_network_fraud_paramVO bank_network_fraud_paramVO);
            List<@Bank_network_fraud_paramVO> getAllBank_network_fraud_paramService();
            List<@Bank_network_fraud_paramVO> searchBank_network_fraud_paramService(@Bank_network_fraud_paramVO
            bank_network_fraud_paramVO);
            /*Map<String, Object> loadDependencies(Map<String, Object> criterias) hint = "Dependency1=Bank, Dependency2=Network";*/
        }

  Entity Address_details_issuing {
            databaseTable = "Address_details" auditable
            ! optimisticLocking
            scaffold
            String details_id hint="Sequence=ADDRESS_DETAILS,AutoGenerated"  key length = "15";
            String care_of databaseColumn = "care_of" length = "64" nullable;
            String address_1 databaseColumn = "address_1" length = "64" nullable;
            String address_2 databaseColumn = "address_2" length = "64" nullable;
            String address_3 databaseColumn = "address_3" length = "64" nullable;
            String address_4 databaseColumn = "address_4" length = "64" nullable;
            String zip_code databaseColumn = "zip_code" length = "10" nullable;
            String city_code databaseColumn = "city_code" length = "5" nullable;
            String region_code databaseColumn = "region_code" length = "3" nullable;
            String country_code databaseColumn = "country_code" length = "3" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_1_type databaseColumn = "phone_1_type" length = "2" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String phone_2_type databaseColumn = "phone_2_type" length = "2" nullable;
            String phone_3 databaseColumn = "phone_3" length = "20" nullable;
            String phone_3_type databaseColumn = "phone_3_type" length = "2" nullable;
            String phone_4 databaseColumn = "phone_4" length = "20" nullable;
            String phone_4_type databaseColumn = "phone_4_type" length = "2" nullable;
            String landmark databaseColumn = "landmark" length = "128" nullable;
            String private_data_1 databaseColumn = "private_data_1" length = "64" nullable;
            String private_data_2 databaseColumn = "private_data_2" length = "64" nullable;
            String private_data_3 databaseColumn = "private_data_3" length = "64" nullable;
            String private_data_4 databaseColumn = "private_data_4" length = "64" nullable;
            String fax databaseColumn = "fax" length = "20" nullable;
            String ^email databaseColumn = "email" length = "64" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;
            String city_name databaseColumn = "city_name" length = "32" nullable;
            String region_name databaseColumn = "region_name" length = "40" nullable;

            Repository Address_details_issuingRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Address_details_issuingVO {
            String details_id ; String care_of ; String address_1 ; String address_2 ; String address_3 ; String address_4 ; String zip_code ; String
            city_code ; String region_code ; String country_code ; String phone_1 ; String phone_1_type ; String phone_2 ; String phone_2_type ; String
            phone_3 ; String phone_3_type ; String phone_4 ; String phone_4_type ; String landmark ; String private_data_1 ; String private_data_2 ;
            String private_data_3 ; String private_data_4 ; String fax ; String ^email ; String web_url ; String city_name ; String region_name ;
			Collection < String > inDetail    hint = "op=in,issearch,column_entity=details_id" ;
        }

        Service Address_details_issuingService {
            > @Address_details_issuingRepository
            String createAddress_details_issuingService(@Address_details_issuingVO address_details_issuingVO) hint="returnAttribute=details_id";
            String updateAddress_details_issuingService(@Address_details_issuingVO address_details_issuingVO) hint="returnAttribute=details_id";
            String deleteAddress_details_issuingService(@Address_details_issuingVO address_details_issuingVO) hint="returnAttribute=details_id";
            List<@Address_details_issuingVO> getAllAddress_details_issuingService();
            List<@Address_details_issuingVO> searchAddress_details_issuingService(@Address_details_issuingVO address_details_issuingVO);
			String mergeAddress_details_issuingService(@Address_details_issuingVO address_details_issuingVO);
     		String mergeAllAddress_details_issuingService(List<@Address_details_issuingVO> listAddress_details_issuing);
        }


  Entity Address_list_issuing {
            databaseTable = "Address_list" auditable
            ! optimisticLocking
            scaffold
            String list_id key length = "15";
            String address_sequence key length = "15";
             - @Address_details_issuing address_details_fk hint = "BaseColumn1=address_id" nullable fetch = "lazy" ;
            //String address_id databaseColumn = "address_id" length = "15" nullable;
            String service_id databaseColumn = "service_id" length = "6" nullable;
            String address_type databaseColumn = "address_type" length = "2" nullable;
            String default_usage databaseColumn = "default_usage" length = "2" nullable;
            String sending_mode databaseColumn = "sending_mode" length = "1" nullable;
            String default_address_flag databaseColumn = "default_address_flag" length = "1" nullable;
            String address_owner databaseColumn = "address_owner" length = "2" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            Date status_start_date databaseColumn = "status_start_date" nullable;
            Date status_end_date databaseColumn = "status_end_date" nullable;

            Repository Address_list_issuingRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Address_list_issuingVO {
            String list_id ; String address_sequence ; String address_id ; String service_id ; String address_type ; String default_usage ; String
            sending_mode ; String default_address_flag ; String address_owner ; String status ; Date status_start_date ; Date status_end_date ;
            Address_details_issuingVO ref_address_details_issuing hint = "reference=address_details_fk" ;
        }

        Service Address_list_issuingService {
            > @Address_list_issuingRepository
            > @Address_details_issuingService
            > @CountryRepository
            > @Zip_codeRepository
            > @CityRepository
            > @RegionRepository
            > @Addresses_type_listRepository
            String createAddress_list_issuingService(@Address_list_issuingVO address_list_issuingVO);
            String updateAddress_list_issuingService(@Address_list_issuingVO address_list_issuingVO);
            String deleteAddress_list_issuingService(@Address_list_issuingVO address_list_issuingVO);
            List<@Address_list_issuingVO> getAllAddress_list_issuingService();
            List<@Address_list_issuingVO> searchAddress_list_issuingService(@Address_list_issuingVO address_list_issuingVO);
			 String processOperations(com.google.gson.JsonObject mapVO) hint="multiOperations,Entity1=Address_list_issuing,Entity2=Address_details_issuing";
			 String deleteAllAddress_list_issuingService(List<@Address_list_issuingVO> list_address_list_issuing);
			 String mergeAddress_list_issuingService(@Address_list_issuingVO address_list_issuingVO);
			 String mergeAllAddress_list_issuingService(List<@Address_list_issuingVO> listAddress_list_issuing);
			 /*Map<String, Object> loadDependencies(Map<String,Object> criterias) hint="Dependency1=Country, Dependency2=Zip_code,  Dependency3=Region, Dependency4=City ,Dependency5=Addresses_type_list";*/
			
        }

        /**************************** ADDRESS_LIST_issuing_SPEC ****************************/

        DataTransferObject AddressSpecVO {
            String operation;
           Address_list_issuingVO ref_address_list;
		   Address_details_issuingVO ref_address_details;
		}

        Service AddressSpecService {
            > @Address_list_issuingService
            > @Address_details_issuingService
			List<@AddressSpecVO> processAddressSpecService(List<@AddressSpecVO> list_addressSpecVO);
        }

        Entity Addresses_w_table {
            databaseTable = "Addresses_w_table" auditable
            ! optimisticLocking
            scaffold
            String entity_code key databaseType = "CHAR(2)";
            String entity_id key length = "24";
            String address_code key databaseType = "CHAR(2)";
            String care_of databaseColumn = "care_of" length = "32" nullable;
            String address_1 databaseColumn = "address_1" length = "30" nullable;
            String address_2 databaseColumn = "address_2" length = "30" nullable;
            String address_3 databaseColumn = "address_3" length = "30" nullable;
            String address_4 databaseColumn = "address_4" length = "30" nullable;
            String zip_code length = "10" nullable;
            String city_code length = "5" nullable;
            String region_code databaseColumn = "region_code" length = "3" nullable;
            String country_code length = "3" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String fax databaseColumn = "fax" length = "20" nullable;
            String mail databaseColumn = "email" length = "40" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;

            Repository Addresses_w_tableRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Addresses_w_tableVO {
            String entity_code ; String entity_id hint = "Mask"; String address_code ; String care_of ; String address_1 ; String address_2 ; String address_3 ;
            String address_4 ; String zip_code ; String city_code ; String region_code ; String country_code ; String phone_1 ; String phone_2 ; String
            fax ; String mail ; String web_url ;
        }

        Service Addresses_w_tableService {
            > @Addresses_w_tableRepository
            String createAddresses_w_tableService(@Addresses_w_tableVO addresses_w_tableVO);
            String updateAddresses_w_tableService(@Addresses_w_tableVO addresses_w_tableVO);
            String deleteAddresses_w_tableService(@Addresses_w_tableVO addresses_w_tableVO);
            List<@Addresses_w_tableVO> getAllAddresses_w_tableService();
            List<@Addresses_w_tableVO> searchAddresses_w_tableService(@Addresses_w_tableVO addresses_w_tableVO);
        }
		
		
		Service Pcrd_flex_seq_tools_1Service {
		hint="jpubPackage=PCRD_FLEX_SEQ_TOOLS_1,Property1=jpub_datasource"
		@Get_seq_currentvalOutVO get_seq_currentval(@Get_seq_currentvalInVO get_seq_currentvalInVO );
		@Get_seq_nextvalOutVO get_seq_nextval(@Get_seq_nextvalInVO get_seq_nextvalInVO );
		@Get_luhn_keyOutVO get_luhn_key(@Get_luhn_keyInVO get_luhn_keyInVO);
		}
		DataTransferObject Get_seq_currentvalInVO {
		String p_sequence_name;
		String p_langue;
		}
		DataTransferObject Get_seq_nextvalInVO {
		String p_sequence_name;
		String p_langue;
		}
		DataTransferObject Get_seq_currentvalOutVO {
		String p_sequence_currentval;
		String p_msg_error;
		String p_return_code;
		}
		DataTransferObject Get_seq_nextvalOutVO {
		String p_sequence_nextval;
		String p_msg_error;
		String p_return_code;
		}
		DataTransferObject Get_luhn_keyInVO {
		String p_string;
		}
		DataTransferObject Get_luhn_keyOutVO {
		String p_result;
		}

    /* ********************* Card_class *************************** */	
    
			Entity Card_class
			{
			databaseTable="Card_class"
			 auditable
			 hint = "cacheNotifier,cacheFamily=general_params"
			 !optimisticLocking
			  scaffold 
			 String class_id key length="3";
			-@ Network fk_card_class_01 key hint="BaseColumn1=network_code";
			 String abrv_wording databaseColumn="abrv_wording" length="15" nullable;
			 String wording databaseColumn="wording" length="40" nullable;
			 String card_type databaseColumn="card_type" length="1" nullable;
			 String payement_mode databaseColumn="payement_mode" length="1" nullable;
			 String class_level databaseColumn="class_level" databaseType="NUMBER(1,0)" nullable;
			 String card_program_id databaseColumn="card_program_id" length="3" nullable;
			Repository Card_classRepository { findByKeys;findByKey;findByCondition;findByCriteria; }

			} 

			DataTransferObject Card_classVO { 
			 String  network_code;
			 String  class_id;
			 String  abrv_wording;
			 String  wording;
			 String  card_type;
			 String  payement_mode;
			 String  class_level;
			 String card_program_id;
			 Date createdDate hint="order1=Asc";
			}

			Service Card_classService{ 
			 > @Card_classRepository
			 String createCard_classService(@Card_classVO card_classVO);
			 String updateCard_classService(@Card_classVO card_classVO);
			 String deleteCard_classService(@Card_classVO card_classVO);
			 List<@Card_classVO> getAllCard_classService();
			 List<@Card_classVO> searchCard_classService(@Card_classVO card_classVO);

			 }
			Service Pcrd_flex_par_init_01Service {
			hint="jpubPackage=PCRD_FLEX_PAR_INIT_01,Property1=jpub_datasource"
			@MainOutVO main(@MainInVO mainInVO );
			}
			DataTransferObject MainInVO {
			String p_bank_code;
			String p_mode;
			String p_old_bank_processing;
			}
			DataTransferObject MainOutVO {
			String p_msg_error;
			String p_return_code;
			}
			
	        Entity All_tab_columns {
	        	databaseTable="All_tab_columns"
	        	! auditable
	        	! optimisticLocking
	        	scaffold
	        	
	        	String table_name key ;
	        	String owner key;
	        	String column_name key;
	        	String data_type ;
	        	String data_length;
				String column_id;
	        	
	
	        	Repository All_tab_columnsRepository {
	        		findByKeys;
	        		findByKey;
	        		findByCondition;
	        		findByCriteria;
	        	}
	
	        }
	
	        DataTransferObject All_tab_columnsVO {
	        	
	        	String table_name;  
	        	String owner;      
	        	String column_name ;
	        	String data_type ;
	        	String data_length;
				String column_id;
	        	
	        }
	
	        Service All_tab_columnsService {> @All_tab_columnsRepository
	        	String createAll_tab_columnsService(@All_tab_columnsVO all_tab_columnsVO);
	        	String updateAll_tab_columnsService(@All_tab_columnsVO all_tab_columnsVO);
	        	String deleteAll_tab_columnsService(@All_tab_columnsVO all_tab_columnsVO);
	        	List<@All_tab_columnsVO> getAllAll_tab_columnsService();
	        	List<@All_tab_columnsVO> searchAll_tab_columnsService(@All_tab_columnsVO all_tab_columnsVO);
	        }
	        
	          
			 /* ********************* App_addresses_table *************************** */	
			 
			 Entity App_addresses_table
			{
			databaseTable="App_addresses_table"
			 auditable
			 !optimisticLocking
			  scaffold
			 String entity_code key databaseType="CHAR(2)";
			 String entity_id key length="25";
			 String address_code key databaseType="CHAR(2)";
			 String care_of databaseColumn="care_of" length="32" nullable;
			 String address_1 databaseColumn="address_1" length="64" nullable;
			 String address_2 databaseColumn="address_2" length="64" nullable;
			 String address_3 databaseColumn="address_3" length="64" nullable;
			 String address_4 databaseColumn="address_4" length="64" nullable;
			 String zip_code databaseColumn = "zip_code" length = "10" nullable;
             String city_code databaseColumn = "city_code" length = "5" nullable;
             String region_code databaseColumn = "region_code" length = "3" nullable;
             String country_code databaseColumn = "country_code" length = "3" nullable;
		/*	-@ Zip_code fk_app_addresses_table_01 hint="BaseColumn1=zip_code,BaseColumn2=city_code,BaseColumn3=country_code" nullable; 
			 String region_code databaseColumn="region_code" databaseType="CHAR(3)" nullable; */
			 String phone_1 databaseColumn="phone_1" length="20" nullable;
			 String phone_1_type databaseColumn="phone_1_type" databaseType="CHAR(2)" nullable;
			 String phone_1_country_code databaseColumn="phone_1_country_code" length="3" nullable;
			 String phone_1_area_code databaseColumn="phone_1_area_code" length="3" nullable;
			 String phone_2 databaseColumn="phone_2" length="20" nullable;
			 String phone_2_type databaseColumn="phone_2_type" databaseType="CHAR(2)" nullable;
			 String phone_2_country_code databaseColumn="phone_2_country_code" length="3" nullable;
			 String phone_2_area_code databaseColumn="phone_2_area_code" length="3" nullable;
			 String phone_3 databaseColumn="phone_3" length="20" nullable;
			 String phone_3_type databaseColumn="phone_3_type" databaseType="CHAR(2)" nullable;
			 String phone_3_country_code databaseColumn="phone_3_country_code" length="3" nullable;
			 String phone_3_area_code databaseColumn="phone_3_area_code" length="3" nullable;
			 String phone_4 databaseColumn="phone_4" length="20" nullable;
			 String phone_4_type databaseColumn="phone_4_type" databaseType="CHAR(2)" nullable;
			 String phone_4_country_code databaseColumn="phone_4_country_code" length="3" nullable;
			 String phone_4_area_code databaseColumn="phone_4_area_code" length="3" nullable;
			 String landmark databaseColumn="landmark" length="128" nullable;
			 String private_data_1 databaseColumn="private_data_1" length="64" nullable;
			 String private_data_2 databaseColumn="private_data_2" length="64" nullable;
			 String private_data_3 databaseColumn="private_data_3" length="64" nullable;
			 String private_data_4 databaseColumn="private_data_4" length="64" nullable;
			 String fax databaseColumn="fax" length="20" nullable;
			 String mail databaseColumn="email" length="64" nullable;
			 String web_url databaseColumn="web_url" length="60" nullable;
			Repository App_addresses_tableRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
			} 
			DataTransferObject App_addresses_tableVO { 
			 String  entity_code;
			 String  entity_id;
			 String  address_code;
			 String  care_of;
			 String  address_1;
			 String  address_2;
			 String  address_3;
			 String  address_4;
			 String  zip_code;
			 String  city_code;
			 String  region_code;
			 String  country_code;
			 String  phone_1;
			 String  phone_1_type;
			 String  phone_1_country_code;
			 String  phone_1_area_code;
			 String  phone_2;
			 String  phone_2_type;
			 String  phone_2_country_code;
			 String  phone_2_area_code;
			 String  phone_3;
			 String  phone_3_type;
			 String  phone_3_country_code;
			 String  phone_3_area_code;
			 String  phone_4;
			 String  phone_4_type;
			 String  phone_4_country_code;
			 String  phone_4_area_code;
			 String  landmark;
			 String  private_data_1;
			 String  private_data_2;
			 String  private_data_3;
			 String  private_data_4;
			 String  fax;
			 String  mail;
			 String  web_url;
			}
			Service App_addresses_tableService{ 
			 > @App_addresses_tableRepository
			 String createApp_addresses_tableService(@App_addresses_tableVO app_addresses_tableVO);
			 String updateApp_addresses_tableService(@App_addresses_tableVO app_addresses_tableVO);
			 String deleteApp_addresses_tableService(@App_addresses_tableVO app_addresses_tableVO);
			 List<@App_addresses_tableVO> getAllApp_addresses_tableService();
			 List<@App_addresses_tableVO> searchApp_addresses_tableService(@App_addresses_tableVO app_addresses_tableVO);
			 }
			 
			 Entity Powercard_globals_bank
			{
			databaseTable="Powercard_globals_bank"
			hint = "cacheNotifier,cacheFamily=general_params"
			 auditable
			 !optimisticLocking
			  scaffold
			-@ Bank fk_powercard_globals_bank_01 key hint="BaseColumn1=bank_code";
			 String variable_name key length="30";
			 String variable_value databaseColumn="variable_value" length="128" nullable;
			 String variable_comment databaseColumn="variable_comment" length="2000" nullable;
			Repository Powercard_globals_bankRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
			} 
			DataTransferObject Powercard_globals_bankVO { 
			 String  bank_code;
			 String  variable_name;
			 String  variable_value;
			 String  variable_comment;
			}
			Service Powercard_globals_bankService{ 
			 > @Powercard_globals_bankRepository
			 String createPowercard_globals_bankService(@Powercard_globals_bankVO powercard_globals_bankVO);
			 String updatePowercard_globals_bankService(@Powercard_globals_bankVO powercard_globals_bankVO);
			 String deletePowercard_globals_bankService(@Powercard_globals_bankVO powercard_globals_bankVO);
			 List<@Powercard_globals_bankVO> getAllPowercard_globals_bankService();
			 List<@Powercard_globals_bankVO> searchPowercard_globals_bankService(@Powercard_globals_bankVO powercard_globals_bankVO);
			 /*Map<String, Object> loadDependencies(Map<String, Object> criterias) hint ="Dependency1=Bank";*/
			 }
			 
			 

			 
			 Service Pcrd_flex_validation_toolsService {
				hint="jpubPackage=PCRD_FLEX_VALIDATION_TOOLS,Property1=jpub_datasource"
				@Get_card_fee_by_cust_segOutVO get_card_fee_by_cust_seg(@Get_card_fee_by_cust_segInVO get_card_fee_by_cust_segInVO );
				@Validate_legal_idOutVO validate_legal_id(@Validate_legal_idInVO validate_legal_idInVO );
				@Validate_phone_numberOutVO validate_phone_number(@Validate_phone_numberInVO validate_phone_numberInVO );
				}
				DataTransferObject Get_card_fee_by_cust_segInVO {
				String p_bank_code;
				String p_customer_segement;
				}
				DataTransferObject Validate_legal_idInVO {
				String p_bank_code;
				String p_langue;
				String p_bank_client;
				String p_document_code;
				}
				DataTransferObject Validate_phone_numberInVO {
				String p_bank_code;
				String p_langue;
				String pr_phone_1;
				String pr_phone_1_type;
				String pr_phone_2;
				String pr_phone_2_type;
				String pr_phone_3;
				String pr_phone_3_type;
				String pr_phone_4;
				String pr_phone_4_type;
				}
				DataTransferObject Get_card_fee_by_cust_segOutVO {
				String p_fee_code;
				String p_msg_error;
				String p_return_code;
				}
				DataTransferObject Validate_legal_idOutVO {
				String p_msg_error;
				String p_return_code;
				}
				DataTransferObject Validate_phone_numberOutVO {
				String p_msg_error;
				String p_return_code;
				}


	

 /****************************  Institution_account   ****************************/
 		Entity Institution_account
		{
			databaseTable="Institution_account"
		 	auditable
		 	!optimisticLocking
		  	scaffold
		 	String account_number key length="24";
		 	String entity_code databaseColumn="entity_code" databaseType="CHAR(2)" nullable;
		 	String entity_id databaseColumn="entity_id" length="15" nullable;
		 	String payment_mode databaseColumn="payment_mode" databaseType="CHAR(3)" nullable;
		 	String currency_code databaseColumn="currency_code" databaseType="CHAR(3)" nullable;
		 	String status_code databaseColumn="status_code" databaseType="CHAR(1)" nullable;
		 	Date status_date databaseColumn="status_date" nullable;
		 	BigDecimal debit_balance databaseColumn="debit_balance" databaseType="NUMBER(18,3)" nullable;
		 	BigDecimal credit_balance databaseColumn="credit_balance" databaseType="NUMBER(18,3)" nullable;
		 	BigDecimal hold_balance databaseColumn="hold_balance" databaseType="NUMBER(18,3)" nullable;
		 	BigDecimal amount_to_hold databaseColumn="amount_to_hold" databaseType="NUMBER(18,3)" nullable;
		 	String sensitive_operation_record databaseColumn="sensitive_operation_record" databaseType="CHAR(1)" nullable;
			Repository Institution_accountRepository { 
				findByKeys;
				findByKey;
				findByCondition;//(PagingParameter pagingParameter) hint = "cache";
				findByCriteria; 
			}
		} 
		DataTransferObject Institution_accountVO 
		{
			String  account_number;
		 	String  entity_code;
		 	String  entity_id;
		 	String  payment_mode;
		 	String  currency_code;
		 	String  status_code;
		 	Date  status_date;
		 	BigDecimal  debit_balance;
		 	BigDecimal  credit_balance;
		 	BigDecimal  hold_balance;
		 	BigDecimal  amount_to_hold;
		 	String  sensitive_operation_record;
		 	
		}
		Service Institution_accountService
		{ 
		 	> @Institution_accountRepository
		 	String createInstitution_accountService(@Institution_accountVO institution_accountVO);
		 	String updateInstitution_accountService(@Institution_accountVO institution_accountVO);
		 	String deleteInstitution_accountService(@Institution_accountVO institution_accountVO);
		 	List<@Institution_accountVO> getAllInstitution_accountService(@Institution_accountVO institution_accountVO);
		 	List<@Institution_accountVO> searchInstitution_accountService(@Institution_accountVO institution_accountVO);
		 	/*Map<String, Object> loadDependencies(Map<String, Object> criterias) 
		 		hint = "Dependency1=Bank, 
		 				Dependency2=Branch,  
		 				Dependency3=Currency_table, 
		 				Dependency4=Transactions_definition";*/
		}
 
  /****************************  Institution_transfer   ****************************/
 Entity Institution_transfer
{
databaseTable="Institution_transfer"
 auditable
 !optimisticLocking
  scaffold
 String transfer_id key databaseType="NUMBER(10,0)";
 String entity_code databaseColumn="entity_code" databaseType="CHAR(2)" nullable;
 String entity_id databaseColumn="entity_id" length="15" nullable;
 String account_number databaseColumn="account_number" length="24" nullable;
 String settlement_bank_code databaseColumn="settlement_bank_code" databaseType="CHAR(6)" nullable;
 String settlement_branch_code databaseColumn="settlement_branch_code" databaseType="CHAR(6)" nullable;
 String settlement_account_nbr databaseColumn="settlement_account_nbr" length="24" nullable;
 Date transfer_date databaseColumn="transfer_date" nullable;
 Date settlement_date databaseColumn="settlement_date" nullable;
 BigDecimal transfer_amount databaseColumn="transfer_amount" databaseType="NUMBER(18,3)" nullable;
 String transfer_currency databaseColumn="transfer_currency" databaseType="CHAR(3)" nullable;
 String transfer_currency_exp databaseColumn="transfer_currency_exp" databaseType="NUMBER(1,0)" nullable;
 String transfer_sign databaseColumn="transfer_sign" databaseType="CHAR(1)" nullable;
 BigDecimal credit_amount databaseColumn="credit_amount" databaseType="NUMBER(18,3)" nullable;
 BigDecimal debit_amount databaseColumn="debit_amount" databaseType="NUMBER(18,3)" nullable;
 Repository Institution_transferRepository 
 { 
	 findByKeys;
	 findByKey;
	 findByCondition;//(PagingParameter pagingParameter);
	 findByCriteria; 
 }
} 
DataTransferObject Institution_transferVO { 
 String  transfer_id;
 String  entity_code;
 String  entity_id;
 String  account_number;
 String  settlement_bank_code;
 String  settlement_branch_code;
 String  settlement_account_nbr;
 Date  transfer_date;
 Date  settlement_date;
 BigDecimal  transfer_amount;
 String  transfer_currency;
 String  transfer_currency_exp;
 String  transfer_sign;
 BigDecimal  credit_amount;
 BigDecimal  debit_amount;
}
Service Institution_transferService{ 
 > @Institution_transferRepository
 String createInstitution_transferService(@Institution_transferVO institution_transferVO);
 String updateInstitution_transferService(@Institution_transferVO institution_transferVO);
 String deleteInstitution_transferService(@Institution_transferVO institution_transferVO);
 List<@Institution_transferVO> getAllInstitution_transferService();
 List<@Institution_transferVO> searchInstitution_transferService(@Institution_transferVO institution_transferVO);
 }
/****************************  Institution_transfer_view   ****************************/
		Entity Institution_transfer_view
		{
			databaseTable="Institution_transfer_view"
 			auditable
 			!optimisticLocking
  			scaffold
 			String transfer_id databaseColumn="transfer_id" key;
 			String entity_code databaseColumn="entity_code" databaseType="CHAR(2)" nullable;
		 	String entity_id databaseColumn="entity_id" length="15" nullable;
		 	String account_number databaseColumn="account_number" length="24" nullable;
		 	String settlement_bank_code databaseColumn="settlement_bank_code" databaseType="CHAR(6)" nullable;
		 	String settlement_branch_code databaseColumn="settlement_branch_code" databaseType="CHAR(6)" nullable;
		 	String settlement_account_nbr databaseColumn="settlement_account_nbr" length="24" nullable;
		 	String current_acc_routing_nbr databaseColumn="current_acc_routing_nbr" length="9" nullable;
		 	String current_acc_account_type databaseColumn="current_acc_account_type" databaseType="CHAR(2)" nullable;
		 	Date transfer_date databaseColumn="transfer_date" nullable;
		 	Date settlement_date databaseColumn="settlement_date" nullable;
		 	BigDecimal transfer_amount databaseColumn="transfer_amount" databaseType="NUMBER(18,3)" nullable;
		 	String transfer_currency databaseColumn="transfer_currency" databaseType="CHAR(3)" nullable;
		 	String transfer_currency_exp databaseColumn="transfer_currency_exp" databaseType="NUMBER(1,0)" nullable;
		 	String transfer_sign databaseColumn="transfer_sign" databaseType="CHAR(1)" nullable;
		 	BigDecimal credit_amount databaseColumn="credit_amount" databaseType="NUMBER(18,3)" nullable;
		 	BigDecimal debit_amount databaseColumn="debit_amount" databaseType="NUMBER(18,3)" nullable;
		 	String settlement_cutoff_outg databaseColumn="settlement_cutoff_outg" length="8" nullable;
		 	String settlement_flag_outg databaseColumn="settlement_flag_outg" databaseType="CHAR(1)" nullable;
		 	String settlement_cutoff_acc databaseColumn="settlement_cutoff_acc" length="8" nullable;
		 	String settlement_flag_acc databaseColumn="settlement_flag_acc" databaseType="CHAR(1)" nullable;
		 	String grouping_mode databaseColumn="grouping_mode" databaseType="CHAR(1)" nullable;
		 	String transaction_origin databaseColumn="transaction_origin" databaseType="CHAR(1)" nullable;
			String settl_bank_abrev_name databaseColumn = "settl_bank_abrev_name" length = "15" nullable;
			String settl_branch_abrev_name databaseColumn = "settl_branch_abrev_name" length = "30" nullable;
			
			Repository Institution_transfer_viewRepository 
			{ 
				findByKeys;
				findByKey;
				findByCondition;//(PagingParameter pagingParameter);
				findByCriteria; 
			}
		} 
		DataTransferObject Institution_transfer_viewVO 
		{ 
 			String  transfer_id;
 			String  entity_code;
		 	String  entity_id;
		 	String  account_number;
		 	String  settlement_bank_code;
		 	String  settlement_branch_code;
		 	String  settlement_account_nbr;
		 	String  current_acc_routing_nbr;
		 	String  current_acc_account_type;
		 	Date  transfer_date hint="order1=Desc";
		 	Date  settlement_date;
		 	BigDecimal  transfer_amount;
		 	String  transfer_currency;
		 	String  transfer_currency_exp;
		 	String  transfer_sign;
		 	BigDecimal  credit_amount;
		 	BigDecimal  debit_amount;
		 	String  settlement_cutoff_outg;
		 	String  settlement_flag_outg;
		 	String  settlement_cutoff_acc;
		 	String  settlement_flag_acc;
		 	String  grouping_mode;
		 	String  transaction_origin;
		 	String settl_bank_abrev_name;
		 	String settl_branch_abrev_name;
		 	Date after_transfer_date hint="op=greatThanOrEqual,issearch,column_entity=transfer_date";		              
			Date before_transfer_date hint="op=lessThanOrEqual,issearch,column_entity=transfer_date";
			Date after_settlement_date hint="op=greatThanOrEqual,issearch,column_entity=settlement_date";		              
			Date before_settlement_date hint="op=lessThanOrEqual,issearch,column_entity=settlement_date";
		 	
		}
		Service Institution_transfer_viewService
		{ 
 			> @Institution_transfer_viewRepository
 			String createInstitution_transfer_viewService(@Institution_transfer_viewVO institution_transfer_viewVO);
 			String updateInstitution_transfer_viewService(@Institution_transfer_viewVO institution_transfer_viewVO);
 			String deleteInstitution_transfer_viewService(@Institution_transfer_viewVO institution_transfer_viewVO);
 			List<@Institution_transfer_viewVO> getAllInstitution_transfer_viewService(@Institution_transfer_viewVO institution_transfer_viewVO);
 			List<@Institution_transfer_viewVO> searchInstitution_transfer_viewService(@Institution_transfer_viewVO institution_transfer_viewVO);
 			/*Map<String, Object> loadDependencies(Map<String, Object> criterias) 
		 		hint = "Dependency1=Bank,
		 				Dependency2=Currency_table";*/
 		}
 
 
 
 /****************************  Institution_account_operation   ****************************/

Entity Institution_account_operation
{
databaseTable="Institution_account_operation"
 auditable
 !optimisticLocking
  scaffold
 String operation_id key databaseType="NUMBER(10,0)";
 String entity_code databaseColumn="entity_code" databaseType="CHAR(2)" nullable;
 String entity_id databaseColumn="entity_id" length="15" nullable;
 String account_number databaseColumn="account_number" length="24" nullable;
 Date operation_date databaseColumn="operation_date" nullable;
 String operation_owner databaseColumn="operation_owner" length="15" nullable;
 String operation_type databaseColumn="operation_type" databaseType="CHAR(1)" nullable;
 BigDecimal operation_amount databaseColumn="operation_amount" databaseType="NUMBER(18,3)" nullable;
 String operation_currency databaseColumn="operation_currency" databaseType="CHAR(3)" nullable;
 String operation_currency_exp databaseColumn="operation_currency_exp" databaseType="NUMBER(1,0)" nullable;
 BigDecimal pending_amount databaseColumn="pending_amount" databaseType="NUMBER(18,3)" nullable;
 String pending_currency databaseColumn="pending_currency" databaseType="CHAR(3)" nullable;
 String pending_currency_exp databaseColumn="pending_currency_exp" databaseType="NUMBER(1,0)" nullable;
 String reason_code databaseColumn="reason_code" databaseType="CHAR(2)" nullable;
 String release_flag databaseColumn="release_flag" databaseType="CHAR(1)" nullable;
 Date release_date databaseColumn="release_date" nullable;
 String original_operation_id databaseColumn="original_operation_id" databaseType="NUMBER(10,0)" nullable;
Repository Institution_account_operationRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
} 
DataTransferObject Institution_account_operationVO { 
 String  operation_id;
 String  entity_code;
 String  entity_id;
 String  account_number;
 Date  operation_date;
 String  operation_owner;
 String  operation_type;
 BigDecimal  operation_amount;
 String  operation_currency;
 String  operation_currency_exp;
 BigDecimal  pending_amount;
 String  pending_currency;
 String  pending_currency_exp;
 String  reason_code;
 String  release_flag;
 Date  release_date;
 String  original_operation_id;
}
Service Institution_account_operationService{ 
 > @Institution_account_operationRepository
 String createInstitution_account_operationService(@Institution_account_operationVO institution_account_operationVO);
 String updateInstitution_account_operationService(@Institution_account_operationVO institution_account_operationVO);
 String deleteInstitution_account_operationService(@Institution_account_operationVO institution_account_operationVO);
 List<@Institution_account_operationVO> getAllInstitution_account_operationService();
 List<@Institution_account_operationVO> searchInstitution_account_operationService(@Institution_account_operationVO institution_account_operationVO);
 }
 
  /****************************  Transaction_hist_bank_mvt   ****************************/
  Entity Transaction_hist_bank_mvt
{
databaseTable="Transaction_hist_bank_mvt"
 auditable
 !optimisticLocking
  scaffold
 String microfilm_ref_number key databaseType="CHAR(23)";
 String microfilm_ref_seq key databaseType="NUMBER(4,0)";
 String country_code databaseColumn="country_code" databaseType="CHAR(3)" nullable;
 String batch_number databaseColumn="batch_number" length="8" nullable;
 String sending_center_code databaseColumn="sending_center_code" databaseType="CHAR(2)" nullable;
 String sending_grouping_code databaseColumn="sending_grouping_code" databaseType="CHAR(1)" nullable;
 String sending_bank_code databaseColumn="sending_bank_code" databaseType="CHAR(6)" nullable;
 String sending_branch_code databaseColumn="sending_branch_code" databaseType="CHAR(6)" nullable;
 String sending_network_code databaseColumn="sending_network_code" length="11" nullable;
 String receiving_center_code databaseColumn="receiving_center_code" databaseType="CHAR(2)" nullable;
 String receiving_grouping_code databaseColumn="receiving_grouping_code" databaseType="CHAR(1)" nullable;
 String receiving_bank_code databaseColumn="receiving_bank_code" databaseType="CHAR(6)" nullable;
 String receiving_branch_code databaseColumn="receiving_branch_code" databaseType="CHAR(6)" nullable;
 String receiving_network_code databaseColumn="receiving_network_code" length="11" nullable;
 String transaction_code databaseColumn="transaction_code" databaseType="CHAR(2)" nullable;
 String transaction_sign databaseColumn="transaction_sign" databaseType="CHAR(1)" nullable;
 String reversal_flag databaseColumn="reversal_flag" databaseType="CHAR(1)" nullable;
 String reversal_reason_code databaseColumn="reversal_reason_code" databaseType="CHAR(2)" nullable;
 BigDecimal transaction_amount databaseColumn="transaction_amount" databaseType="NUMBER(18,3)" nullable;
 String transaction_currency databaseColumn="transaction_currency" databaseType="CHAR(3)" nullable;
 String transaction_currency_exp databaseColumn="transaction_currency_exp" databaseType="NUMBER(1,0)" nullable;
 BigDecimal billing_amount databaseColumn="billing_amount" databaseType="NUMBER(18,3)" nullable;
 String billing_currency databaseColumn="billing_currency" databaseType="CHAR(3)" nullable;
 String billing_currency_exp databaseColumn="billing_currency_exp" databaseType="NUMBER(1,0)" nullable;
 BigDecimal local_amount databaseColumn="local_amount" databaseType="NUMBER(18,3)" nullable;
 String local_currency databaseColumn="local_currency" databaseType="CHAR(3)" nullable;
 String local_currency_exp databaseColumn="local_currency_exp" databaseType="NUMBER(1,0)" nullable;
 Date value_date databaseColumn="value_date" nullable;
 Date transaction_date databaseColumn="transaction_date" nullable;
 Date processing_date databaseColumn="processing_date" nullable;
 Date business_date databaseColumn="business_date" nullable;
 Date reconciliation_date databaseColumn="reconciliation_date" nullable;
 String reconciliation_indicator databaseColumn="reconciliation_indicator" databaseType="CHAR(3)" nullable;
 String network_code databaseColumn="network_code" databaseType="CHAR(2)" nullable;
 String incom_outg_fee_indicator databaseColumn="incom_outg_fee_indicator" databaseType="CHAR(1)" nullable;
 String product_indicator databaseColumn="product_indicator" databaseType="CHAR(1)" nullable;
 String fees_type_indicator databaseColumn="fees_type_indicator" databaseType="CHAR(1)" nullable;
 String reason_code databaseColumn="reason_code" length="6" nullable;
 String card_number databaseColumn="card_number" length="22" nullable;
 String card_seq databaseColumn="card_seq" databaseType="NUMBER(3,0)" nullable;
 String number_of_transaction databaseColumn="number_of_transaction" databaseType="NUMBER(8,0)" nullable;
 BigDecimal unite_fee databaseColumn="unite_fee" databaseType="NUMBER(18,3)" nullable;
 String controle_number databaseColumn="controle_number" length="14" nullable;
 String member_message_text databaseColumn="member_message_text" length="100" nullable;
 String settlement_cutoff_acc databaseColumn="settlement_cutoff_acc" length="8" nullable;
 String settlement_cutoff_crd databaseColumn="settlement_cutoff_crd" length="8" nullable;
 String settlement_cutoff_outg databaseColumn="settlement_cutoff_outg" length="8" nullable;
 String settlement_cutoff_mer databaseColumn="settlement_cutoff_mer" length="8" nullable;
 String settlement_cutoff_is databaseColumn="settlement_cutoff_is" length="8" nullable;
 String settlement_cutoff_stat databaseColumn="settlement_cutoff_stat" length="8" nullable;
 String settlement_cutoff_risk databaseColumn="settlement_cutoff_risk" length="8" nullable;
 String settlement_cutoff_sco databaseColumn="settlement_cutoff_sco" length="8" nullable;
 String settlement_cutoff_inc databaseColumn="settlement_cutoff_inc" length="8" nullable;
 String settlement_flag_acc databaseColumn="settlement_flag_acc" databaseType="CHAR(1)" nullable;
 String settlement_flag_crd databaseColumn="settlement_flag_crd" databaseType="CHAR(1)" nullable;
 String settlement_flag_outg databaseColumn="settlement_flag_outg" databaseType="CHAR(1)" nullable;
 String settlement_flag_mer databaseColumn="settlement_flag_mer" databaseType="CHAR(1)" nullable;
 String settlement_flag_is databaseColumn="settlement_flag_is" databaseType="CHAR(1)" nullable;
 String settlement_flag_stat databaseColumn="settlement_flag_stat" databaseType="CHAR(1)" nullable;
 String settlement_flag_risk databaseColumn="settlement_flag_risk" databaseType="CHAR(1)" nullable;
 String settlement_flag_sco databaseColumn="settlement_flag_sco" databaseType="CHAR(1)" nullable;
 String settlement_flag_inc databaseColumn="settlement_flag_inc" databaseType="CHAR(1)" nullable;
 String receiving_entity_code databaseColumn="receiving_entity_code" databaseType="CHAR(2)" nullable;
 String receiving_entity_id databaseColumn="receiving_entity_id" length="15" nullable;
 String transfer_id databaseColumn="transfer_id" databaseType="NUMBER(10,0)" nullable;
 String account_number databaseColumn="account_number" length="24" nullable;
 Date settlement_date databaseColumn="settlement_date" nullable;
 BigDecimal settlement_amount databaseColumn="settlement_amount" databaseType="NUMBER(18,3)" nullable;
 String settlement_currency databaseColumn="settlement_currency" databaseType="CHAR(3)" nullable;
 String settlement_currency_exp databaseColumn="settlement_currency_exp" databaseType="NUMBER(1,0)" nullable;
 BigDecimal to_be_settled_amount databaseColumn="to_be_settled_amount" databaseType="NUMBER(18,3)" nullable;
 String operation_id databaseColumn="operation_id" databaseType="NUMBER(10,0)" nullable;
 String merchant_number databaseColumn="merchant_number" length="15" nullable;
 String outlet_number databaseColumn="outlet_number" length="15" nullable;
 BigDecimal original_amount databaseColumn="original_amount" databaseType="NUMBER(18,3)" nullable;
 String original_currency databaseColumn="original_currency" databaseType="CHAR(3)" nullable;
 String original_currency_exp databaseColumn="original_currency_exp" databaseType="NUMBER(1,0)" nullable;
 String charging_rule_id databaseColumn="charging_rule_id" length="15" nullable;
 BigDecimal charging_rule_fixed_amount databaseColumn="charging_rule_fixed_amount" databaseType="NUMBER(18,3)" nullable;
 BigDecimal charging_rule_percentage databaseColumn="charging_rule_percentage" databaseType="NUMBER(9,6)" nullable;
 BigDecimal charging_rule_min_amount databaseColumn="charging_rule_min_amount" databaseType="NUMBER(18,3)" nullable;
 BigDecimal charging_rule_max_amount databaseColumn="charging_rule_max_amount" databaseType="NUMBER(18,3)" nullable;
 BigDecimal charging_rule_threshold databaseColumn="charging_rule_threshold" databaseType="NUMBER(18,3)" nullable;
 String charging_rule_identifier databaseColumn="charging_rule_identifier" databaseType="CHAR(3)" nullable;
 String charging_rule_round_method_id databaseColumn="charging_rule_round_method_id" databaseType="CHAR(1)" nullable;
  
Repository Transaction_hist_bank_mvtRepository { 
	findByKeys;
	findByKey;
	findByCondition;//(PagingParameter pagingParameter) hint = "cache";
	findByCriteria; 
  }
} 
DataTransferObject Transaction_hist_bank_mvtVO { 
 String  microfilm_ref_number;
 String  microfilm_ref_seq;
 String  country_code;
 String  batch_number;
 String  sending_center_code;
 String  sending_grouping_code;
 String  sending_bank_code;
 String  sending_branch_code;
 String  sending_network_code;
 String  receiving_center_code;
 String  receiving_grouping_code;
 String  receiving_bank_code;
 String  receiving_branch_code;
 String  receiving_network_code;
 String  transaction_code;
 String  transaction_sign;
 String  reversal_flag;
 String  reversal_reason_code;
 BigDecimal  transaction_amount;
 String  transaction_currency;
 String  transaction_currency_exp;
 BigDecimal  billing_amount;
 String  billing_currency;
 String  billing_currency_exp;
 BigDecimal  local_amount;
 String  local_currency;
 String  local_currency_exp;
 Date  value_date;
 Date  transaction_date;
 Date  processing_date;
 Date  business_date;
 Date  reconciliation_date;
 String  reconciliation_indicator;
 String  network_code;
 String  incom_outg_fee_indicator;
 String  product_indicator;
 String  fees_type_indicator;
 String  reason_code;
 String  card_number;
 String  card_seq;
 String  number_of_transaction;
 BigDecimal  unite_fee;
 String  controle_number;
 String  member_message_text;
 String  settlement_cutoff_acc;
 String  settlement_cutoff_crd;
 String  settlement_cutoff_outg;
 String  settlement_cutoff_mer;
 String  settlement_cutoff_is;
 String  settlement_cutoff_stat;
 String  settlement_cutoff_risk;
 String  settlement_cutoff_sco;
 String  settlement_cutoff_inc;
 String  settlement_flag_acc;
 String  settlement_flag_crd;
 String  settlement_flag_outg;
 String  settlement_flag_mer;
 String  settlement_flag_is;
 String  settlement_flag_stat;
 String  settlement_flag_risk;
 String  settlement_flag_sco;
 String  settlement_flag_inc;
 String  receiving_entity_code;
 String  receiving_entity_id;
 String  transfer_id;
 String  account_number;
 Date  settlement_date;
 BigDecimal  settlement_amount;
 String  settlement_currency;
 String  settlement_currency_exp;
 BigDecimal  to_be_settled_amount;
 String  operation_id;
 String  merchant_number;
 String  outlet_number;
 BigDecimal  original_amount;
 String  original_currency;
 String  original_currency_exp;
 String  charging_rule_id;
 BigDecimal  charging_rule_fixed_amount;
 BigDecimal  charging_rule_percentage;
 BigDecimal  charging_rule_min_amount;
 BigDecimal  charging_rule_max_amount;
 BigDecimal  charging_rule_threshold;
 String  charging_rule_identifier;
 String  charging_rule_round_method_id;
 BigDecimal  to_be_settled_amount_not_zero hint="op=greatThan,issearch,column_entity=to_be_settled_amount";
//	 int page hint = "page" ; 
    // int pageSize hint = "pageSize" ; 
    // int totalPages hint = "totalPages" ;
}
Service Transaction_hist_bank_mvtService{ 
 > @Transaction_hist_bank_mvtRepository
 String createTransaction_hist_bank_mvtService(@Transaction_hist_bank_mvtVO transaction_hist_bank_mvtVO);
 String updateTransaction_hist_bank_mvtService(@Transaction_hist_bank_mvtVO transaction_hist_bank_mvtVO);
 String deleteTransaction_hist_bank_mvtService(@Transaction_hist_bank_mvtVO transaction_hist_bank_mvtVO);
 List<@Transaction_hist_bank_mvtVO> getAllTransaction_hist_bank_mvtService();
 List<@Transaction_hist_bank_mvtVO> searchTransaction_hist_bank_mvtService(@Transaction_hist_bank_mvtVO transaction_hist_bank_mvtVO);
 }
  
 
 /****************************  Pcrd_flex_inst_acct_1Service   ****************************/
		Service Pcrd_flex_inst_acct_1Service {
		hint="jpubPackage=PCRD_FLEX_INST_ACCT_1,Property1=jpub_datasource"
		@Get_account_infoOutVO get_account_info(@Get_account_infoInVO get_account_infoInVO );
		@Hold_amountOutVO hold_amount(@Hold_amountInVO hold_amountInVO );
		@Release_amountOutVO release_amount(@Release_amountInVO release_amountInVO );
		}
		DataTransferObject Get_account_infoInVO {
		Date p_business_date;
		String p_criteria_entity_code;
		String p_criteria_entity_id;
		String p_criteria_account_number;
		String p_langue;
		}
		DataTransferObject Hold_amountInVO {
		Date p_business_date;
		String p_hold_data_ent_code;
		String p_hold_data_ent_id;
		String p_hold_data_account_number;
		String p_hold_data_hold_reason;
		BigDecimal p_hold_data_hold_amount;
		Date p_hold_data_release_date;
		String p_user_code;
		String p_langue;
		}
		DataTransferObject Release_amountInVO {
		Date p_business_date;
		String p_release_data_entity_code;
		String p_release_data_entity_id;
		BigDecimal p_release_data_operation_id;
		String p_release_data_account_number;
		BigDecimal p_release_data_release_amount;
		String p_release_data_release_ccy;
		Date p_release_data_release_date;
		String p_release_data_partial_flag;
		String p_user_code;
		String p_langue;
		}
		DataTransferObject Get_account_infoOutVO {
		Date p_result_last_settlement_date;
		Date p_result_next_settlement_date;
		BigDecimal p_result_next_set_amount;
		String p_result_settlement_currency;
		BigDecimal p_result_set_currency_exp;
		String p_result_settlement_bank;
		String p_result_settlement_account;
		String p_msg_error;
		String p_return_code;
		}
		DataTransferObject Hold_amountOutVO {
		String p_msg_error;
		String p_return_code;
		}
		DataTransferObject Release_amountOutVO {
		String p_msg_error;
		String p_return_code;
		}


    /*********************** Iso_var ****************************/ Entity Iso_var {
            databaseTable = "Bank" cache auditable
            ! optimisticLocking
            scaffold
            String bank_code key length = "6";
            String category databaseColumn = "category" length = "2" nullable;
            String center_code length = "2" nullable;
            String bank_name databaseColumn = "bank_name" length = "40" nullable;
            String abrev_name databaseColumn = "abrev_name" length = "15" nullable;
            String address_1 databaseColumn = "address_1" length = "64" nullable;
            String address_2 databaseColumn = "address_2" length = "64" nullable;
            String address_3 databaseColumn = "address_3" length = "64" nullable;
            String address_4 databaseColumn = "address_4" length = "64" nullable;
            String zip_code length = "10" nullable;
            String city_code length = "5" nullable;
            String region_code length = "3" nullable;
            String country_code length = "3" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String fax_number databaseColumn = "fax_number" length = "20" nullable;
            String mail databaseColumn = "email" length = "40" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;
            String bank_member_ind databaseColumn = "bank_member_ind" length = "1" nullable;
            String checking_account_ind databaseColumn = "checking_account_ind" length = "1" nullable;
            String transmission_mode databaseColumn = "transmission_mode" length = "1" nullable;
            String multi_country_ind databaseColumn = "multi_country_ind" length = "1" nullable;
            String public_bank_id databaseColumn = "public_bank_id" length = "6" nullable;
            String contact_name databaseColumn = "contact_name" length = "40" nullable;
            String contact_phone databaseColumn = "contact_phone" length = "20" nullable;
            BigDecimal vat databaseColumn = "vat" databaseType = "NUMBER(5,2)" nullable;
            Date eff_date_vat databaseColumn = "eff_date_vat" nullable;
            BigDecimal former_vat databaseColumn = "former_vat" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal interest_vat databaseColumn = "interest_vat" databaseType = "NUMBER(5,2)" nullable;
            Date interest_eff_date_vat databaseColumn = "interest_eff_date_vat" nullable;
            BigDecimal interest_former_vat databaseColumn = "interest_former_vat" databaseType = "NUMBER(5,2)" nullable;
            BigDecimal fund databaseColumn = "fund" databaseType = "NUMBER(5,2)" nullable;
            Date eff_date_fund databaseColumn = "eff_date_fund" nullable;
            BigDecimal former_fund databaseColumn = "former_fund" databaseType = "NUMBER(5,2)" nullable;
            String bank_currency_code length = "3" nullable;
            String zip_code_option databaseColumn = "zip_code_option" length = "1" nullable;
            String ctrl_client_len databaseColumn = "ctrl_client_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_client_key databaseColumn = "ctrl_client_key" length = "1" nullable;
            String ctrl_shadow_account_len databaseColumn = "ctrl_shadow_account_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_shadow_account_key databaseColumn = "ctrl_shadow_account_key" length = "1" nullable;
            String ctrl_account_len databaseColumn = "ctrl_account_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_account_key databaseColumn = "ctrl_account_key" length = "1" nullable;
            String ctrl_chain_len databaseColumn = "ctrl_chain_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_chain_key databaseColumn = "ctrl_chain_key" length = "1" nullable;
            String ctrl_merchant_len databaseColumn = "ctrl_merchant_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_merchant_key databaseColumn = "ctrl_merchant_key" length = "1" nullable;
            String ctrl_outlet_len databaseColumn = "ctrl_outlet_len" databaseType = "NUMBER(2,0)" nullable;
            String ctrl_outlet_key databaseColumn = "ctrl_outlet_key" length = "1" nullable;
            String renew_print_delay databaseColumn = "renew_print_delay" databaseType = "NUMBER(2,0)" nullable;
            String delivery_default databaseColumn = "delivery_default" length = "1" nullable;
            String daily_autho_number_alert databaseColumn = "daily_autho_number_alert" length = "1" nullable;
            String account_number databaseColumn = "account_number" length = "24" nullable;
            String key_account databaseColumn = "key_account" length = "2" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            Date status_date databaseColumn = "status_date" nullable;

            Repository Iso_varRepository {
                findByKeys;
                findByKey;
                findByCondition hint = "cache";
                findByCriteria;
            }
        }

        DataTransferObject Iso_varVO {
            String bank_code ; String category ; String center_code ; String bank_name ; String abrev_name ; String address_1 ; String address_2 ; String
            address_3 ; String address_4 ; String city_code ; String zip_code ; String region_code ; String country_code ; String phone_1 ; String
            phone_2 ; String fax_number ; String mail ; String web_url ; String bank_member_ind ; String checking_account_ind ; String
            transmission_mode ; String multi_country_ind ; String public_bank_id ; String contact_name ; String contact_phone ; BigDecimal vat ; Date
            eff_date_vat ; BigDecimal former_vat ; BigDecimal interest_vat ; Date interest_eff_date_vat ; BigDecimal interest_former_vat ;
            BigDecimal fund ; Date eff_date_fund ; BigDecimal former_fund ; String bank_currency_code ; String zip_code_option ; String
            ctrl_client_len ; String ctrl_client_key ; String ctrl_shadow_account_len ; String ctrl_shadow_account_key ; String ctrl_account_len
            ; String ctrl_account_key ; String ctrl_chain_len ; String ctrl_chain_key ; String ctrl_merchant_len ; String ctrl_merchant_key ; String
            ctrl_outlet_len ; String ctrl_outlet_key ; String renew_print_delay ; String delivery_default ; String daily_autho_number_alert ;
            String account_number ; String key_account ; String status ; Date status_date ; Date createdDate hint ="order1=Asc" ;
			//Collection < String > bankColVO ;  Collection < String > bank_codeCollection hint = "op=in,issearch,column_entity=bank_code" ; 
      
        }

        Service Iso_varService {
            > @Iso_varRepository
            String createIso_varService(@Iso_varVO iso_varVO);
            String updateIso_varService(@Iso_varVO iso_varVO);
            String deleteIso_varService(@Iso_varVO iso_varVO);
            List<@Iso_varVO> getAllIso_varService();
            List<@Iso_varVO> searchIso_varService(@Iso_varVO iso_varVO);
          //  Map<String, Object> loadDependencies(Map<String, Object> criterias) hint =
           // "Dependency1=Center,Dependency2=Channel,Dependency3=Currency_table,Dependency4=Title_list,Dependency5=Document_list,Dependency6=Language_list,Dependency7=Pcrd_contact_position_list,Dependency8=Account_type_list,Dependency9=Bank,Dependency10=Branch,Dependency11=Bank_application_param,Dependency12=Bank_addendum,Dependency13=Pcrd_banks_param,Dependency14=Channel_type_list,Dependency15=Network,Dependency16=Transactions_definition,Dependency17=Mer_period,Dependency18=Institution_profile,Dependency19=Branch_groups";
        }
		
		/*********************** Institution_view ****************************/ 
		Entity Institution_view
		{
		databaseTable="Institution_view"
		 auditable
		 !optimisticLocking
		  scaffold
		 String identifier databaseColumn="identifier";
		 String entity_id databaseColumn="entity_id" key;
		 String entity_code databaseColumn="entity_code" key;
		 String bank_code databaseColumn="bank_code" databaseType="CHAR(6)";
		 String branch_code databaseColumn="branch_code" databaseType="CHAR(6)" nullable;
		 String category databaseColumn="category" databaseType="CHAR(2)" nullable;
		 String center_code databaseColumn="center_code" databaseType="CHAR(2)" nullable;
		 String bank_name databaseColumn="bank_name" length="40" nullable;
		 String abrev_name databaseColumn="abrev_name" length="15" nullable;
		 String grouping_code databaseColumn="grouping_code" length="3" nullable;
		 String address_1 databaseColumn="address_1" length="64" nullable;
		 String address_2 databaseColumn="address_2" length="64" nullable;
		 String address_3 databaseColumn="address_3" length="64" nullable;
		 String address_4 databaseColumn="address_4" length="64" nullable;
		 String city_code databaseColumn="city_code" databaseType="CHAR(5)" nullable;
		 String zip_code databaseColumn="zip_code" length="10" nullable;
		 String region_code databaseColumn="region_code" databaseType="CHAR(3)" nullable;
		 String country_code databaseColumn="country_code" databaseType="CHAR(3)" nullable;
		 String phone_1 databaseColumn="phone_1" length="20" nullable;
		 String phone_2 databaseColumn="phone_2" length="20" nullable;
		 String fax_number databaseColumn="fax_number" length="20" nullable;
		 String mail databaseColumn="email" length="64" nullable;
		 String web_url databaseColumn="web_url" length="60" nullable;
		 String bank_member_ind databaseColumn="bank_member_ind" databaseType="CHAR(1)" nullable;
		 String checking_account_ind databaseColumn="checking_account_ind" databaseType="CHAR(1)" nullable;
		 String transmission_mode databaseColumn="transmission_mode" databaseType="CHAR(1)" nullable;
		 String multi_country_ind databaseColumn="multi_country_ind" databaseType="CHAR(1)" nullable;
		 String public_bank_id databaseColumn="public_bank_id" length="6" nullable;
		 String contact_name databaseColumn="contact_name" length="40" nullable;
		 String contact_phone databaseColumn="contact_phone" length="20" nullable;
		 String vat databaseColumn="vat" databaseType="NUMBER(,)" nullable;
		 Date eff_date_vat databaseColumn="eff_date_vat" nullable;
		 String former_vat databaseColumn="former_vat" databaseType="NUMBER(,)" nullable;
		 String interest_vat databaseColumn="interest_vat" databaseType="NUMBER(,)" nullable;
		 Date interest_eff_date_vat databaseColumn="interest_eff_date_vat" nullable;
		 String interest_former_vat databaseColumn="interest_former_vat" databaseType="NUMBER(,)" nullable;
		 String fund databaseColumn="fund" databaseType="NUMBER(,)" nullable;
		 Date eff_date_fund databaseColumn="eff_date_fund" nullable;
		 String former_fund databaseColumn="former_fund" databaseType="NUMBER(,)" nullable;
		 String bank_currency_code databaseColumn="bank_currency_code" databaseType="CHAR(3)" nullable;
		 String zip_code_option databaseColumn="zip_code_option" databaseType="CHAR(1)" nullable;
		 String ctrl_client_len databaseColumn="ctrl_client_len" databaseType="NUMBER(,)" nullable;
		 String ctrl_client_key databaseColumn="ctrl_client_key" databaseType="CHAR(1)" nullable;
		 String ctrl_shadow_account_len databaseColumn="ctrl_shadow_account_len" databaseType="NUMBER(,)" nullable;
		 String ctrl_shadow_account_key databaseColumn="ctrl_shadow_account_key" databaseType="CHAR(1)" nullable;
		 String ctrl_account_len databaseColumn="ctrl_account_len" databaseType="NUMBER(,)" nullable;
		 String ctrl_account_key databaseColumn="ctrl_account_key" databaseType="CHAR(1)" nullable;
		 String ctrl_chain_len databaseColumn="ctrl_chain_len" databaseType="NUMBER(,)" nullable;
		 String ctrl_chain_key databaseColumn="ctrl_chain_key" databaseType="CHAR(1)" nullable;
		 String ctrl_merchant_len databaseColumn="ctrl_merchant_len" databaseType="NUMBER(,)" nullable;
		 String ctrl_merchant_key databaseColumn="ctrl_merchant_key" databaseType="CHAR(1)" nullable;
		 String ctrl_outlet_len databaseColumn="ctrl_outlet_len" databaseType="NUMBER(,)" nullable;
		 String ctrl_outlet_key databaseColumn="ctrl_outlet_key" databaseType="CHAR(1)" nullable;
		 String renew_print_delay databaseColumn="renew_print_delay" databaseType="NUMBER(2,0)" nullable;
		 String delivery_default databaseColumn="delivery_default" databaseType="CHAR(1)" nullable;
		 String daily_autho_number_alert databaseColumn="daily_autho_number_alert" databaseType="CHAR(1)" nullable;
		 String account_number databaseColumn="account_number" length="24" nullable;
		 String key_account databaseColumn="key_account" length="2" nullable;
		 String status databaseColumn="status" databaseType="CHAR(1)" nullable;
		 Date status_date databaseColumn="status_date" nullable;
		 String city_name databaseColumn="city_name" length="32" nullable;
		 String address_list_id databaseColumn="address_list_id" length="10" nullable;
		 String address_type databaseColumn="address_type" databaseType="CHAR(2)" nullable;
		 String sending_mode databaseColumn="sending_mode" databaseType="CHAR(1)" nullable;
		 String default_usage databaseColumn="default_usage" databaseType="CHAR(2)" nullable;
		 String care_of databaseColumn="care_of" length="64" nullable;
		 String phone_3 databaseColumn="phone_3" length="20" nullable;
		 String phone_4 databaseColumn="phone_4" length="20" nullable;
		 String phone_1_type databaseColumn="phone_1_type" databaseType="CHAR(1)" nullable;
		 String phone_2_type databaseColumn="phone_2_type" databaseType="CHAR(1)" nullable;
		 String phone_3_type databaseColumn="phone_3_type" databaseType="CHAR(1)" nullable;
		 String phone_4_type databaseColumn="phone_4_type" databaseType="CHAR(1)" nullable;
		 String pr_status databaseColumn="pr_status" databaseType="CHAR(1)" nullable;
		 Date status_start_date databaseColumn="status_start_date" nullable;
		 Date status_end_date databaseColumn="status_end_date" nullable;
         String new_bank_code databaseColumn="new_bank_code" databaseType="CHAR(6)" nullable;
		 String transf_prtcl_compliant_flag databaseColumn="transf_prtcl_compliant_flag" databaseType="CHAR(1)" nullable;
		 String cust_dbt_order_param_index databaseColumn="cust_dbt_order_param_index" databaseType="CHAR(6)" nullable;
		 String merch_order_param_index databaseColumn="merch_order_param_index" databaseType="CHAR(6)" nullable;
		 String cust_crdt_order_index databaseColumn="cust_crdt_order_index" databaseType="CHAR(6)" nullable;
		 String atm_agreement_flag databaseColumn="atm_agreement_flag" databaseType="CHAR(1)" nullable;
		 String atm_param_index databaseColumn="atm_param_index" databaseType="CHAR(6)" nullable;
		 String bank_processing databaseColumn="bank_processing" length="10" nullable;
		 String sensitive_operation_record databaseColumn="sensitive_operation_record" databaseType="CHAR(1)" nullable;
		 String forcing_flag databaseColumn="forcing_flag" databaseType="CHAR(1)" nullable;
		 String activity_reference_flag databaseColumn="activity_reference_flag" databaseType="CHAR(1)" nullable;
		 String multi_currency_flag databaseColumn="multi_currency_flag" databaseType="CHAR(1)" nullable;
		 String bank_identification_code databaseColumn="bank_identification_code" length="11" nullable;
		 String numbering_method databaseColumn="numbering_method" databaseType="CHAR(1)" nullable;
		 String tax_id_number databaseColumn="tax_id_number" length="40" nullable;
		 String channel_number databaseColumn="channel_number" length="15" nullable;
		 String direct_sale_agent databaseColumn="direct_sale_agent" length="15" nullable;
		 String corporation_type databaseColumn="corporation_type" databaseType="CHAR(1)" nullable;
		 String default_posting_id databaseColumn="default_posting_id" length="15" nullable;
		 String posting_criteria_id databaseColumn="posting_criteria_id" length="15" nullable;
		 String profile_code databaseColumn="profile_code" length="6" nullable;
		 String contract_duration databaseColumn="contract_duration" databaseType="NUMBER(3,0)" nullable;
		 Date agreement_date databaseColumn="agreement_date" nullable;
		 Date expiry_date databaseColumn="expiry_date" nullable;
		 String settlement_mode databaseColumn="settlement_mode" length="15" nullable;
		
		Repository Institution_viewRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Institution_viewVO { 
		 String  identifier;
		 String  entity_id;
		 String  entity_code;
		 String  bank_code;
		 String  branch_code;
		 String  category;
		 String  center_code;
		 String  bank_name;
		 String  abrev_name;
		 String  grouping_code;
		 String  address_1;
		 String  address_2;
		 String  address_3;
		 String  address_4;
		 String  city_code;
		 String  zip_code;
		 String  region_code;
		 String  country_code;
		 String  phone_1;
		 String  phone_2;
		 String  fax_number;
		 String  mail;
		 String  web_url;
		 String  bank_member_ind;
		 String  checking_account_ind;
		 String  transmission_mode;
		 String  multi_country_ind;
		 String  public_bank_id;
		 String  contact_name;
		 String  contact_phone;
		 String  vat;
		 Date    eff_date_vat;
		 String  former_vat;
		 String  interest_vat;
		 Date    interest_eff_date_vat;
		 String  interest_former_vat;
		 String  fund;
		 Date    eff_date_fund;
		 String  former_fund;
		 String  bank_currency_code;
		 String  zip_code_option;
		 String  ctrl_client_len;
		 String  ctrl_client_key;
		 String  ctrl_shadow_account_len;
		 String  ctrl_shadow_account_key;
		 String  ctrl_account_len;
		 String  ctrl_account_key;
		 String  ctrl_chain_len;
		 String  ctrl_chain_key;
		 String  ctrl_merchant_len;
		 String  ctrl_merchant_key;
		 String  ctrl_outlet_len;
		 String  ctrl_outlet_key;
		 String  renew_print_delay;
		 String  delivery_default;
		 String  daily_autho_number_alert;
		 String  account_number;
		 String  key_account;
		 String  status;
		 Date    status_date;
		 String  city_name;
		 String  address_list_id;
		 String  address_type;
		 String  sending_mode;
		 String  default_usage;
		 String  care_of;
		 String  phone_3;
		 String  phone_4;
		 String  phone_1_type;
		 String  phone_2_type;
		 String  phone_3_type;
		 String  phone_4_type;
		 String  pr_status;
		 Date    status_start_date;
		 Date    status_end_date;
         	 String  new_bank_code;
		 String  transf_prtcl_compliant_flag;
		 String  cust_dbt_order_param_index;
		 String  merch_order_param_index;
		 String  cust_crdt_order_index;
		 String  atm_agreement_flag;
		 String  atm_param_index;
		 String  bank_processing;
		 String  sensitive_operation_record;
		 String  forcing_flag;
		 String  activity_reference_flag;
		 String  multi_currency_flag;
		 String  bank_identification_code;
		 String  numbering_method;
		 String  tax_id_number;
		 String  channel_number;
		 String  direct_sale_agent;
		 String  corporation_type;
		 String  default_posting_id;
		 String  posting_criteria_id;
		 String  profile_code;
		 String  contract_duration;
		 Date  agreement_date;
		 Date  expiry_date;
		 String  settlement_mode;
		}
		Service Institution_viewService{ 
		 > @Institution_viewRepository
		 String createInstitution_viewService(@Institution_viewVO institution_viewVO);
		 String updateInstitution_viewService(@Institution_viewVO institution_viewVO);
		 String deleteInstitution_viewService(@Institution_viewVO institution_viewVO);
		 List<@Institution_viewVO> getAllInstitution_viewService();
		 List<@Institution_viewVO> searchInstitution_viewService(@Institution_viewVO institution_viewVO);
		 }

		/****************************  Pcrd_flex_iso_actionService   ****************************/
        Service Pcrd_flex_iso_actionService {
            hint = "jpubPackage=PCRD_FLEX_ISO_ACTION,Property1=jpub_datasource"
            @Get_iso_dataOutVO get_iso_data(@Get_iso_dataInVO get_iso_dataInVO);
            @Save_iso_dataOutVO save_iso_data(@Save_iso_dataInVO save_iso_dataInVO);
        }

        DataTransferObject Get_iso_dataInVO {
            Date p_business_date ;
            BigDecimal p_user_id ; 
            BigDecimal p_user_profile ; 
            String p_language_code ; 
            String p_action ; 
            String p_bank_code ;
            String p_branch_code;
        }

        DataTransferObject Get_iso_dataOutVO {
            String p_iso_data ; 
            String p_msg_error ; 
            String p_return_code ;
        }

        DataTransferObject Save_iso_dataInVO {
            Date p_business_date ; 
            BigDecimal p_user_id ; 
            BigDecimal p_user_profile ; 
            String p_language_code ; 
            String p_action ; 
            String p_iso_data ;
        }

        DataTransferObject Save_iso_dataOutVO {
            String p_msg_error ; 
            String p_return_code ;
        }
	
	        /****************************  External_id_procedure   ****************************/
        Entity External_id_procedure
		{
			databaseTable="External_id_procedure"
		 	auditable
		 	!optimisticLocking
		  	scaffold
		 	String function_name key length="100";
		 	String func_type databaseColumn="func_type" databaseType="CHAR(1)" nullable;
		 	String wording databaseColumn="wording" length="255" nullable;
		 	
			Repository External_id_procedureRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject External_id_procedureVO { 
		 	String  function_name;
		 	String  func_type;
		 	String  wording hint = "multiLang";
		 	
		}
		Service External_id_procedureService{ 
		 	> @External_id_procedureRepository
		 	String createExternal_id_procedureService(@External_id_procedureVO external_id_procedureVO);
		 	String updateExternal_id_procedureService(@External_id_procedureVO external_id_procedureVO);
		 	String deleteExternal_id_procedureService(@External_id_procedureVO external_id_procedureVO);
		 	List<@External_id_procedureVO> getAllExternal_id_procedureService();
		 	List<@External_id_procedureVO> searchExternal_id_procedureService(@External_id_procedureVO external_id_procedureVO);
		 }
        
        /****************************  External_id_gen_mode   ****************************/
        Entity External_id_gen_mode
		{
			databaseTable="External_id_gen_mode"
		 	auditable
		 	!optimisticLocking
		  	scaffold
			-@ Bank fk_external_id_gen_mode_01 key hint="BaseColumn1=bank_code";
		 	String entity_code key databaseType="CHAR(2)";
		 	String sequence_type key databaseType="CHAR(2)";
		 	String atm_flag key databaseType="CHAR(1)";
		 	String generation_mode databaseColumn="generation_mode" databaseType="CHAR(1)" nullable;
			-@ External_id_procedure fk_external_id_gen_mode_02 hint="BaseColumn1=func_generation" nullable;
			-@ External_id_procedure fk_external_id_gen_mode_03 hint="BaseColumn1=func_verification" nullable;
			Repository External_id_gen_modeRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		}
		DataTransferObject External_id_gen_modeVO { 
		 	String  bank_code;
		 	String  entity_code;
		 	String  sequence_type;
		 	String  atm_flag;
		 	String  generation_mode;
		 	String  func_generation;
		 	String  func_verification;
		}
		Service External_id_gen_modeService{ 
			 > @External_id_gen_modeRepository
			 String createExternal_id_gen_modeService(@External_id_gen_modeVO external_id_gen_modeVO);
			 String updateExternal_id_gen_modeService(@External_id_gen_modeVO external_id_gen_modeVO);
			 String deleteExternal_id_gen_modeService(@External_id_gen_modeVO external_id_gen_modeVO);
			 List<@External_id_gen_modeVO> getAllExternal_id_gen_modeService();
			 List<@External_id_gen_modeVO> searchExternal_id_gen_modeService(@External_id_gen_modeVO external_id_gen_modeVO);
			 /*Map<String, Object> loadDependencies(Map<String, Object> criterias) hint = "Dependency1=Bank,Dependency2=External_id_procedure";*/
		}
		  /****************************  V_transaction_hist_bank_view   ****************************/
				Entity Vtransaction_hist_bank_view
			{
			hint = "view"
			databaseTable="V_transaction_hist_bank_view"
			 !auditable
			 !optimisticLocking
			  scaffold
			 String microfilm_ref_number databaseColumn = "microfilm_ref_number" key length = "23";
			 String microfilm_ref_seq databaseColumn = "microfilm_ref_seq" key databaseType = "NUMBER(4,0)";
			 String country_code databaseColumn="country_code" databaseType="CHAR(3)" nullable;
			 String batch_number databaseColumn="batch_number" length="8" nullable;
			 String sending_center_code databaseColumn="sending_center_code" databaseType="CHAR(2)" nullable;
			 String sending_grouping_code databaseColumn="sending_grouping_code" databaseType="CHAR(1)" nullable;
			 String sending_bank_code databaseColumn="sending_bank_code" databaseType="CHAR(6)" nullable;
			 String sending_branch_code databaseColumn="sending_branch_code" databaseType="CHAR(6)" nullable;
			 String sending_network_code databaseColumn="sending_network_code" length="11" nullable;
			 String receiving_center_code databaseColumn="receiving_center_code" databaseType="CHAR(2)" nullable;
			 String receiving_grouping_code databaseColumn="receiving_grouping_code" databaseType="CHAR(1)" nullable;
			 String receiving_bank_code databaseColumn="receiving_bank_code" databaseType="CHAR(6)" nullable;
			 String receiving_branch_code databaseColumn="receiving_branch_code" databaseType="CHAR(6)" nullable;
			 String receiving_network_code databaseColumn="receiving_network_code" length="11" nullable;
			 String transaction_code databaseColumn="transaction_code" databaseType="CHAR(2)" nullable;
			 String transaction_sign databaseColumn="transaction_sign" databaseType="CHAR(1)" nullable;
			 String reversal_flag databaseColumn="reversal_flag" databaseType="CHAR(1)" nullable;
			 String reversal_reason_code databaseColumn="reversal_reason_code" databaseType="CHAR(2)" nullable;
			 BigDecimal transaction_amount databaseColumn="transaction_amount" databaseType="NUMBER(18,3)" nullable;
			 String transaction_currency databaseColumn="transaction_currency" databaseType="CHAR(3)" nullable;
			 String transaction_currency_exp databaseColumn="transaction_currency_exp" databaseType="NUMBER(1,0)" nullable;
			 BigDecimal billing_amount databaseColumn="billing_amount" databaseType="NUMBER(18,3)" nullable;
			 String billing_currency databaseColumn="billing_currency" databaseType="CHAR(3)" nullable;
			 String billing_currency_exp databaseColumn="billing_currency_exp" databaseType="NUMBER(1,0)" nullable;
			 BigDecimal local_amount databaseColumn="local_amount" databaseType="NUMBER(18,3)" nullable;
			 String local_currency databaseColumn="local_currency" databaseType="CHAR(3)" nullable;
			 String local_currency_exp databaseColumn="local_currency_exp" databaseType="NUMBER(1,0)" nullable;
			 Date value_date databaseColumn="value_date" nullable;
			 Date transaction_date databaseColumn="transaction_date" nullable;
			 Date processing_date databaseColumn="processing_date" nullable;
			 Date business_date databaseColumn="business_date" nullable;
			 Date reconciliation_date databaseColumn="reconciliation_date" nullable;
			 String reconciliation_indicator databaseColumn="reconciliation_indicator" databaseType="CHAR(3)" nullable;
			 String network_code databaseColumn="network_code" databaseType="CHAR(2)" nullable;
			 String incom_outg_fee_indicator databaseColumn="incom_outg_fee_indicator" databaseType="CHAR(1)" nullable;
			 String product_indicator databaseColumn="product_indicator" databaseType="CHAR(1)" nullable;
			 String fees_type_indicator databaseColumn="fees_type_indicator" databaseType="CHAR(1)" nullable;
			 String reason_code databaseColumn="reason_code" length="6" nullable;
			 String card_number databaseColumn="card_number" length="22" nullable;
			 String card_seq databaseColumn="card_seq" databaseType="NUMBER(3,0)" nullable;
			 String number_of_transaction databaseColumn="number_of_transaction" databaseType="NUMBER(8,0)" nullable;
			 BigDecimal unite_fee databaseColumn="unite_fee" databaseType="NUMBER(18,3)" nullable;
			 String controle_number databaseColumn="controle_number" length="14" nullable;
			 String member_message_text databaseColumn="member_message_text" length="100" nullable;
			 String settlement_cutoff_acc databaseColumn="settlement_cutoff_acc" length="8" nullable;
			 String settlement_cutoff_crd databaseColumn="settlement_cutoff_crd" length="8" nullable;
			 String settlement_cutoff_outg databaseColumn="settlement_cutoff_outg" length="8" nullable;
			 String settlement_cutoff_mer databaseColumn="settlement_cutoff_mer" length="8" nullable;
			 String settlement_cutoff_is databaseColumn="settlement_cutoff_is" length="8" nullable;
			 String settlement_cutoff_stat databaseColumn="settlement_cutoff_stat" length="8" nullable;
			 String settlement_cutoff_risk databaseColumn="settlement_cutoff_risk" length="8" nullable;
			 String settlement_cutoff_sco databaseColumn="settlement_cutoff_sco" length="8" nullable;
			 String settlement_cutoff_inc databaseColumn="settlement_cutoff_inc" length="8" nullable;
			 String settlement_flag_acc databaseColumn="settlement_flag_acc" databaseType="CHAR(1)" nullable;
			 String settlement_flag_crd databaseColumn="settlement_flag_crd" databaseType="CHAR(1)" nullable;
			 String settlement_flag_outg databaseColumn="settlement_flag_outg" databaseType="CHAR(1)" nullable;
			 String settlement_flag_mer databaseColumn="settlement_flag_mer" databaseType="CHAR(1)" nullable;
			 String settlement_flag_is databaseColumn="settlement_flag_is" databaseType="CHAR(1)" nullable;
			 String settlement_flag_stat databaseColumn="settlement_flag_stat" databaseType="CHAR(1)" nullable;
			 String settlement_flag_risk databaseColumn="settlement_flag_risk" databaseType="CHAR(1)" nullable;
			 String settlement_flag_sco databaseColumn="settlement_flag_sco" databaseType="CHAR(1)" nullable;
			 String settlement_flag_inc databaseColumn="settlement_flag_inc" databaseType="CHAR(1)" nullable;
			 String receiving_entity_code databaseColumn="receiving_entity_code" databaseType="CHAR(2)" nullable;
			 String receiving_entity_id databaseColumn="receiving_entity_id" length="15" nullable;
			 String transfer_id databaseColumn="transfer_id" databaseType="NUMBER(10,0)" nullable;
			 String account_number databaseColumn="account_number" length="24" nullable;
			 Date settlement_date databaseColumn="settlement_date" nullable;
			 BigDecimal settlement_amount databaseColumn="settlement_amount" databaseType="NUMBER(18,3)" nullable;
			 String settlement_currency databaseColumn="settlement_currency" databaseType="CHAR(3)" nullable;
			 String settlement_currency_exp databaseColumn="settlement_currency_exp" databaseType="NUMBER(1,0)" nullable;
			 BigDecimal to_be_settled_amount databaseColumn="to_be_settled_amount" databaseType="NUMBER(18,3)" nullable;
			 String operation_id databaseColumn="operation_id" databaseType="NUMBER(10,0)" nullable;
			 String merchant_number databaseColumn="merchant_number" length="15" nullable;
			 String outlet_number databaseColumn="outlet_number" length="15" nullable;
			 BigDecimal original_amount databaseColumn="original_amount" databaseType="NUMBER(18,3)" nullable;
			 String original_currency databaseColumn="original_currency" databaseType="CHAR(3)" nullable;
			 String original_currency_exp databaseColumn="original_currency_exp" databaseType="NUMBER(1,0)" nullable;
			 String charging_rule_id databaseColumn="charging_rule_id" length="15" nullable;
			 BigDecimal charging_rule_fixed_amount databaseColumn="charging_rule_fixed_amount" databaseType="NUMBER(18,3)" nullable;
			 BigDecimal charging_rule_percentage databaseColumn="charging_rule_percentage" databaseType="NUMBER(9,6)" nullable;
			 BigDecimal charging_rule_min_amount databaseColumn="charging_rule_min_amount" databaseType="NUMBER(18,3)" nullable;
			 BigDecimal charging_rule_max_amount databaseColumn="charging_rule_max_amount" databaseType="NUMBER(18,3)" nullable;
			 BigDecimal charging_rule_threshold databaseColumn="charging_rule_threshold" databaseType="NUMBER(18,3)" nullable;
			 String charging_rule_identifier databaseColumn="charging_rule_identifier" databaseType="CHAR(3)" nullable;
			 String charging_rule_round_method_id databaseColumn="charging_rule_round_method_id" databaseType="CHAR(1)" nullable;
			 String service_id databaseColumn="service_id" databaseType="CHAR(6)" nullable;
			 String billable_elmt_id databaseColumn="billable_elmt_id" databaseType="CHAR(4)" nullable;
			 Repository Vtransaction_hist_bank_viewRepository { 
					findByKeys;
					findByKey;
					findByCondition;//(PagingParameter pagingParameter) hint = "cache";
					findByCriteria; 
				}
			} 
			DataTransferObject Vtransaction_hist_bank_viewVO { 
			 String  microfilm_ref_number;
			 String  microfilm_ref_seq;
			 String  country_code;
			 String  batch_number;
			 String  sending_center_code;
			 String  sending_grouping_code;
			 String  sending_bank_code;
			 String  sending_branch_code;
			 String  sending_network_code;
			 String  receiving_center_code;
			 String  receiving_grouping_code;
			 String  receiving_bank_code;
			 String  receiving_branch_code;
			 String  receiving_network_code;
			 String  transaction_code;
			 String  transaction_sign;
			 String  reversal_flag;
			 String  reversal_reason_code;
			 BigDecimal  transaction_amount;
			 String  transaction_currency;
			 String  transaction_currency_exp;
			 BigDecimal  billing_amount;
			 String  billing_currency;
			 String  billing_currency_exp;
			 BigDecimal  local_amount;
			 String  local_currency;
			 String  local_currency_exp;
			 Date  value_date;
			 Date  transaction_date;
			 Date  processing_date;
			 Date  business_date;
			 Date  reconciliation_date;
			 String  reconciliation_indicator;
			 String  network_code;
			 String  incom_outg_fee_indicator;
			 String  product_indicator;
			 String  fees_type_indicator;
			 String  reason_code;
			 String  card_number hint="Mask";
			 String  card_seq;
			 String  number_of_transaction;
			 BigDecimal  unite_fee;
			 String  controle_number;
			 String  member_message_text;
			 String  settlement_cutoff_acc;
			 String  settlement_cutoff_crd;
			 String  settlement_cutoff_outg;
			 String  settlement_cutoff_mer;
			 String  settlement_cutoff_is;
			 String  settlement_cutoff_stat;
			 String  settlement_cutoff_risk;
			 String  settlement_cutoff_sco;
			 String  settlement_cutoff_inc;
			 String  settlement_flag_acc;
			 String  settlement_flag_crd;
			 String  settlement_flag_outg;
			 String  settlement_flag_mer;
			 String  settlement_flag_is;
			 String  settlement_flag_stat;
			 String  settlement_flag_risk;
			 String  settlement_flag_sco;
			 String  settlement_flag_inc;
			 String  receiving_entity_code;
			 String  receiving_entity_id;
			 String  transfer_id;
			 String  account_number;
			 Date  settlement_date;
			 BigDecimal  settlement_amount;
			 String  settlement_currency;
			 String  settlement_currency_exp;
			 BigDecimal  to_be_settled_amount;
			 String  operation_id;
			 String  merchant_number;
			 String  outlet_number;
			 BigDecimal  original_amount;
			 String  original_currency;
			 String  original_currency_exp;
			 String  charging_rule_id;
			 BigDecimal  charging_rule_fixed_amount;
			 BigDecimal  charging_rule_percentage;
			 BigDecimal  charging_rule_min_amount;
			 BigDecimal  charging_rule_max_amount;
			 BigDecimal  charging_rule_threshold;
			 String  charging_rule_identifier;
			 String  charging_rule_round_method_id;
             		 String service_id;
			 String billable_elmt_id;
			 BigDecimal  to_be_settled_amount_not_zero hint="op=greatThan,issearch,column_entity=to_be_settled_amount";
			 Date after_transaction_date hint="op=greatThanOrEqual,issearch,column_entity=transaction_date";		              
			 Date before_transaction_date hint="op=lessThanOrEqual,issearch,column_entity=transaction_date";
			 Date after_settlement_date hint="op=greatThanOrEqual,issearch,column_entity=settlement_date";		              
			 Date before_settlement_date hint="op=lessThanOrEqual,issearch,column_entity=settlement_date";
			}
			Service Vtransaction_hist_bank_viewService{ 
			 > @Vtransaction_hist_bank_viewRepository
			 String createVtransaction_hist_bank_viewService(@Vtransaction_hist_bank_viewVO vtransaction_hist_bank_viewVO);
			 String updateVtransaction_hist_bank_viewService(@Vtransaction_hist_bank_viewVO vtransaction_hist_bank_viewVO);
			 String deleteVtransaction_hist_bank_viewService(@Vtransaction_hist_bank_viewVO vtransaction_hist_bank_viewVO);
			 List<@Vtransaction_hist_bank_viewVO> getAllVtransaction_hist_bank_viewService();
			 List<@Vtransaction_hist_bank_viewVO> searchVtransaction_hist_bank_viewService(@Vtransaction_hist_bank_viewVO vtransaction_hist_bank_viewVO);
			/* Map<String, Object> loadDependencies(Map<String, Object> criterias) 
				hint = "Dependency1=Bank,
						Dependency2=Currency_table,
						Dependency3=Transactions_definition,
						Dependency4=Center";*/
			 }
				
				Entity Pcrd_supervise_param
				{
				databaseTable="Pcrd_supervise_param"
					 auditable
					 !optimisticLocking
					  scaffold
					 String resource_id key databaseType="CHAR(6)";
					 String pris_polling_time_sec databaseColumn="pris_polling_time_sec" databaseType="NUMBER(5,0)" nullable;
					 String pris_verify_by_kill databaseColumn="pris_verify_by_kill" databaseType="CHAR(1)" nullable;
					 String pris_verify_by_adm_message databaseColumn="pris_verify_by_adm_message" databaseType="CHAR(1)" nullable;
					 String pris_compare_internal_id databaseColumn="pris_compare_internal_id" databaseType="CHAR(1)" nullable;
					 String ipc_polling_time_sec databaseColumn="ipc_polling_time_sec" databaseType="NUMBER(5,0)" nullable;
					 String ufs_polling_time_sec databaseColumn="ufs_polling_time_sec" databaseType="NUMBER(5,0)" nullable;
					 String dbts_polling_time_sec databaseColumn="dbts_polling_time_sec" databaseType="NUMBER(5,0)" nullable;
					Repository Pcrd_supervise_paramRepository {
						findByKeys;findByKey;findByCondition;findByCriteria; 
					}
				} 
				DataTransferObject Pcrd_supervise_paramVO { 
					 String  resource_id;
					 String  pris_polling_time_sec;
					 String  pris_verify_by_kill;
					 String  pris_verify_by_adm_message;
					 String  pris_compare_internal_id;
					 String  ipc_polling_time_sec;
					 String  ufs_polling_time_sec;
					 String  dbts_polling_time_sec;
				}
				Service Pcrd_supervise_paramService{ 
					 > @Pcrd_supervise_paramRepository
					 String createPcrd_supervise_paramService(@Pcrd_supervise_paramVO pcrd_supervise_paramVO);
					 String updatePcrd_supervise_paramService(@Pcrd_supervise_paramVO pcrd_supervise_paramVO);
					 String deletePcrd_supervise_paramService(@Pcrd_supervise_paramVO pcrd_supervise_paramVO);
					 List<@Pcrd_supervise_paramVO> getAllPcrd_supervise_paramService();
					 List<@Pcrd_supervise_paramVO> searchPcrd_supervise_paramService(@Pcrd_supervise_paramVO pcrd_supervise_paramVO);
				//	 Map<String, Object> loadDependencies(Map<String,Object> criterias) hint="Dependency1=Switch_nodes,Dependency2=Resources";
				 }

				
				
			Entity Swi_emv_tags_list
			{
				databaseTable="Swi_emv_tags_list"
				auditable
				!optimisticLocking
				scaffold
				String tag key length="6";
				String db_tag ;
				String name databaseColumn="name" length="32" nullable;
				String description databaseColumn="description" length="128" nullable;
				String format databaseColumn="format" databaseType="CHAR(1)" nullable;
				Repository Swi_emv_tags_listRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
			} 
			
			DataTransferObject Swi_emv_tags_listVO 
			{ 
				String  tag;
				String  db_tag;
				String  name;
				String  description;
				String  format;
			}
			
			Service Swi_emv_tags_listService
			{ 
				> @Swi_emv_tags_listRepository
				String createSwi_emv_tags_listService(@Swi_emv_tags_listVO swi_emv_tags_listVO);
				String updateSwi_emv_tags_listService(@Swi_emv_tags_listVO swi_emv_tags_listVO);
				String deleteSwi_emv_tags_listService(@Swi_emv_tags_listVO swi_emv_tags_listVO);
				List<@Swi_emv_tags_listVO> getAllSwi_emv_tags_listService();
				List<@Swi_emv_tags_listVO> searchSwi_emv_tags_listService(@Swi_emv_tags_listVO swi_emv_tags_listVO);
			}
			
			Entity Swi_bank_emv_tags_list
			{
				databaseTable="Swi_bank_emv_tags_list"
				auditable
				!optimisticLocking
				scaffold
				String bank_code key ;
				String tag 		 key ;
				String db_tag nullable;
				String name   nullable;
				String description  nullable;
				String format       nullable;
				Repository Swi_bank_emv_tags_listRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
			} 
			
			DataTransferObject Swi_bank_emv_tags_listVO 
			{ 
				String  bank_code;
				String  tag;
				String  db_tag;
				String  name;
				String  description;
				String  format;
			}
			
			Service Swi_bank_emv_tags_listService
			{ 
				> @Swi_bank_emv_tags_listRepository
				String createSwi_bank_emv_tags_listService(@Swi_bank_emv_tags_listVO swi_bank_emv_tags_listVO);
				String updateSwi_bank_emv_tags_listService(@Swi_bank_emv_tags_listVO swi_bank_emv_tags_listVO);
				String deleteSwi_bank_emv_tags_listService(@Swi_bank_emv_tags_listVO swi_bank_emv_tags_listVO);
				List<@Swi_bank_emv_tags_listVO> getAllSwi_bank_emv_tags_listService();
				List<@Swi_bank_emv_tags_listVO> searchSwi_bank_emv_tags_listService(@Swi_bank_emv_tags_listVO swi_bank_emv_tags_listVO);
			//	Map<String, Object> loadDependencies(Map<String, Object> criterias) hint ="Dependency1=Bank,Dependency2=Swi_emv_tags_list";
			}
	/****************************  INSTITUTION_PROFILE   ****************************/
				 
				Entity Institution_profile
				{
				databaseTable="Institution_profile"
				 auditable
				 !optimisticLocking
				  scaffold
				 String profile_code key length="6";
				 String profile_name databaseColumn="profile_name" length="30" nullable;
				 String profile_desc databaseColumn="profile_desc" length="60" nullable;
				// String multi_lang_id databaseColumn="multi_lang_id" databaseType="NUMBER(10,0)" nullable;
				Repository Institution_profileRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Institution_profileVO { 
				 String  profile_code;
				 String  profile_name hint="multiLang";
				 String  profile_desc hint="multiLang";
				// String  multi_lang_id;
				}
				Service Institution_profileService{ 
				 > @Institution_profileRepository
				 > @Institution_profile_servicesService
 				 > @Institution_chargesService
                 		 > @Institution_billing_criteriaService
				 String createInstitution_profileService(@Institution_profileVO institution_profileVO);
				 String updateInstitution_profileService(@Institution_profileVO institution_profileVO);
				 String deleteInstitution_profileService(@Institution_profileVO institution_profileVO);
				 List<@Institution_profileVO> getAllInstitution_profileService();
				 List<@Institution_profileVO> searchInstitution_profileService(@Institution_profileVO institution_profileVO);
				// Map<String, Object> loadDependencies(Map<String,Object> criterias) hint="Dependency1=Institution_profile_services,Dependency2=Institution_services_list,Dependency3=Institution_billable_elmts,Dependency4=Institution_charging_methods,Dependency5=Institution_charges,Dependency6=Mer_period,Dependency7=Transactions_definition,Dependency8=Currency_table,Dependency9=Institution_service_bill_elmts,Dependency10=Network,Dependency11=Institution_billing_criteria";
				 String processOperations(com.google.gson.JsonObject mapVO) hint = "multiOperations,Entity1=Institution_profile,Entity2=Institution_profile_services,Entity3=Institution_charges,Entity4=Institution_billing_criteria";
				 }
				 
				 /****************************  Institution_profile_services   ****************************/
				 
				Entity Institution_profile_services
				{
					databaseTable="Institution_profile_services"
					 auditable
					 !optimisticLocking
					  scaffold
					-@ Institution_profile fk_inst_profile_service_01 key hint="BaseColumn1=profile_code";
					-@ Institution_services_list fk_inst_profile_service_02 key hint="BaseColumn1=service_id";
					-@ Institution_billable_elmts fk_inst_profile_service_03 key hint="BaseColumn1=billable_elmt_id";
					-@ Institution_charging_methods fk_inst_profile_service_04 hint="BaseColumn1=method_id" nullable;
					-@ Institution_charges fk_inst_profile_service_05 hint="BaseColumn1=charging_id" nullable;
					 String criteria_id databaseColumn="criteria_id" length="15" nullable;
					Repository Institution_profile_servicesRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
					} 
					DataTransferObject Institution_profile_servicesVO { 
					 String  profile_code;
					 String  service_id;
					 String  billable_elmt_id;
					 String  method_id;
					 String  charging_id;
					 String  criteria_id;
					}
					Service Institution_profile_servicesService{ 
					 > @Institution_profile_servicesRepository
					 String createInstitution_profile_servicesService(@Institution_profile_servicesVO institution_profile_servicesVO);
					 String updateInstitution_profile_servicesService(@Institution_profile_servicesVO institution_profile_servicesVO);
					 String deleteInstitution_profile_servicesService(@Institution_profile_servicesVO institution_profile_servicesVO);
					 List<@Institution_profile_servicesVO> getAllInstitution_profile_servicesService();
					 List<@Institution_profile_servicesVO> searchInstitution_profile_servicesService(@Institution_profile_servicesVO institution_profile_servicesVO);
				 	 String createAllInstitution_profile_servicesService(List<@Institution_profile_servicesVO> list_institution_profile_services);
					 String updateAllInstitution_profile_servicesService(List<@Institution_profile_servicesVO> list_institution_profile_services);
					 String deleteAllInstitution_profile_servicesService(List<@Institution_profile_servicesVO> list_institution_profile_services);
					 String mergeAllInstitution_profile_servicesService(List<@Institution_profile_servicesVO> list_institution_profile_services);	
 					 String mergeInstitution_profile_servicesService(@Institution_profile_servicesVO institution_profile_servicesVO);	
				 }
				 
				/****************************  INSTITUTION_CHARGES   ****************************/				 
						
				Entity Institution_charges
				{
				databaseTable="Institution_charges"
				 auditable
				 !optimisticLocking
				  scaffold
				 String charging_id key length="15";
				 BigDecimal charging_sequence databaseColumn="charging_sequence" databaseType="NUMBER(22,24)" nullable;
				 String period_id hint="BaseColumn1=period_id" nullable;
				 String name databaseColumn="name" length="60" nullable;
				 BigDecimal grace_amount databaseColumn="grace_amount" databaseType="NUMBER(22,18)" nullable;
				 String fee_generation_mode databaseColumn="fee_generation_mode" databaseType="CHAR(1)" nullable;
				 String fee_transaction_code hint="BaseColumn1=fee_transaction_code" nullable;
				 String fee_reversal_flag databaseColumn="fee_reversal_flag" databaseType="CHAR(1)" nullable;
				-@ Currency_table fk_institution_charges_01 hint="BaseColumn1=fee_generation_currency" nullable;
				 String tax_calculation_flag databaseColumn="tax_calculation_flag" databaseType="CHAR(1)" nullable;
				 String invoice_generation_flag databaseColumn="invoice_generation_flag" databaseType="CHAR(1)" nullable;
				 BigDecimal fixed_amount databaseColumn="fixed_amount" databaseType="NUMBER(22,18)" nullable;
				 BigDecimal rate databaseColumn="rate" databaseType="NUMBER(22,9)" nullable;
				 BigDecimal min_amount databaseColumn="min_amount" databaseType="NUMBER(22,18)" nullable;
				 BigDecimal max_amount databaseColumn="max_amount" databaseType="NUMBER(22,18)" nullable;
				 BigDecimal threshold databaseColumn="threshold" databaseType="NUMBER(22,18)" nullable;
				 String rule_identifier databaseColumn="rule_identifier" databaseType="CHAR(3)" nullable;
				 String rounded_method_identifier databaseColumn="rounded_method_identifier" databaseType="CHAR(1)" nullable;
				 BigDecimal precision databaseColumn="precision" databaseType="NUMBER(22,1)" nullable;
				 Date charging_start_date databaseColumn="charging_start_date" nullable;
				 Date charging_end_date databaseColumn="charging_end_date" nullable;
				Repository Institution_chargesRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Institution_chargesVO { 
				 String  charging_id;
				 BigDecimal  charging_sequence;
				 String  period_id;
				 String  name;
				 BigDecimal  grace_amount;
				 String  fee_generation_mode;
				 String  fee_transaction_code;
				 String  fee_reversal_flag;
				 String  fee_generation_currency;
				 String  tax_calculation_flag;
				 String  invoice_generation_flag;
				 BigDecimal  fixed_amount;
				 BigDecimal  rate;
				 BigDecimal  min_amount;
				 BigDecimal  max_amount;
				 BigDecimal  threshold;
				 String  rule_identifier;
				 String  rounded_method_identifier;
				 BigDecimal  precision;
				 Date  charging_start_date;
				 Date  charging_end_date;
                 		Collection < String > inCharging_id hint ="op=in,issearch,column_entity=charging_id" ;
				}
				Service Institution_chargesService{ 
				 > @Institution_chargesRepository
				 String createInstitution_chargesService(@Institution_chargesVO institution_chargesVO);
				 String updateInstitution_chargesService(@Institution_chargesVO institution_chargesVO);
				 String deleteInstitution_chargesService(@Institution_chargesVO institution_chargesVO);
				 List<@Institution_chargesVO> getAllInstitution_chargesService();
				 List<@Institution_chargesVO> searchInstitution_chargesService(@Institution_chargesVO institution_chargesVO);
				 String createAllInstitution_chargesService(List<@Institution_chargesVO> list_institution_charges);
				 String updateAllInstitution_chargesService(List<@Institution_chargesVO> list_institution_charges);
				 String deleteAllInstitution_chargesService(List<@Institution_chargesVO> list_institution_charges);
				 String mergeAllInstitution_chargesService(List<@Institution_chargesVO> list_institution_charges);	
 				 String mergeInstitution_chargesService(@Institution_chargesVO institution_chargesVO);
				 }
				 
				/****************************  INSTITUTION_SERVICES_LIST   ****************************/	
					
				Entity Institution_services_list
				{
				databaseTable="Institution_services_list"
				 auditable
				 !optimisticLocking
				  scaffold
				 String service_id key databaseType="CHAR(6)";
				 String service_name databaseColumn="service_name" length="15" nullable;
				 String service_description databaseColumn="service_description" length="40" nullable;
				// String multi_lang_id databaseColumn="multi_lang_id" databaseType="NUMBER(10,0)" nullable;
				Repository Institution_services_listRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Institution_services_listVO { 
				 String  service_id;
				 String  service_name hint="multiLang";
				 String  service_description hint="multiLang";
				// String  multi_lang_id;
				}
				Service Institution_services_listService{ 
				 > @Institution_services_listRepository
				 String createInstitution_services_listService(@Institution_services_listVO institution_services_listVO);
				 String updateInstitution_services_listService(@Institution_services_listVO institution_services_listVO);
				 String deleteInstitution_services_listService(@Institution_services_listVO institution_services_listVO);
				 List<@Institution_services_listVO> getAllInstitution_services_listService();
				 List<@Institution_services_listVO> searchInstitution_services_listService(@Institution_services_listVO institution_services_listVO);
				 }
						
				/****************************  INSTITUTION_BILLABLE_ELMTS   ****************************/
				
				Entity Institution_billable_elmts
				{
				databaseTable="Institution_billable_elmts"
				 auditable
				 !optimisticLocking
				  scaffold
				 String billable_elmt_id key databaseType="CHAR(4)";
				 String description databaseColumn="description" length="60" nullable;
				 String billable_type databaseColumn="billable_type" databaseType="CHAR(1)" nullable;
				 String external_code databaseColumn="external_code" length="30" nullable;
				// String multi_lang_id databaseColumn="multi_lang_id" databaseType="NUMBER(10,0)" nullable;
				Repository Institution_billable_elmtsRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Institution_billable_elmtsVO { 
				 String  billable_elmt_id;
				 String  description hint="multiLang";
				 String  billable_type;
				 String  external_code;
				 //String  multi_lang_id;
				}
				Service Institution_billable_elmtsService{ 
				 > @Institution_billable_elmtsRepository
				 String createInstitution_billable_elmtsService(@Institution_billable_elmtsVO institution_billable_elmtsVO);
				 String updateInstitution_billable_elmtsService(@Institution_billable_elmtsVO institution_billable_elmtsVO);
				 String deleteInstitution_billable_elmtsService(@Institution_billable_elmtsVO institution_billable_elmtsVO);
				 List<@Institution_billable_elmtsVO> getAllInstitution_billable_elmtsService();
				 List<@Institution_billable_elmtsVO> searchInstitution_billable_elmtsService(@Institution_billable_elmtsVO institution_billable_elmtsVO);
				 }
				 
				 /****************************  INSTITUTION_SERVICE_BILL_ELMTS   ****************************/
				 
				Entity Institution_service_bill_elmts
				{
				databaseTable="Institution_service_bill_elmts"
				 auditable
				 !optimisticLocking
				  scaffold
				-@ Institution_services_list fk_inst_services_bill_elmts_01 key hint="BaseColumn1=service_id";
				-@ Institution_billable_elmts fk_inst_services_bill_elmts_02 key hint="BaseColumn1=billable_elmt_id";
				 String billing_event databaseColumn="billing_event" databaseType="CHAR(1)" nullable;
 				 String transaction_code databaseColumn="transaction_code" databaseType="CHAR(2)" nullable;
				Repository Institution_service_bill_elmtsRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Institution_service_bill_elmtsVO { 
				 String  service_id;
				 String  billable_elmt_id;
				 String  billing_event;
 				 String  transaction_code;
				}
				Service Institution_service_bill_elmtsService{ 
				 > @Institution_service_bill_elmtsRepository
				 String createInstitution_service_bill_elmtsService(@Institution_service_bill_elmtsVO institution_service_bill_elmtsVO);
				 String updateInstitution_service_bill_elmtsService(@Institution_service_bill_elmtsVO institution_service_bill_elmtsVO);
				 String deleteInstitution_service_bill_elmtsService(@Institution_service_bill_elmtsVO institution_service_bill_elmtsVO);
				 List<@Institution_service_bill_elmtsVO> getAllInstitution_service_bill_elmtsService();
				 List<@Institution_service_bill_elmtsVO> searchInstitution_service_bill_elmtsService(@Institution_service_bill_elmtsVO institution_service_bill_elmtsVO);
				 }
				 	 /*************************************************************Bank_group*************************************************/
				Entity Bank_group
				{
				databaseTable="Bank_group"
				 auditable
				 hint = "cacheNotifier,cacheFamily=general_params"
				 !optimisticLocking
				  scaffold
				 String group_code key length="6";
				 String wording databaseColumn="wording" length="32" nullable;
				 String abrv_wording databaseColumn="abrv_wording" length="16" nullable;
				 String private_data_1 databaseColumn="private_data_1" length="32" nullable;
				 String private_data_2 databaseColumn="private_data_2" length="32" nullable;
				 - Set<@Bank_group_association> bank_group_associations cascade = "all-delete-orphan" opposite fk_bank_group;
				Repository Bank_groupRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Bank_groupVO { 
				 String  group_code;
				 String  wording;
				 String  abrv_wording;
				 String  private_data_1;
				 String  private_data_2;
				 Collection <Bank_group_associationVO> bank_group_associations_col hint="Set=bank_group_associations" ;
				 Collection < String > group_codeCollection hint = "op=in,issearch,column_entity=group_code" ;
				}
				Service Bank_groupService{ 
				 > @Bank_groupRepository
				 > @BankRepository
				 > @Bank_group_associationRepository
				 > @Bank_group_associationService
				 String createBank_groupService(@Bank_groupVO bank_groupVO);
				 String updateBank_groupService(@Bank_groupVO bank_groupVO);
				 String deleteBank_groupService(@Bank_groupVO bank_groupVO);
				 List<@Bank_groupVO> getAllBank_groupService();
				 List<@Bank_groupVO> searchBank_groupService(@Bank_groupVO bank_groupVO);
				 Map<String,Object> loadDependencies(Map<String,Object> criterias) hint="Dependency1=Bank,Dependency2=Bank_group_association,Dependency3=Bank_group";
				 String processOperations(com.google.gson.JsonObject mapVO) hint = "multiOperations,Entity1=Bank_group,Entity2=Bank_group_association";
				 }	
					
				 /*************************************************************Bank_group_association*************************************************/	
					Entity Bank_group_association
				{
				databaseTable="Bank_group_association"
				 auditable
				 !optimisticLocking
				  scaffold
				 //String bank_code key length="6";
				 -@Bank fk_bank_code key hint = "BaseColumn1=bank_code" ;
				 -@Bank_group fk_bank_group key hint="BaseColumn1=group_code" opposite bank_group_associations;
				Repository Bank_group_associationRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Bank_group_associationVO { 
				 String  bank_code;
				 String  group_code;

				}
				Service Bank_group_associationService{ 
				 > @Bank_group_associationRepository
				 String createBank_group_associationService(@Bank_group_associationVO bank_group_associationVO);
				 String updateBank_group_associationService(@Bank_group_associationVO bank_group_associationVO);
				 String deleteBank_group_associationService(@Bank_group_associationVO bank_group_associationVO);
				 List<@Bank_group_associationVO> getAllBank_group_associationService();
				 List<@Bank_group_associationVO> searchBank_group_associationService(@Bank_group_associationVO bank_group_associationVO);
				 String mergeBank_group_associationService(@Bank_group_associationVO bank_group_associationVO);
				 String mergeAllBank_group_associationService(List<@Bank_group_associationVO> listBank_group_association);
				 }
				 
				 
				 
				 
				 /****************************  INSTITUTION_CHARGING_METHODS   ****************************/
				 
				Entity Institution_charging_methods
				{
				databaseTable="Institution_charging_methods"
				 auditable
				 !optimisticLocking
				  scaffold
				 String method_id key databaseType="CHAR(10)";
				 String description databaseColumn="description" length="40" nullable;
				 String external_code databaseColumn="external_code" length="30" nullable;
				// String multi_lang_id databaseColumn="multi_lang_id" databaseType="NUMBER(10,0)" nullable;
				Repository Institution_charging_methodsRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Institution_charging_methodsVO { 
				 String  method_id;
				 String  description hint="multiLang";
				 String  external_code;
				 //String  multi_lang_id;
				}
				Service Institution_charging_methodsService{ 
				 > @Institution_charging_methodsRepository
				 String createInstitution_charging_methodsService(@Institution_charging_methodsVO institution_charging_methodsVO);
				 String updateInstitution_charging_methodsService(@Institution_charging_methodsVO institution_charging_methodsVO);
				 String deleteInstitution_charging_methodsService(@Institution_charging_methodsVO institution_charging_methodsVO);
				 List<@Institution_charging_methodsVO> getAllInstitution_charging_methodsService();
				 List<@Institution_charging_methodsVO> searchInstitution_charging_methodsService(@Institution_charging_methodsVO institution_charging_methodsVO);
				 }	
				 
				Entity Vres_event_actions_view
				{
				hint = "view"
				databaseTable="V_res_event_actions_view"
				  !auditable
				  !optimisticLocking
				  scaffold
				 String event_label key databaseColumn="event_label" length="50" ;
				 String event_id key databaseColumn="event_id" databaseType="CHAR(4)";
				 String resource_code key databaseColumn="resource_code" databaseType="CHAR(2)" ;
				 String resource_type key databaseColumn="resource_type" databaseType="CHAR(1)" ;
				 String prop key databaseColumn="prop" length="1" ;
				Repository Vres_event_actions_viewRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Vres_event_actions_viewVO { 
				 String  event_label;
				 String  event_id;
				 String  resource_code;
				 String  resource_type;
				 String  prop;
				}
				Service Vres_event_actions_viewService{ 
				 > @Vres_event_actions_viewRepository
				 String createVres_event_actions_viewService(@Vres_event_actions_viewVO vres_event_actions_viewVO);
				 String updateVres_event_actions_viewService(@Vres_event_actions_viewVO vres_event_actions_viewVO);
				 String deleteVres_event_actions_viewService(@Vres_event_actions_viewVO vres_event_actions_viewVO);
				 List<@Vres_event_actions_viewVO> getAllVres_event_actions_viewService();
				 List<@Vres_event_actions_viewVO> searchVres_event_actions_viewService(@Vres_event_actions_viewVO vres_event_actions_viewVO);
				 } 
		 /****************************  INSTITUTION_BILLING_CRITERIA   ****************************/
				 
				 Entity Institution_billing_criteria
				{
				databaseTable="Institution_billing_criteria"
				 auditable
				 !optimisticLocking
				  scaffold
				 String criteria_id key length="15";
				 String criteria_sequence key databaseType="NUMBER(3,0)";
				 String posting_id databaseColumn="posting_id" length="15" nullable;
				 String charging_id databaseColumn="charging_id" length="15" nullable;
				 String bank_code databaseColumn="bank_code" databaseType="CHAR(6)" nullable;
				 String entity_code databaseColumn="entity_code" databaseType="CHAR(2)" nullable;
				 String entity_id databaseColumn="entity_id" length="15" nullable;
				 String network_code databaseColumn="network_code" databaseType="CHAR(2)" nullable;
				 String transaction_code databaseColumn="transaction_code" databaseType="CHAR(2)" nullable;
				 String remittance_type databaseColumn="remittance_type" databaseType="CHAR(1)" nullable;
				 String currency_code databaseColumn="currency_code" databaseType="CHAR(3)" nullable;
				 String regulation_context_type databaseColumn="regulation_context_type" databaseType="CHAR(2)" nullable;
				 String territorial_id databaseColumn="territorial_id" databaseType="CHAR(2)" nullable;
				 String regulation_context databaseColumn="regulation_context" databaseType="CHAR(10)" nullable;
				 String card_payment_mode databaseColumn="card_payment_mode" databaseType="CHAR(1)" nullable;
				 String card_type databaseColumn="card_type" databaseType="CHAR(1)" nullable;
				 String ecom_security_level databaseColumn="ecom_security_level" databaseType="CHAR(3)" nullable;
				 String entry_mode databaseColumn="entry_mode" databaseType="CHAR(1)" nullable;
				 String reason_code databaseColumn="reason_code" databaseType="CHAR(2)" nullable;
				 String reversal_flag databaseColumn="reversal_flag" databaseType="CHAR(1)" nullable;
				 String criteria_threshold_unit databaseColumn="criteria_threshold_unit" databaseType="CHAR(1)" nullable;
				 BigDecimal criteria_threshold_start databaseColumn="criteria_threshold_start" databaseType="NUMBER(18,3)" nullable;
				 BigDecimal criteria_threshold_end databaseColumn="criteria_threshold_end" databaseType="NUMBER(18,3)" nullable;
				 String criteria_threshold_level databaseColumn="criteria_threshold_level" databaseType="CHAR(2)" nullable;
				Repository Institution_billing_criteriaRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
				} 
				DataTransferObject Institution_billing_criteriaVO { 
				 String  criteria_id;
				 String  criteria_sequence;
				 String  posting_id;
				 String  charging_id;
				 String  bank_code;
				 String  entity_code;
				 String  entity_id;
				 String  network_code;
				 String  transaction_code;
				 String  remittance_type;
				 String  currency_code;
				 String  regulation_context_type;
				 String  territorial_id;
				 String  regulation_context;
				 String  card_payment_mode;
				 String  card_type;
				 String  ecom_security_level;
				 String  entry_mode;
				 String  reason_code;
				 String  reversal_flag;
				 String  criteria_threshold_unit;
				 BigDecimal  criteria_threshold_start;
				 BigDecimal  criteria_threshold_end;
				 String  criteria_threshold_level;
				 Collection < String > inCriteria_id hint ="op=in,issearch,column_entity=criteria_id" ;
				}
				
				Service Institution_billing_criteriaService{ 
				 > @Institution_billing_criteriaRepository
				 String createInstitution_billing_criteriaService(@Institution_billing_criteriaVO institution_billing_criteriaVO);
				 String updateInstitution_billing_criteriaService(@Institution_billing_criteriaVO institution_billing_criteriaVO);
				 String deleteInstitution_billing_criteriaService(@Institution_billing_criteriaVO institution_billing_criteriaVO);
				 List<@Institution_billing_criteriaVO> getAllInstitution_billing_criteriaService();
				 List<@Institution_billing_criteriaVO> searchInstitution_billing_criteriaService(@Institution_billing_criteriaVO institution_billing_criteriaVO);
				 String createAllInstitution_billing_criteriaService(List<@Institution_billing_criteriaVO> list_institution_billing_criteria);
				 String updateAllInstitution_billing_criteriaService(List<@Institution_billing_criteriaVO> list_institution_billing_criteria);
				 String deleteAllInstitution_billing_criteriaService(List<@Institution_billing_criteriaVO> list_institution_billing_criteria);
				 String mergeAllInstitution_billing_criteriaService(List<@Institution_billing_criteriaVO> list_institution_billing_criteria);	
 				 String mergeInstitution_billing_criteriaService(@Institution_billing_criteriaVO institution_billing_criteriaVO);
				 }
				 				
				/****************************  PCRD_FLEX_INST_TOOLS_1   ****************************/
				Service Pcrd_flex_inst_tools_1Service 
				{
					hint="jpubPackage=PCRD_FLEX_INST_TOOLS_1,Property1=jpub_datasource"
					@Activate_institutionOutVO activate_institution(@Activate_institutionInVO activate_institutionInVO );
					@Change_statusOutVO change_status(@Change_statusInVO change_statusInVO );
				}
				DataTransferObject Activate_institutionInVO 
				{
					String p_bank_code;
					String p_branch_code;
					String p_inst_name;
					String p_category;
					Date p_business_date;
					String p_langue;
				}
				DataTransferObject Activate_institutionOutVO 
				{
					String p_msg_error;
					String p_return_code;
				}
				
				DataTransferObject Change_statusInVO 
				{
					Date p_business_date;
					String p_bank_code;
					String p_branch_code;

					String p_category;
					String p_old_status;
					String p_new_status;
					String p_langue;

				}
				DataTransferObject Change_statusOutVO 
				{
					String p_msg_error;
					String p_return_code;

				}

		/**************************** Pcrd_flex_compliance_toolsService ****************************/
		
		Service Pcrd_flex_compliance_toolsService {
		    hint = "jpubPackage=PCRD_FLEX_COMPLIANCE_TOOLS,Property1=jpub_datasource"
		    @Unblock_userOutVO unblock_user(@Unblock_userInVO unblock_userInVO);
		}

		DataTransferObject Unblock_userInVO {
		    String p_bank_code ; Float p_blocked_id ; String p_user_code ; String p_user_unblocking ; Date p_date_blocking ; Date p_date_unblocking ;
		    String p_langue ;
		}

		DataTransferObject Unblock_userOutVO {
		    String p_msg_error ; String p_return_code ;
		}
		
		
		
		/**************************** Pcard_id_external_sequence ****************************/
		Entity Pcard_id_external_sequence
		{
		databaseTable="Pcard_id_external_sequence"
		 auditable
		 !optimisticLocking
		  scaffold
		 String sequence_id key hint = "AutoGenerated";
		-@ Bank fk_pcard_id_external_seq_01 hint="BaseColumn1=bank_code" nullable;
		 String entity_code databaseColumn="entity_code" databaseType="CHAR(2)" nullable;
		 String sequence_type databaseColumn="sequence_type" databaseType="CHAR(2)" nullable;
		 String sequence_start databaseColumn="sequence_start" databaseType="NUMBER(15,0)" nullable;
		 String sequence_end databaseColumn="sequence_end" databaseType="NUMBER(15,0)" nullable;
		 String sequence_value databaseColumn="sequence_value" databaseType="NUMBER(15,0)" nullable;
		 String sequence_order databaseColumn="sequence_order" databaseType="NUMBER(3,0)" nullable;
		 String range_indicator databaseColumn="range_indicator" databaseType="CHAR(1)" nullable;
		 String activation_indicator databaseColumn="activation_indicator" databaseType="CHAR(1)" nullable;
		 String priority databaseColumn="priority" databaseType="NUMBER(2,0)" nullable;
		 String private_data_1 databaseColumn="private_data_1" length="30" nullable;
		 String private_data_2 databaseColumn="private_data_2" length="30" nullable;
		 String private_data_3 databaseColumn="private_data_3" length="30" nullable;
		 String private_data_4 databaseColumn="private_data_4" length="30" nullable;
		Repository Pcard_id_external_sequenceRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Pcard_id_external_sequenceVO { 
		 String  sequence_id;
		 String  bank_code;
		 String  entity_code;
		 String  sequence_type;
		 String  sequence_start;
		 String  sequence_end;
		 String  sequence_value;
		 String  sequence_order;
		 String  range_indicator;
		 String  activation_indicator;
		 String  priority;
		 String  private_data_1;
		 String  private_data_2;
		 String  private_data_3;
		 String  private_data_4;
		}
		Service Pcard_id_external_sequenceService{ 
		 > @Pcard_id_external_sequenceRepository
		 String createPcard_id_external_sequenceService(@Pcard_id_external_sequenceVO pcard_id_external_sequenceVO);
		 String updatePcard_id_external_sequenceService(@Pcard_id_external_sequenceVO pcard_id_external_sequenceVO);
		 String deletePcard_id_external_sequenceService(@Pcard_id_external_sequenceVO pcard_id_external_sequenceVO);
		 List<@Pcard_id_external_sequenceVO> getAllPcard_id_external_sequenceService();
		 List<@Pcard_id_external_sequenceVO> searchPcard_id_external_sequenceService(@Pcard_id_external_sequenceVO pcard_id_external_sequenceVO);
		 }

		/**************************** Pcard_cre_sequence ****************************/
		Entity Pcard_cre_sequence
		{
			databaseTable="Pcard_cre_sequence" auditable
			!optimisticLocking
			scaffold
			String sequence_id key databaseType="NUMBER(10,0)";
			String cre_number databaseColumn = "cre_number" length = "10" nullable;
			String cre_name databaseColumn = "cre_name" length = "40" nullable;
			String cycle_indicator databaseColumn = "cycle_indicator" length = "1" nullable;
			String increment_by databaseColumn = "increment_by" databaseType = "NUMBER(12,0)" nullable;
			String seq_start_with databaseColumn = "seq_start_with" databaseType = "NUMBER(22,0)" nullable;
			String seq_min_val databaseColumn = "seq_min_val" databaseType = "NUMBER(22,0)" nullable;
			String seq_max_val databaseColumn = "seq_max_val" databaseType = "NUMBER(22,0)" nullable;
			String seq_current_val databaseColumn = "seq_current_val" databaseType = "NUMBER(22,0)" nullable;
			
			Repository Pcard_cre_sequenceRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
		}
		
		DataTransferObject Pcard_cre_sequenceVO {
			String sequence_id;
			String cre_number;
			String cre_name;
			String cycle_indicator;
			String increment_by;
			String seq_start_with;
			String seq_min_val;
			String seq_max_val;
			String seq_current_val;
		}
		
		Service Pcard_cre_sequenceService {
			> @Pcard_cre_sequenceRepository
			String createPcard_cre_sequenceService(@Pcard_cre_sequenceVO pcard_cre_sequenceVO);
			String updatePcard_cre_sequenceService(@Pcard_cre_sequenceVO pcard_cre_sequenceVO);
			String deletePcard_cre_sequenceService(@Pcard_cre_sequenceVO pcard_cre_sequenceVO);
			List<@Pcard_cre_sequenceVO> getAllPcard_cre_sequenceService();
			List<@Pcard_cre_sequenceVO> searchPcard_cre_sequenceService(@Pcard_cre_sequenceVO pcard_cre_sequenceVO);
		}
        
        
        Entity Address_list_app {
            databaseTable = "Address_list_app" auditable
            ! optimisticLocking
            scaffold
            String list_id key length = "15";
            String address_sequence key length = "15";
			 - @Address_details_app address_details_app_fk hint = "BaseColumn1=address_id" nullable fetch = "lazy" ;
            String service_id databaseColumn = "service_id" length = "6" nullable;
            String address_type databaseColumn = "address_type" length = "2" nullable;
            String default_usage databaseColumn = "default_usage" length = "2" nullable;
            String sending_mode databaseColumn = "sending_mode" length = "1" nullable;
            String default_address_flag databaseColumn = "default_address_flag" length = "1" nullable;
            String address_owner databaseColumn = "address_owner" length = "2" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            Date status_start_date databaseColumn = "status_start_date" nullable;
            Date status_end_date databaseColumn = "status_end_date" nullable;

            Repository Address_list_appRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Address_list_appVO {
            String list_id ; String address_sequence ; String address_id ; String service_id ; String address_type ; String default_usage ; String
            sending_mode ; String default_address_flag ; String address_owner ; String status ; Date status_start_date ; Date status_end_date ;
			Address_details_appVO ref_address_details_app hint = "reference=address_details_app_fk" ;
            Collection < String > list_idCollection hint = "op=in,issearch,column_entity=list_id" ;
		}

        Service Address_list_appService {
            > @Address_list_appRepository
            String createAddress_list_appService(@Address_list_appVO address_list_appVO);
            String updateAddress_list_appService(@Address_list_appVO address_list_appVO);
            String deleteAddress_list_appService(@Address_list_appVO address_list_appVO);
            List<@Address_list_appVO> getAllAddress_list_appService();
            List<@Address_list_appVO> searchAddress_list_appService(@Address_list_appVO address_list_appVO);
			String createAllAddress_list_appService(List<@Address_list_appVO> list_address_list_app);
        }

        
        Entity Address_details_app {
            databaseTable = "Address_details_app" auditable
            ! optimisticLocking
            scaffold
           String details_id key length = "15";
            String care_of databaseColumn = "care_of" length = "64" nullable;
            String address_1 databaseColumn = "address_1" length = "64" nullable;
            String address_2 databaseColumn = "address_2" length = "64" nullable;
            String address_3 databaseColumn = "address_3" length = "64" nullable;
            String address_4 databaseColumn = "address_4" length = "64" nullable;
            String country_code length = "3" nullable;
			//- @Country fk_country_code hint = "BaseColumn1=country_code" nullable fetch="lazy";
			//- @City fk_city_code hint = "BaseColumn1=city_code,BaseColumn2=country_code" nullable fetch="lazy";

            String region_code length = "3" nullable;
            String city_code length = "5" nullable;
            String zip_code length = "10" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_1_type databaseColumn = "phone_1_type" length = "2" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String phone_2_type databaseColumn = "phone_2_type" length = "2" nullable;
            String phone_3 databaseColumn = "phone_3" length = "20" nullable;
            String phone_3_type databaseColumn = "phone_3_type" length = "2" nullable;
            String phone_4 databaseColumn = "phone_4" length = "20" nullable;
            String phone_4_type databaseColumn = "phone_4_type" length = "2" nullable;
            String landmark databaseColumn = "landmark" length = "128" nullable;
            String private_data_1 databaseColumn = "private_data_1" length = "64" nullable;
            String private_data_2 databaseColumn = "private_data_2" length = "64" nullable;
            String private_data_3 databaseColumn = "private_data_3" length = "64" nullable;
            String private_data_4 databaseColumn = "private_data_4" length = "64" nullable;
            String fax databaseColumn = "fax" length = "20" nullable;
            String ^email databaseColumn = "email" length = "64" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;
            String city_name databaseColumn = "city_name" length = "32" nullable;
            String region_name databaseColumn = "region_name" length = "40" nullable;

            Repository Address_details_appRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Address_details_appVO {
            String details_id ; String care_of ; String address_1 ; String address_2 ; String address_3 ; String address_4 ; String country_code ; String
            region_code ; String city_code ; String zip_code ; String phone_1 ; String phone_1_type ; String phone_2 ; String phone_2_type ; String
            phone_3 ; String phone_3_type ; String phone_4 ; String phone_4_type ; String landmark ; String private_data_1 ; String private_data_2 ;
             String private_data_3 ; String private_data_4 ; String fax ; String ^email ; String web_url ; String city_name ; String region_name; //CityVO ref_city hint = "reference=fk_city_code" ;
             Collection < String > address_details_appColVO ;
		}

        Service Address_details_appService {
            > @Address_details_appRepository
            > @CityService
            String createAddress_details_appService(@Address_details_appVO address_details_appVO) hint="returnAttribute=details_id";
            String updateAddress_details_appService(@Address_details_appVO address_details_appVO) hint="returnAttribute=details_id";
            String deleteAddress_details_appService(@Address_details_appVO address_details_appVO) hint="returnAttribute=details_id";
            List<@Address_details_appVO> getAllAddress_details_appService();
            List<@Address_details_appVO> searchAddress_details_appService(@Address_details_appVO address_details_appVO);
        }

        /**************************** Address_list_iss_app ****************************/
        Entity Address_list_iss_app {
            databaseTable = "Address_list_app" auditable
            ! optimisticLocking
            scaffold
            String list_id key length = "15";
            String address_sequence key length = "15";
			 - @Address_details_iss_app address_details_iss_app_fk hint = "BaseColumn1=address_id" nullable fetch = "lazy" ;
            String service_id databaseColumn = "service_id" length = "6" nullable;
            String address_type databaseColumn = "address_type" length = "2" nullable;
            String default_usage databaseColumn = "default_usage" length = "2" nullable;
            String sending_mode databaseColumn = "sending_mode" length = "1" nullable;
            String default_address_flag databaseColumn = "default_address_flag" length = "1" nullable;
            String address_owner databaseColumn = "address_owner" length = "2" nullable;
            String status databaseColumn = "status" length = "1" nullable;
            Date status_start_date databaseColumn = "status_start_date" nullable;
            Date status_end_date databaseColumn = "status_end_date" nullable;

            Repository Address_list_iss_appRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Address_list_iss_appVO {
            String list_id ; String address_sequence ; String address_id ; String service_id ; String address_type ; String default_usage ; String
            sending_mode ; String default_address_flag ; String address_owner ; String status ; Date status_start_date ; Date status_end_date ;
			Address_details_iss_appVO ref_Address_details_iss_app hint = "reference=Address_details_iss_app_fk" ;
            Collection < String > list_idCollection hint = "op=in,issearch,column_entity=list_id" ;
		}

        Service Address_list_iss_appService {
            > @Address_list_iss_appRepository
            String createAddress_list_iss_appService(@Address_list_iss_appVO address_list_iss_appVO);
            String updateAddress_list_iss_appService(@Address_list_iss_appVO address_list_iss_appVO);
            String deleteAddress_list_iss_appService(@Address_list_iss_appVO address_list_iss_appVO);
            List<@Address_list_iss_appVO> getAllAddress_list_iss_appService();
            List<@Address_list_iss_appVO> searchAddress_list_iss_appService(@Address_list_iss_appVO address_list_iss_appVO);
			String createAllAddress_list_iss_appService(List<@Address_list_iss_appVO> list_Address_list_iss_app);
        }

        /**************************** Address_details_iss_app ****************************/
        Entity Address_details_iss_app {
            databaseTable = "Address_details_app" auditable
            ! optimisticLocking
            scaffold
            String details_id hint="Sequence=ADDRESS_DETAILS,AutoGenerated"  key length = "15";
            String care_of databaseColumn = "care_of" length = "32" nullable;
            String address_1 databaseColumn = "address_1" length = "64" nullable;
            String address_2 databaseColumn = "address_2" length = "64" nullable;
            String address_3 databaseColumn = "address_3" length = "64" nullable;
            String address_4 databaseColumn = "address_4" length = "64" nullable;
            String country_code length = "3" nullable;
			//- @Country fk_country_code hint = "BaseColumn1=country_code" nullable fetch="lazy";
			//- @City fk_city_code hint = "BaseColumn1=city_code,BaseColumn2=country_code" nullable fetch="lazy";

            String region_code length = "3" nullable;
            String city_code length = "5" nullable;
            String zip_code length = "10" nullable;
            String phone_1 databaseColumn = "phone_1" length = "20" nullable;
            String phone_1_type databaseColumn = "phone_1_type" length = "2" nullable;
            String phone_2 databaseColumn = "phone_2" length = "20" nullable;
            String phone_2_type databaseColumn = "phone_2_type" length = "2" nullable;
            String phone_3 databaseColumn = "phone_3" length = "20" nullable;
            String phone_3_type databaseColumn = "phone_3_type" length = "2" nullable;
            String phone_4 databaseColumn = "phone_4" length = "20" nullable;
            String phone_4_type databaseColumn = "phone_4_type" length = "2" nullable;
            String landmark databaseColumn = "landmark" length = "128" nullable;
            String private_data_1 databaseColumn = "private_data_1" length = "64" nullable;
            String private_data_2 databaseColumn = "private_data_2" length = "64" nullable;
            String private_data_3 databaseColumn = "private_data_3" length = "64" nullable;
            String private_data_4 databaseColumn = "private_data_4" length = "64" nullable;
            String fax databaseColumn = "fax" length = "20" nullable;
            String ^email databaseColumn = "email" length = "64" nullable;
            String web_url databaseColumn = "web_url" length = "60" nullable;
            String city_name databaseColumn = "city_name" length = "30" nullable;
            String region_name databaseColumn = "region_name" length = "40" nullable;

            Repository Address_details_iss_appRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Address_details_iss_appVO {
            String details_id ; String care_of ; String address_1 ; String address_2 ; String address_3 ; String address_4 ; String country_code ; String
            region_code ; String city_code ; String zip_code ; String phone_1 ; String phone_1_type ; String phone_2 ; String phone_2_type ; String
            phone_3 ; String phone_3_type ; String phone_4 ; String phone_4_type ; String landmark ; String private_data_1 ; String private_data_2 ;
            String private_data_3 ; String private_data_4 ; String fax ; String ^email; String web_url ; String city_name ; String region_name ; //CityVO ref_city hint = "reference=fk_city_code" ;
		}

        Service Address_details_iss_appService {
            > @Address_details_iss_appRepository
            > @CityService
            String createAddress_details_iss_appService(@Address_details_iss_appVO address_details_iss_appVO) hint="returnAttribute=details_id";
            String updateAddress_details_iss_appService(@Address_details_iss_appVO address_details_iss_appVO) hint="returnAttribute=details_id";
            String deleteAddress_details_iss_appService(@Address_details_iss_appVO address_details_iss_appVO) hint="returnAttribute=details_id";
            List<@Address_details_iss_appVO> getAllAddress_details_iss_appService();
            List<@Address_details_iss_appVO> searchAddress_details_iss_appService(@Address_details_iss_appVO address_details_iss_appVO);
        }
         
        /**************************** ADDRESS_LIST_APP_SPEC ****************************/

        DataTransferObject Address_appSpecVO {
            String operation;
           Address_list_iss_appVO ref_address_list_app;
		   Address_details_iss_appVO ref_address_details_app;
		}

        Service Address_appSpecService {
            > @Address_list_iss_appService
            > @Address_details_iss_appService
			List<@Address_appSpecVO> processAddress_appSpecService(List<@Address_appSpecVO> list_address_appSpecVO);
        }
        
		
		Entity Markup_calcul
		{
		databaseTable="Markup_calcul"
		 auditable
		 !optimisticLocking
		  scaffold
		 String markup_id_seq key databaseType="NUMBER(10,0)";
		 String markup_fee_index key length = "3";
		 -@ Bank fk_markup_calcul_bc key hint="BaseColumn1=bank_code";
		 String description databaseColumn="description" length="32" nullable;
		 String currencyn_notin databaseColumn="currencyn_notin" length="6" nullable;
		 BigDecimal default_buying_rate databaseColumn="default_buying_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal default_buying_fix databaseColumn="default_buying_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal default_buying_min databaseColumn="default_buying_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal default_buying_max databaseColumn="default_buying_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal default_buying_grace databaseColumn="default_buying_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal default_selling_rate databaseColumn="default_selling_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal default_selling_fix databaseColumn="default_selling_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal default_selling_min databaseColumn="default_selling_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal default_selling_max databaseColumn="default_selling_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal default_selling_grace databaseColumn="default_selling_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal cash_buying_rate databaseColumn="cash_buying_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal cash_buying_fix databaseColumn="cash_buying_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal cash_buying_min databaseColumn="cash_buying_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal cash_buying_max databaseColumn="cash_buying_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal cash_buying_grace databaseColumn="cash_buying_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal cash_selling_rate databaseColumn="cash_selling_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal cash_selling_fix databaseColumn="cash_selling_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal cash_selling_min databaseColumn="cash_selling_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal cash_selling_max databaseColumn="cash_selling_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal cash_selling_grace databaseColumn="cash_selling_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal central_bank_buying_rate databaseColumn="central_bank_buying_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal central_bank_buying_fix databaseColumn="central_bank_buying_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal central_bank_buying_min databaseColumn="central_bank_buying_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal central_bank_buying_max databaseColumn="central_bank_buying_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal central_bank_buying_grace databaseColumn="central_bank_buying_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal central_bank_selling_rate databaseColumn="central_bank_selling_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal central_bank_selling_fix databaseColumn="central_bank_selling_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal central_bank_selling_min databaseColumn="central_bank_selling_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal central_bank_selling_max databaseColumn="central_bank_selling_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal central_bank_selling_grace databaseColumn="central_bank_selling_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal inter_transfer_buying_rate databaseColumn="inter_transfer_buying_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal inter_transfer_buying_fix databaseColumn="inter_transfer_buying_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal inter_transfer_buying_min databaseColumn="inter_transfer_buying_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal inter_transfer_buying_max databaseColumn="inter_transfer_buying_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal inter_transfer_buying_grace databaseColumn="inter_transfer_buying_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal inter_transfer_selling_rate databaseColumn="inter_transfer_selling_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal inter_transfer_selling_fix databaseColumn="inter_transfer_selling_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal inter_transfer_selling_min databaseColumn="inter_transfer_selling_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal inter_transfer_selling_max databaseColumn="inter_transfer_selling_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal inter_transfer_selling_grace databaseColumn="inter_transfer_selling_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal special_buying_rate databaseColumn="special_buying_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal special_buying_fix databaseColumn="special_buying_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal special_buying_min databaseColumn="special_buying_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal special_buying_max databaseColumn="special_buying_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal special_buying_grace databaseColumn="special_buying_grace" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal special_selling_rate databaseColumn="special_selling_rate" databaseType="NUMBER(9,6)" nullable;
		 BigDecimal special_selling_fix databaseColumn="special_selling_fix" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal special_selling_min databaseColumn="special_selling_min" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal special_selling_max databaseColumn="special_selling_max" databaseType="NUMBER(18,3)" nullable;
		 BigDecimal special_selling_grace databaseColumn="special_selling_grace" databaseType="NUMBER(18,3)" nullable;
		 String rule_identifier databaseColumn="rule_identifier" databaseType="CHAR(3)" nullable;
		 String rounded_method_identifier databaseColumn="rounded_method_identifier" databaseType="CHAR(1)" nullable;
		 BigDecimal threshold_amount databaseColumn="threshold_amount" databaseType="NUMBER(18,3)" nullable;
		 String country_verification databaseColumn="country_verification" databaseType="CHAR(1)" nullable;
		Repository Markup_calculRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Markup_calculVO { 
		 String  markup_id_seq; 
		 String  markup_fee_index;
		 String  bank_code;
		 String  description;
		 String  currencyn_notin;
		 BigDecimal  default_buying_rate;
		 BigDecimal  default_buying_fix;
		 BigDecimal  default_buying_min;
		 BigDecimal  default_buying_max;
		 BigDecimal  default_buying_grace;
		 BigDecimal  default_selling_rate;
		 BigDecimal  default_selling_fix;
		 BigDecimal  default_selling_min;
		 BigDecimal  default_selling_max;
		 BigDecimal  default_selling_grace;
		 BigDecimal  cash_buying_rate;
		 BigDecimal  cash_buying_fix;
		 BigDecimal  cash_buying_min;
		 BigDecimal  cash_buying_max;
		 BigDecimal  cash_buying_grace;
		 BigDecimal  cash_selling_rate;
		 BigDecimal  cash_selling_fix;
		 BigDecimal  cash_selling_min;
		 BigDecimal  cash_selling_max;
		 BigDecimal  cash_selling_grace;
		 BigDecimal  central_bank_buying_rate;
		 BigDecimal  central_bank_buying_fix;
		 BigDecimal  central_bank_buying_min;
		 BigDecimal  central_bank_buying_max;
		 BigDecimal  central_bank_buying_grace;
		 BigDecimal  central_bank_selling_rate;
		 BigDecimal  central_bank_selling_fix;
		 BigDecimal  central_bank_selling_min;
		 BigDecimal  central_bank_selling_max;
		 BigDecimal  central_bank_selling_grace;
		 BigDecimal  inter_transfer_buying_rate;
		 BigDecimal  inter_transfer_buying_fix;
		 BigDecimal  inter_transfer_buying_min;
		 BigDecimal  inter_transfer_buying_max;
		 BigDecimal  inter_transfer_buying_grace;
		 BigDecimal  inter_transfer_selling_rate;
		 BigDecimal  inter_transfer_selling_fix;
		 BigDecimal  inter_transfer_selling_min;
		 BigDecimal  inter_transfer_selling_max;
		 BigDecimal  inter_transfer_selling_grace;
		 BigDecimal  special_buying_rate;
		 BigDecimal  special_buying_fix;
		 BigDecimal  special_buying_min;
		 BigDecimal  special_buying_max;
		 BigDecimal  special_buying_grace;
		 BigDecimal  special_selling_rate;
		 BigDecimal  special_selling_fix;
		 BigDecimal  special_selling_min;
		 BigDecimal  special_selling_max;
		 BigDecimal  special_selling_grace;
		 String  rule_identifier;
		 String  rounded_method_identifier;
		 BigDecimal  threshold_amount;
		 String  country_verification;


		}
		Service Markup_calculService{ 
		 > @Markup_calculRepository
		 String createMarkup_calculService(@Markup_calculVO markup_calculVO);
		 String updateMarkup_calculService(@Markup_calculVO markup_calculVO);
		 String deleteMarkup_calculService(@Markup_calculVO markup_calculVO);
		 String mergeMarkup_calculService(@Markup_calculVO markup_calculVO);
		 List<@Markup_calculVO> getAllMarkup_calculService();
		 List<@Markup_calculVO> searchMarkup_calculService(@Markup_calculVO markup_calculVO);

		 }
		Entity Markup_elligible_currencies
		{
		databaseTable="Markup_elligible_currencies"
		 auditable
		 !optimisticLocking
		  scaffold
		 String currency_code key length="3";
		 String markup_id_seq key databaseType="NUMBER(10,0)";
		 String markup_fee_index key length = "3";
		 -@ Bank fk_markup_calcul_bc key hint="BaseColumn1=bank_code";
		Repository Markup_elligible_currenciesRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		}  
		DataTransferObject Markup_elligible_currenciesVO { 
		 String currency_code;
		 String  markup_id_seq; 
		 String  markup_fee_index;
		 String  bank_code;
		}
		Service Markup_elligible_currenciesService{ 
		 > @Markup_elligible_currenciesRepository
		 String createMarkup_elligible_currenciesService(@Markup_elligible_currenciesVO markup_elligible_currenciesVO);
		 String updateMarkup_elligible_currenciesService(@Markup_elligible_currenciesVO markup_elligible_currenciesVO);
		 String deleteMarkup_elligible_currenciesService(@Markup_elligible_currenciesVO markup_elligible_currenciesVO);
		 String mergeMarkup_elligible_currenciesService(@Markup_elligible_currenciesVO markup_elligible_currenciesVO);
		 List<@Markup_elligible_currenciesVO> getAllMarkup_elligible_currenciesService();
		 List<@Markup_elligible_currenciesVO> searchMarkup_elligible_currenciesService(@Markup_elligible_currenciesVO markup_elligible_currenciesVO);

		 }

         /****************************** Package PCRD_GUI_GENERAL_TOOLS ************************************/

        Service Pcrd_gui_general_toolsService {
            hint = "jpubPackage=PCRD_GUI_GENERAL_TOOLS,Property1=jpub_datasource"
            @Convert_ccy_amountOutVO convert_ccy_amount(@Convert_ccy_amountInVO convert_ccy_amountInVO);
        }

        DataTransferObject Convert_ccy_amountInVO {
            Timestamp 	p_business_date             ;
            String 		p_lang_code                 ;
            String 		p_bank_code                 ;
            String 		p_bank_currency_code        ;
            String 		p_origine_currency_code     ;
            String 		p_rate_origin               ;
            String 		p_conversion_mode_BAS       ;
            String 		p_destination_currency_code ;
            BigDecimal 	p_origine_amount            ;
            Timestamp 	p_origine_conversion_date   ;
            String 		p_markup_fee_index          ;
            String 		p_markup_flag               ;
            String 		p_transaction_code          ;
            String 		p_rate_iso_format_flag      ;
            String 		p_rate_category             ;
            BigDecimal 	p_precision                 ;
        }

        DataTransferObject Convert_ccy_amountOutVO {
            BigDecimal 	p_destination_amount  ;
            Timestamp 	p_conversion_date     ;
            String 		p_rate_iso_str_format ;
            BigDecimal 	p_markup_amount       ;
            String 		p_msg_error           ;
            String 		p_return_code         ;
        }

         /****************************** Status reason trans source ************************************/

		 Entity Status_reason_trans_source
		{
			databaseTable="Status_reason_trans_source"
			!auditable
			!optimisticLocking
			scaffold
			String entity key;
			String status_code key;
			String status_reason_code key;
			- @Bank fk_bank_code key hint = "BaseColumn1=bank_code" fetch = "lazy";	
			- Set<@Status_reason_transition> status_reason_transition cascade = "all-delete-orphan" opposite fk_status_reason_transition_06; 
			Repository Status_reason_trans_sourceRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Status_reason_trans_sourceVO { 
			String  bank_code;
			String  entity;
			String  status_code;
			String  status_reason_code;
			Collection<Status_reason_transitionVO> status_reason_transition_col hint="Set=status_reason_transition"
		}
		Service Status_reason_trans_sourceService { 
			> @Status_reason_trans_sourceRepository
			> @Status_reason_transitionService
			String createStatus_reason_trans_sourceService(@Status_reason_trans_sourceVO status_reason_trans_sourceVO);
			String updateStatus_reason_trans_sourceService(@Status_reason_trans_sourceVO status_reason_trans_sourceVO);
			String deleteStatus_reason_trans_sourceService(@Status_reason_trans_sourceVO status_reason_trans_sourceVO);
			List<@Status_reason_trans_sourceVO> getAllStatus_reason_trans_sourceService();
			List<@Status_reason_trans_sourceVO> searchStatus_reason_trans_sourceService(@Status_reason_trans_sourceVO status_reason_trans_sourceVO);
		}

         /****************************** Status_reason_transition ************************************/
		 
		 Entity Status_reason_transition
		{
			databaseTable="Status_reason_transition"
			!auditable
			!optimisticLocking
			scaffold
			-@ Status_reason_trans_source fk_status_reason_transition_06 key hint="BaseColumn1=entity,BaseColumn2=status_code,BaseColumn3=status_reason_code,BaseColumn4=bank_code," opposite status_reason_transition;
			String allowed_status_code key;
			String allowed_status_reason key;
			String auto_transition nullable;
			String manual_transition nullable;
			String exit_function_id nullable;
			Repository Status_reason_transitionRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
		} 
		DataTransferObject Status_reason_transitionVO { 
			String  bank_code;
			String  entity;
			String  status_code;
			String  status_reason_code;
			String  allowed_status_code;
			String  allowed_status_reason;
			String  auto_transition;
			String  manual_transition;
			String  exit_function_id;
		}
		Service Status_reason_transitionService { 
			> @Status_reason_transitionRepository
			String createStatus_reason_transitionService(@Status_reason_transitionVO status_reason_transitionVO);
			String updateStatus_reason_transitionService(@Status_reason_transitionVO status_reason_transitionVO);
			String deleteStatus_reason_transitionService(@Status_reason_transitionVO status_reason_transitionVO);
			List<@Status_reason_transitionVO> getAllStatus_reason_transitionService();
			List<@Status_reason_transitionVO> searchStatus_reason_transitionService(@Status_reason_transitionVO status_reason_transitionVO);
			String deleteAllStatus_reason_transitionService(List<@Status_reason_transitionVO> list_status_reason_transitionVO);
		}
				 
		/************************ Begin McOperation ****************************/ Entity McOperation {
            auditable
            ! optimisticLocking
            scaffold
            Long mc_operation_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String id_maker length = "16" nullable;
            String id_checker length = "16" nullable;
			String status length = "1" nullable;
			Timestamp creation_date databaseColumn = "creation_date" nullable;
			Timestamp decision_date databaseColumn = "decision_date" nullable; 
            
            - @McOperationPar mc_operationpar_id hint = "BaseColumn1=mc_operationpar_fk" nullable fetch = "lazy";

			String vo nullable;
			String old_snapshot nullable;
			String new_snapshot nullable;
			
			String screen_config nullable;
			String screen_url nullable;

			String mc_comment nullable;

			String esc_history nullable;

			String storedKey nullable;//maker storedKey

            Repository McOperationRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject McOperationVO {
            Long mc_operation_id ; String id_maker ; String id_checker ; String status ; 
            Timestamp creation_date ;
            Timestamp decision_date ;
            Long mc_operationpar_fk; 
            String vo ; String old_snapshot ; String new_snapshot ;
            String screen_config; String screen_url;
            String mc_comment;
            Date after_creation_date hint ="op=greatThanOrEqual,issearch,column_entity=creation_date";
			Date before_creation_date hint ="op=lessThanOrEqual,issearch,column_entity=creation_date";
			
            Date after_decision_date hint ="op=greatThanOrEqual,issearch,column_entity=decision_date";
			Date before_decision_date hint ="op=lessThanOrEqual,issearch,column_entity=decision_date";
			
			String canValidate hint ="issearch,skip";//for checker
			
			String timeZone hint ="issearch,skip";//for diff
			Collection < McEscalationVO > mcEscalations hint = "issearch,skip" ;
			
			String esc_history;
			String op_name hint ="issearch,skip";//for search
			String op_bank hint ="issearch,skip";//for search
			
			String storedKey;
        }

		 Service McOperationService {
            > @McOperationRepository
            
            String createMcOperationService(@McOperationVO mcOperationVO);
            String updateMcOperationService(@McOperationVO mcOperationVO);
            String deleteMcOperationService(@McOperationVO mcOperationVO);
            String checkMcOperationService(@McOperationVO mcOperationVO);
            String acceptMcOperationService(@McOperationVO mcOperationVO, String jwt, String baseUri);
            String declineMcOperationService(@McOperationVO mcOperationVO);
            List<@McOperationVO> getAllMcOperationService();
            List<@McOperationVO> searchMcOperationService(@McOperationVO mcOperationVO);
            List<@McOperationVO> getCheckableOperationService(@McOperationVO mcOperationVO);
            String checkMcParDependencyService(@McOperationVO mcOperationVO);
            
            List<@McOperationVO> getObjMcOperationService(String obj);
        }
		
		/************************ Begin McOperationPar ****************************/ Entity McOperationPar {
            auditable
            ! optimisticLocking
            scaffold
            Long mc_operationpar_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String bank_code length = "6" nullable hint="dataAccess=Bank";
			String operation_name length = "64" nullable;
			String operation_url length = "128" nullable;
			String screen length = "64" nullable;
			String operation_keys length = "128" nullable;
			String enabled length = "1" nullable;
			String require_snap length = "1" nullable;
			
			String specific_vo_name databaseColumn = "specific_vo_name" length = "64" nullable;
			
			String specific databaseColumn = "mc_specific" length = "1" nullable;
			String split_vos length = "1" nullable;
			String use_storedKey length = "1" nullable;
			
			- Set<@McFieldCriteria> mcFieldCriterias cascade = "all-delete-orphan" opposite fk_mc_operationpar_id;
			- Set<@McEscalation> mcMcEscalations cascade = "all-delete-orphan" opposite fk_mc_operationpar_id;
			- Set<@McParDependency> mcParDependencies cascade = "all-delete-orphan" opposite fk_mc_operationpar_id;
			
            Repository McOperationParRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject McOperationParVO {
            Long mc_operationpar_id ; String bank_code ; String operation_url ;
            String operation_name; String screen; String operation_keys; String enabled; String require_snap;
            String specific; String split_vos; String specific_vo_name; String use_storedKey;
			Collection < McFieldCriteriaVO > mcFieldCriterias_col hint = "Set=mcFieldCriterias" ;
			Collection < McEscalationVO > mcMcEscalations_col hint = "Set=mcMcEscalations" ;
			Collection < McParDependencyVO > mcParDependencies_col hint = "Set=mcParDependencies" ;
			
			boolean mc_par_idConditionIn hint ="condition=in,operand=mc_par_idCol"; 
			Collection < Long > mc_par_idCol hint="attribute=mc_operationpar_id";
        }
		
		Service McOperationParService {
            > @McOperationParRepository
            > @McFieldCriteriaService
            > @McEscalationService
            > @McParDependencyService

            String createMcOperationParService(@McOperationParVO mcOperationParVO) hint="returnAttribute=mc_operationpar_id";
            String updateMcOperationParService(@McOperationParVO mcOperationParVO);
            String deleteMcOperationParService(@McOperationParVO mcOperationParVO);
            List<@McOperationParVO> getAllMcOperationParService();
            List<@McOperationParVO> searchMcOperationParService(@McOperationParVO mcOperationParVO);
        }
                
        /************************ Begin McParDependency ****************************/ Entity McParDependency {
			databaseTable="MC_PARDEPENDENCY"
			auditable
            ! optimisticLocking
            scaffold
            Long mc_pardependency_id key hint = "AutoGenerated,Sequence=Mc_ParDependency" databaseType = "NUMBER(10,0)";
			String operation_url length = "256" nullable;
			String enabled length = "1" nullable;

            - @McOperationPar fk_mc_operationpar_id hint = "BaseColumn1=mc_operationpar_fk" nullable opposite mcParDependencies;


            Repository McParDependencyRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }
        
		 DataTransferObject McParDependencyVO {
            Long mc_pardependency_id ; String operation_url ;
            Long mc_operationpar_fk; String enabled;
         }
		
		Service McParDependencyService {
            > @McParDependencyRepository
            
            String createMcParDependencyService(@McParDependencyVO mcParDependencyVO);
            String updateMcParDependencyService(@McParDependencyVO mcParDependencyVO);
            String deleteMcParDependencyService(@McParDependencyVO mcParDependencyVO);
            List<@McParDependencyVO> getAllMcParDependencyService();
            List<@McParDependencyVO> searchMcParDependencyService(@McParDependencyVO mcParDependencyVO);
        }
        
		/************************ Begin McEscalation ****************************/ Entity McEscalation {
            auditable
            ! optimisticLocking
            scaffold
            Long mc_escalation_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
			String accessType length = "1" nullable;
			String checker_id nullable;
            int order databaseColumn = "esc_order" databaseType = "NUMBER(2,0)";
	        String period nullable;

            - @McOperationPar fk_mc_operationpar_id hint = "BaseColumn1=mc_operationpar_fk" nullable opposite mcMcEscalations;


            Repository McEscalationRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }
        
		 DataTransferObject McEscalationVO {
            Long mc_escalation_id ;
			String accessType ; String checker_id ; 
            int order; String period ;
            Long mc_operationpar_fk; 
            
	        Date checking_limit hint ="issearch,skip";
            String checking_action hint ="issearch,skip";
         }
		
		Service McEscalationService {
            > @McEscalationRepository
            
            String createMcEscalationService(@McEscalationVO mcEscalationVO);
            String updateMcEscalationService(@McEscalationVO mcEscalationVO);
            String deleteMcEscalationService(@McEscalationVO mcEscalationVO);
            List<@McEscalationVO> getAllMcEscalationService();
            List<@McEscalationVO> searchMcEscalationService(@McEscalationVO mcEscalationVO);
        }
        
		/************************ Begin McFieldCriteria ****************************/ Entity McFieldCriteria {
            auditable
            ! optimisticLocking
            scaffold
            Long mc_fieldcriteria_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String field_key length = "64" nullable;
            String field_type length = "16" nullable;
			String operator length = "16" nullable;
			String operand length = "64" nullable;
            - @McOperationPar fk_mc_operationpar_id hint = "BaseColumn1=mc_operationpar_fk" nullable opposite mcFieldCriterias;


            Repository McFieldCriteriaRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }
        
		 DataTransferObject McFieldCriteriaVO {
            Long mc_fieldcriteria_id ; String field_key ; String field_type;
            String operator ; String operand; 
            Long mc_operationpar_fk; 
         }
		
		Service McFieldCriteriaService {
            > @McFieldCriteriaRepository
            
            String createMcFieldCriteriaService(@McFieldCriteriaVO mcFieldCriteriaVO);
            String updateMcFieldCriteriaService(@McFieldCriteriaVO mcFieldCriteriaVO);
            String deleteMcFieldCriteriaService(@McFieldCriteriaVO mcFieldCriteriaVO);
            List<@McFieldCriteriaVO> getAllMcFieldCriteriaService();
            List<@McFieldCriteriaVO> searchMcFieldCriteriaService(@McFieldCriteriaVO mcFieldCriteriaVO);
        }
		
		 /************************ Begin Grants ****************************/ 
        	Entity Grants {
            auditable
            ! optimisticLocking
            scaffold
            Long grant_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            String module ;
			String service ;
			String method ;
			
            Repository GrantsRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }
        
		 DataTransferObject GrantsVO {
		 	Long grant_id;
		    String module;
			String service ;
			String method ;
         }
		
		Service GrantsService {
            > @GrantsRepository
            String createGrantsService(@GrantsVO grantsVO);
            String updateGrantsService(@GrantsVO grantsVO);
            String deleteGrantsService(@GrantsVO grantsVO);
            List<@GrantsVO> getAllGrantsService();
            List<@GrantsVO> searchGrantsService(@GrantsVO grantsVO);
        }
        
        
        /******************************** Begin Grants2profiles ************/ 
        Entity Grants2profiles {
            auditable
            ! optimisticLocking
            scaffold
            
        
            - @Grants fk_grants key hint = "BaseColumn1=grants_fk" fetch = "lazy";
            - @Profile fk_profile key hint = "BaseColumn1=profile_fk" opposite restricted_services;


            Repository Grants2profilesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

		DataTransferObject Grants2profilesVO {
		
			
			Long grants_fk;
			String profile_fk;
		}

        Service Grants2profilesService {
            > @Grants2profilesRepository
            String createGrants2profilesService(@Grants2profilesVO grants2profilesVO);
            String updateGrants2profilesService(@Grants2profilesVO grants2profilesVO);
            String deleteGrants2profilesService(@Grants2profilesVO grants2profilesVO);
            List<@Grants2profilesVO> getAllGrants2profilesService();
            List<@Grants2profilesVO> searchGrants2profilesService(@Grants2profilesVO grants2profilesVO);
        }

    		Entity Pwc_services {
            ! optimisticLocking
            scaffold
            Long pwc_services_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";
            
			String module; 
			String service; 
			String method;
			String checkable length = "1" nullable; //'Y' : 'N'
			String cached length = "1" nullable; //'Y' : 'N'
			String type_service length = "3"; // 'R' : 'R/W'
			
			Repository Pwc_servicesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
		}
		
		DataTransferObject Pwc_servicesVO {
            Long pwc_services_id;
            String module; 
            String service; 
            String method;
            String checkable; 
            String cached;
            String type_service;
         }
		
		Service Pwc_servicesService {
            > @Pwc_servicesRepository
            
            String createPwc_servicesService(@Pwc_servicesVO pwc_servicesVO);
            String updatePwc_servicesService(@Pwc_servicesVO pwc_servicesVO);
            String deletePwc_servicesService(@Pwc_servicesVO pwc_servicesVO);
            List<@Pwc_servicesVO> getAllPwc_servicesService();
            List<@Pwc_servicesVO> searchPwc_servicesService(@Pwc_servicesVO pwc_servicesVO);
        }
		
		
		Entity Pwc_screen_services {
		! optimisticLocking
            scaffold
            Long pwc_screen_services_id key hint = "AutoGenerated" databaseType = "NUMBER(10,0)";            
            - @Screen fk_pwc_screen_services_1 hint = "BaseColumn1=screen_fk" fetch = "lazy";
            - @Pwc_services fk_pwc_screen_services_2 hint = "BaseColumn1=pwc_services_fk" fetch = "lazy";

            Repository Pwc_screen_servicesRepository {
                findByKeys;
                findByKey;
                findByCondition;
                findByCriteria;
            }
        }

        DataTransferObject Pwc_screen_servicesVO {
        	Long pwc_screen_services_id;
            String screen_fk ; 
            Long pwc_services_fk ;
        }

        Service Pwc_screen_servicesService {
            > @Pwc_screen_servicesRepository
            String createPwc_screen_servicesService(@Pwc_screen_servicesVO pwc_screen_servicesVO);
            String updatePwc_screen_servicesService(@Pwc_screen_servicesVO pwc_screen_servicesVO);
            String deletePwc_screen_servicesService(@Pwc_screen_servicesVO pwc_screen_servicesVO);
            List<@Pwc_screen_servicesVO> getAllPwc_screen_servicesService();
            List<@Pwc_screen_servicesVO> searchPwc_screen_servicesService(@Pwc_screen_servicesVO pwc_screen_servicesVO);
        }	
        
        Service Pwc_time_zoneService {
			hint="jpubPackage=PWC_TIME_ZONE,Property1=jpub_datasource"
			@Get_time_zoneOutVO get_time_zone();
		}

		DataTransferObject Get_time_zoneOutVO {
			String p_time_zone;
		}
        
        Entity Vtimezone_names_view
          {
          hint="view"
          databaseTable="V_timezone_names_view"
           !auditable
           !optimisticLocking
            scaffold
           String tzname key databaseColumn="tzname" length="64";
           String tzabbrev key databaseColumn="tzabbrev" length="64";
          Repository Vtimezone_names_viewRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
          } 
          DataTransferObject Vtimezone_names_viewVO { 
           String  tzname;
           String  tzabbrev;

          }
          Service Vtimezone_names_viewService{ 
           > @Vtimezone_names_viewRepository
           String createVtimezone_names_viewService(@Vtimezone_names_viewVO vtimezone_names_viewVO);
           String updateV_imezone_names_viewService(@Vtimezone_names_viewVO vtimezone_names_viewVO);
           String deleteVtimezone_names_viewService(@Vtimezone_names_viewVO vtimezone_names_viewVO);
           List<@Vtimezone_names_viewVO> getAllVtimezone_names_viewService();
           List<@Vtimezone_names_viewVO> searchVtimezone_names_viewService(@Vtimezone_names_viewVO vtimezone_names_viewVO);

           }
           
        Service Pcrd_gui_cycle_cutoff_toolsService {
            hint="jpubPackage=PCRD_GUI_CYCLE_CUTOFF_TOOLS,Property1=jpub_datasource"
            @Create_cycle_cutoff_listOutVO create_cycle_cutoff_list(@Create_cycle_cutoff_listInVO create_cycle_cutoff_listInVO );
        }
        DataTransferObject Create_cycle_cutoff_listInVO {
            Date p_business_date;
            String p_langue;
            Cycle_cutoff_param_objVO cycle_cutoff_param_objVO hint = "record=cycle_cutoff_param_obj" ;
        }
        DataTransferObject Create_cycle_cutoff_listOutVO {
            String p_msg_error;
            String p_return_code;
        }

       Entity Vdist_tznames_view
          {
          hint="view"
          databaseTable="V_dist_tznames_view"
           !auditable
           !optimisticLocking
            scaffold
           String tzname key databaseColumn="tzname" length="64";
          Repository Vdist_tznames_viewRepository { findByKeys;findByKey;findByCondition;findByCriteria; }
          } 
          DataTransferObject Vdist_tznames_viewVO { 
           String  tzname;

          }
          Service Vdist_tznames_viewService{ 
           > @Vdist_tznames_viewRepository
           List<@Vdist_tznames_viewVO> getAllVdist_tznames_viewService();
           List<@Vdist_tznames_viewVO> searchVdist_tznames_viewService(@Vdist_tznames_viewVO vdist_tznames_viewVO);

           }
    }
}
