«REM»
You can change code generation templates by using
Aspect-Oriented Programming features of oAW. You
can add AROUND advice in this file. Read 
Sculptor Developer's Guide for more information.
«ENDREM»     

«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::dbhelper»
«EXTENSION extensions::SpecialCases»
 
«AROUND templates::DomainObject::domainObjectHook FOR DomainObject»
    // This comment was generated from SpecialCases.xpt 
«ENDAROUND»

«AROUND templates::DomainObject::jpaAnnotations FOR Attribute»
	    «IF naturalKey == true»
			«EXPAND templates::DomainObject::idAnnotations»
		«ELSE»
		«targetDef.proceed()»
		«ENDIF»
«ENDAROUND»

«AROUND templates::DomainObject::compositeKey FOR DomainObject»
	
«FILE javaFileName(getDomainPackage() + "." + name + "PK")»
«LET getAllNaturalKeys() AS allKeys»
    package «getDomainPackage()»;
    @javax.persistence.Embeddable
    public  class «name»PK implements java.io.Serializable{
		
		
		private static final long serialVersionUID = 1L;
		«REM»«FOREACH getAllNaturalKeyReferences() AS a»
	
			«FOREACH a.to.getAllNaturalKeyAttributes() AS b»
       			 private «b.getTypeName()» «b.name»«IF b.collectionType != null» = new «b.getImplTypeName()»()«ENDIF»;
			«ENDFOREACH»
			RM
			«FOREACH a.to.getAllNaturalKeyReferences() AS c»
		        «FOREACH c.to.getAllNaturalKeyAttributes() AS d»
		     		 private «d.getTypeName()» «d.name»«IF d.collectionType != null» = new «d.getImplTypeName()»()«ENDIF»;
		        «ENDFOREACH»
		        
		     «ENDFOREACH»
			
		«ENDFOREACH»
        «ENDREM»
        «FOREACH getAllNaturalKeyAttributes() AS a»
	        private «a.getTypeName()» «a.name»«IF a.collectionType != null» = new «a.getImplTypeName()»()«ENDIF»;	
        «ENDFOREACH»
        «FOREACH getAllReferencesNaturalKeyAttributes() AS a»
	        private «a.getTypeName()» «a.name»«IF a.collectionType != null» = new «a.getImplTypeName()»()«ENDIF»;	
        «ENDFOREACH»
        
        public «name»PK() {
            
        }
        
        public «name»PK(
        «REM»
        	«EXPAND templates::DomainObject::parameterTypeAndName FOREACH allKeys.without(getAllNaturalKeyReferences()) SEPARATOR ","»
        «ENDREM»
        «EXPAND templates::DomainObject::parameterTypeAndName FOREACH getAllNaturalKeyAttributes() SEPARATOR ","»
        
        «REM»«IF getAllNaturalKeyReferences().size>0»
        ,
       	«EXPAND templates::DomainObject::parameterTypeAndName FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes() SEPARATOR ","»
       	«ENDIF» 
       	RM
       	«IF getAllNaturalKeyReferences().to.getAllNaturalKeyReferences().size>0»
        ,
       	«EXPAND templates::DomainObject::parameterTypeAndName FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes() SEPARATOR ","»
       	«ENDIF»
       	«ENDREM»
       	«IF getAllReferencesNaturalKeyAttributes().size>0&&getAllNaturalKeyAttributes().size>0»
        ,
        «ENDIF»
       	«EXPAND templates::DomainObject::parameterTypeAndName FOREACH getAllReferencesNaturalKeyAttributes() SEPARATOR ","»
       	 
       	) { 
        
            «REM»
            «FOREACH allKeys.without(getAllNaturalKeyReferences()) AS a»
            «ENDREM»
            «FOREACH getAllNaturalKeyAttributes() AS a»
            this.«a.name» = «a.name»;
            «ENDFOREACH»
            «REM»«FOREACH getAllNaturalKeyReferences() AS a»
				«FOREACH a.to.getAllNaturalKeyAttributes() AS b»
       			     this.«b.name» =  «b.name»;			
				«ENDFOREACH»
			RM
			«FOREACH a.to.getAllNaturalKeyReferences() AS c»
		        «FOREACH c.to.getAllNaturalKeyAttributes() AS d»
		             this.«d.name» =  «d.name»;
		        «ENDFOREACH»
		        
		     «ENDFOREACH»«ENDFOREACH»
		    «ENDREM»
		     «FOREACH getAllReferencesNaturalKeyAttributes() AS d»
		             this.«d.name» =  «d.name»;
		     «ENDFOREACH»
			
        }
		
		«REM»no annotations for composite key classes«ENDREM»
        «EXPAND templates::DomainObject::propertyGetter(false) FOREACH getAllNaturalKeyAttributes()»
        «REM»«EXPAND templates::DomainObject::propertyGetter(false) FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes()»
		RM
		«EXPAND templates::DomainObject::propertyGetter(false) FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes()»
		«ENDREM»
		«EXPAND templates::DomainObject::propertyGetter(false) FOREACH getAllReferencesNaturalKeyAttributes()»
		
		«EXPAND propertySetterPK FOREACH getAllNaturalKeyAttributes()»
        «REM»«EXPAND propertySetterPK FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes()»
		RM
		«EXPAND propertySetterPK FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes()»
		«ENDREM»
		«EXPAND propertySetterPK FOREACH getAllReferencesNaturalKeyAttributes()»








        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (!(obj instanceof «name»PK)) return false;

            «name»PK other = («name»PK) obj;

            «FOREACH getAllNaturalKeyAttributes() AS a -»
            	«IF a.getTypeName().isPrimitiveType() -»
            if («getGetAccessor(a)»() != other.«getGetAccessor(a)»()) return false;
            	«ELSEIF a.getTypeName() == "java.math.BigDecimal" -»
            if («getGetAccessor(a)»().compareTo(other.«getGetAccessor(a)»()) != 0) return false;
            	«ELSE -»
            if (!«getGetAccessor(a)»().equals(other.«getGetAccessor(a)»())) return false;
            	«ENDIF -»
            «ENDFOREACH -»
            «REM»«FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes() AS r -»
            if (!«getGetAccessor(r)»().equals(other.«getGetAccessor(r)»())) return false;
            «ENDFOREACH -»
            «REM»RM
            «FOREACH getAllReferencesNaturalKeyAttributes() AS r -»
            if (!«getGetAccessor(r)»().equals(other.«getGetAccessor(r)»())) return false;
            «ENDFOREACH -»
            «ENDREM»
            «FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes() AS r -»
            if (!«getGetAccessor(r)»().equals(other.«getGetAccessor(r)»())) return false;
            «ENDFOREACH -»
            
            return true;
        }

        public int hashCode() {
            int result = 17;
            «FOREACH getAllNaturalKeyAttributes() AS a -»
            result = 37 * result + computeHashCode(«getGetAccessor(a)»());
            «ENDFOREACH -»
            
            «REM»HADJAJI : 26-04-2010«ENDREM»
            
            «REM»«FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes() AS a -»
            result = 37 * result + computeHashCode(«getGetAccessor(a)»());
            «ENDFOREACH -»
            «REM»RM
           	«FOREACH getAllNaturalKeyReferences().to.getAllNaturalKeyReferences().to.getAllNaturalKeyAttributes() AS a -»
            result = 37 * result + computeHashCode(«getGetAccessor(a)»());
            «ENDFOREACH -»«ENDREM»
            «FOREACH getAllReferencesNaturalKeyAttributes() AS a»
            result = 37 * result + computeHashCode(«getGetAccessor(a)»());
            «ENDFOREACH -»
            return result; 
        }

        private int computeHashCode(final Object o) {
            if (null == o) {
                return 19;
            }
            if (o.getClass().isArray()) {
                return 0;
            }
            return o.hashCode();
        }
    }
«ENDLET»
«ENDFILE»
«ENDAROUND»

«AROUND templates::DomainObject::uniqueConstraints FOR DomainObject -»

«ENDAROUND»

«DEFINE oneReferenceGetterRef FOR Attribute»
    «formatJavaDoc()»
    «getVisibilityLitteralGetter()»«getTypeName()» get«name.toFirstUpper()»() {
        return «name»;
    };
«ENDDEFINE»



«AROUND templates::DomainObject::propertyAccessors FOR Attribute»
    «IF naturalKey==true && (this.eContainer.eContents.typeSelect(Reference).select(e|e.naturalKey).size+this.eContainer.eContents.typeSelect(Attribute).select(e|e.naturalKey).size)>1»
		«null-»
	«ELSE»
    	«targetDef.proceed()»
    «ENDIF»
«ENDAROUND»


«AROUND templates::DomainObject::minimumConstructor FOR DomainObject»
«IF this.eContents.typeSelect(Reference).select(e|e.naturalKey).size+this.eContents.typeSelect(Attribute).select(e|e.naturalKey).size>1»
	public «name»(«name»PK «name.toLowerCase()»PK) {
    	super();
    	this.«name.toLowerCase()»PK = «name.toLowerCase()»PK;
    }
	«ELSE»
	«targetDef.proceed()»	
«ENDIF»

«ENDAROUND»



«AROUND templates::DomainObject::propertyConstructorBase FOR DomainObject»

«IF this.eContents.typeSelect(Reference).select(e|e.naturalKey).size+this.eContents.typeSelect(Attribute).select(e|e.naturalKey).size>1 || (this.getAllNaturalKeyAttributes().isEmpty &&  this.getAllNaturalKeyReferences().size==1)»
	public «name»(«name»PK «name.toLowerCase()»PK) {
    	super();
    	this.«name.toLowerCase()»PK = «name.toLowerCase()»PK;
    }
	«ELSE»
	«targetDef.proceed()»	
«ENDIF»
«ENDAROUND»


«DEFINE propertySetterPK FOR Attribute»

    public void set«name.toFirstUpper()»(«getTypeName()» «name») {
       
        this.«name» = «name»;
    };
«ENDDEFINE»